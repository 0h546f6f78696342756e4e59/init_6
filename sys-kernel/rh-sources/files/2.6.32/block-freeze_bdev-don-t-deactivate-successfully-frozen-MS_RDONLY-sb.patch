From: Mike Snitzer <snitzer@redhat.com>
Date: Tue, 16 Feb 2010 16:29:56 -0500
Subject: [block] freeze_bdev: don't deactivate successfully frozen MS_RDONLY sb
Message-id: <1266337796-23987-1-git-send-email-snitzer@redhat.com>
Patchwork-id: 23286
O-Subject: [RHEL6 PATCH] freeze_bdev: don't deactivate successfully frozen
	MS_RDONLY sb
Bugzilla: 565890
RH-Acked-by: Josef Bacik <josef@redhat.com>

Upstream in both linux-2.6 and linux-2.6.32.y

Bugzilla #565890

commit 4b06e5b9ad8abb20105b2b25e42c509ebe9b2d76
Author: Jun'ichi Nomura <j-nomura@ce.jp.nec.com>
Date:   Fri Jan 29 09:56:22 2010 +0900

    freeze_bdev: don't deactivate successfully frozen MS_RDONLY sb

    Thanks Thomas and Christoph for testing and review.
    I removed 'smp_wmb()' before up_write from the previous patch,
    since up_write() should have necessary ordering constraints.
    (I.e. the change of s_frozen is visible to others after up_write)
    I'm quite sure the change is harmless but if you are uncomfortable
    with Tested-by/Reviewed-by on the modified patch, please remove them.

    If MS_RDONLY, freeze_bdev should just up_write(s_umount) instead of
    deactivate_locked_super().
    Also, keep sb->s_frozen consistent so that remount can check the frozen state.

    Otherwise a crash reported here can happen:
    http://lkml.org/lkml/2010/1/16/37
    http://lkml.org/lkml/2010/1/28/53

    This patch should be applied for 2.6.32 stable series, too.

    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Tested-by: Thomas Backlund <tmb@mandriva.org>
    Signed-off-by: Jun'ichi Nomura <j-nomura@ce.jp.nec.com>
    Cc: stable@kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

Signed-off-by: Aristeu Rozanski <arozansk@redhat.com>

diff --git a/fs/block_dev.c b/fs/block_dev.c
index 73d6a73..d11d028 100644
--- a/fs/block_dev.c
+++ b/fs/block_dev.c
@@ -246,7 +246,8 @@ struct super_block *freeze_bdev(struct block_device *bdev)
 	if (!sb)
 		goto out;
 	if (sb->s_flags & MS_RDONLY) {
-		deactivate_locked_super(sb);
+		sb->s_frozen = SB_FREEZE_TRANS;
+		up_write(&sb->s_umount);
 		mutex_unlock(&bdev->bd_fsfreeze_mutex);
 		return sb;
 	}
@@ -307,7 +308,7 @@ int thaw_bdev(struct block_device *bdev, struct super_block *sb)
 	BUG_ON(sb->s_bdev != bdev);
 	down_write(&sb->s_umount);
 	if (sb->s_flags & MS_RDONLY)
-		goto out_deactivate;
+		goto out_unfrozen;
 
 	if (sb->s_op->unfreeze_fs) {
 		error = sb->s_op->unfreeze_fs(sb);
@@ -321,11 +322,11 @@ int thaw_bdev(struct block_device *bdev, struct super_block *sb)
 		}
 	}
 
+out_unfrozen:
 	sb->s_frozen = SB_UNFROZEN;
 	smp_wmb();
 	wake_up(&sb->s_wait_unfrozen);
 
-out_deactivate:
 	if (sb)
 		deactivate_locked_super(sb);
 out_unlock:
