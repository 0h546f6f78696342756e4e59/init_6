From: Dave Airlie <airlied@redhat.com>
Date: Wed, 13 Jan 2010 01:28:58 -0500
Subject: [drm] nouveau: update to 2.6.33 level
Message-id: <1263346138-8390-1-git-send-email-airlied@redhat.com>
Patchwork-id: 22479
O-Subject: [RHEL6 PATCH 1/1] drm/nouveau: update to 2.6.33 level
Bugzilla: 549930
RH-Acked-by: Rik van Riel <riel@redhat.com>

BZ 549930

This updates the nouveau driver to the upstream kernel
version + a bunch of F12 fixes.

Signed-off-by: Dave Airlie <airlied@redhat.com>
Signed-off-by: Aristeu Rozanski <arozansk@redhat.com>

diff --git a/drivers/gpu/drm/i2c/ch7006_drv.c b/drivers/gpu/drm/i2c/ch7006_drv.c
index 9422a74..81681a0 100644
--- a/drivers/gpu/drm/i2c/ch7006_drv.c
+++ b/drivers/gpu/drm/i2c/ch7006_drv.c
@@ -408,6 +408,11 @@ static int ch7006_probe(struct i2c_client *client, const struct i2c_device_id *i
 
 	ch7006_info(client, "Detected version ID: %x\n", val);
 
+	/* I don't know what this is for, but otherwise I get no
+	 * signal.
+	 */
+	ch7006_write(client, 0x3d, 0x0);
+
 	return 0;
 
 fail:
diff --git a/drivers/gpu/drm/i2c/ch7006_mode.c b/drivers/gpu/drm/i2c/ch7006_mode.c
index 87f5445..e447dfb 100644
--- a/drivers/gpu/drm/i2c/ch7006_mode.c
+++ b/drivers/gpu/drm/i2c/ch7006_mode.c
@@ -427,11 +427,6 @@ void ch7006_state_load(struct i2c_client *client,
 	ch7006_load_reg(client, state, CH7006_SUBC_INC7);
 	ch7006_load_reg(client, state, CH7006_PLL_CONTROL);
 	ch7006_load_reg(client, state, CH7006_CALC_SUBC_INC0);
-
-	/* I don't know what this is for, but otherwise I get no
-	 * signal.
-	 */
-	ch7006_write(client, 0x3d, 0x0);
 }
 
 void ch7006_state_save(struct i2c_client *client,
diff --git a/drivers/gpu/drm/nouveau/Makefile b/drivers/gpu/drm/nouveau/Makefile
index e12b4ff..48c290b 100644
--- a/drivers/gpu/drm/nouveau/Makefile
+++ b/drivers/gpu/drm/nouveau/Makefile
@@ -8,18 +8,21 @@ nouveau-y := nouveau_drv.o nouveau_state.o nouveau_channel.o nouveau_mem.o \
              nouveau_sgdma.o nouveau_dma.o \
              nouveau_bo.o nouveau_fence.o nouveau_gem.o nouveau_ttm.o \
              nouveau_hw.o nouveau_calc.o nouveau_bios.o nouveau_i2c.o \
-	     nouveau_display.o nouveau_connector.o nouveau_fbcon.o \
+             nouveau_display.o nouveau_connector.o nouveau_fbcon.o \
+             nouveau_dp.o nouveau_grctx.o \
              nv04_timer.o \
              nv04_mc.o nv40_mc.o nv50_mc.o \
              nv04_fb.o nv10_fb.o nv40_fb.o \
              nv04_fifo.o nv10_fifo.o nv40_fifo.o nv50_fifo.o \
              nv04_graph.o nv10_graph.o nv20_graph.o \
              nv40_graph.o nv50_graph.o \
+             nv40_grctx.o \
              nv04_instmem.o nv50_instmem.o \
              nv50_crtc.o nv50_dac.o nv50_sor.o \
              nv50_cursor.o nv50_display.o nv50_fbcon.o \
              nv04_dac.o nv04_dfp.o nv04_tv.o nv17_tv.o nv17_tv_modes.o \
-             nv04_crtc.o nv04_display.o nv04_cursor.o nv04_fbcon.o
+             nv04_crtc.o nv04_display.o nv04_cursor.o nv04_fbcon.o \
+             nv17_gpio.o
 
 nouveau-$(CONFIG_DRM_NOUVEAU_DEBUG) += nouveau_debugfs.o
 nouveau-$(CONFIG_COMPAT) += nouveau_ioc32.o
diff --git a/drivers/gpu/drm/nouveau/nouveau_acpi.c b/drivers/gpu/drm/nouveau/nouveau_acpi.c
index ec0f2f3..1cf4882 100644
--- a/drivers/gpu/drm/nouveau/nouveau_acpi.c
+++ b/drivers/gpu/drm/nouveau/nouveau_acpi.c
@@ -62,7 +62,7 @@ static int nouveau_dsm(struct drm_device *dev, int func, int arg, int *result)
 
 	err = acpi_evaluate_object(handle, "_DSM", &input, &output);
 	if (err) {
-		NV_ERROR(dev, "failed to evaluate _DSM: %d\n", err);
+		NV_INFO(dev, "failed to evaluate _DSM: %d\n", err);
 		return err;
 	}
 
diff --git a/drivers/gpu/drm/nouveau/nouveau_bios.c b/drivers/gpu/drm/nouveau/nouveau_bios.c
index ba946df..9710e69 100644
--- a/drivers/gpu/drm/nouveau/nouveau_bios.c
+++ b/drivers/gpu/drm/nouveau/nouveau_bios.c
@@ -86,11 +86,12 @@ score_vbios(struct drm_device *dev, const uint8_t *data, const bool writeable)
 
 static void load_vbios_prom(struct drm_device *dev, uint8_t *data)
 {
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	uint32_t pci_nv_20, save_pci_nv_20;
 	int pcir_ptr;
 	int i;
 
-	if (nv_arch(dev) >= NV_50)
+	if (dev_priv->card_type >= NV_50)
 		pci_nv_20 = 0x88050;
 	else
 		pci_nv_20 = NV_PBUS_PCI_NV_20;
@@ -129,10 +130,11 @@ out:
 
 static void load_vbios_pramin(struct drm_device *dev, uint8_t *data)
 {
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	uint32_t old_bar0_pramin = 0;
 	int i;
 
-	if (nv_arch(dev) >= NV_50) {
+	if (dev_priv->card_type >= NV_50) {
 		uint32_t vbios_vram = (nv_rd32(dev, 0x619f04) & ~0xff) << 8;
 
 		if (!vbios_vram)
@@ -151,7 +153,7 @@ static void load_vbios_pramin(struct drm_device *dev, uint8_t *data)
 		data[i] = nv_rd08(dev, NV_PRAMIN_OFFSET + i);
 
 out:
-	if (nv_arch(dev) >= NV_50)
+	if (dev_priv->card_type >= NV_50)
 		nv_wr32(dev, 0x1700, old_bar0_pramin);
 }
 
@@ -179,43 +181,42 @@ struct methods {
 	const char desc[8];
 	void (*loadbios)(struct drm_device *, uint8_t *);
 	const bool rw;
-	int score;
 };
 
 static struct methods nv04_methods[] = {
 	{ "PROM", load_vbios_prom, false },
 	{ "PRAMIN", load_vbios_pramin, true },
 	{ "PCIROM", load_vbios_pci, true },
-	{ }
 };
 
 static struct methods nv50_methods[] = {
 	{ "PRAMIN", load_vbios_pramin, true },
 	{ "PROM", load_vbios_prom, false },
 	{ "PCIROM", load_vbios_pci, true },
-	{ }
 };
 
+#define METHODCNT 3
+
 static bool NVShadowVBIOS(struct drm_device *dev, uint8_t *data)
 {
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
-	struct methods *methods, *method;
+	struct methods *methods;
+	int i;
 	int testscore = 3;
+	int scores[METHODCNT];
 
 	if (nouveau_vbios) {
-		method = nv04_methods;
-		while (method->loadbios) {
-			if (!strcasecmp(nouveau_vbios, method->desc))
+		methods = nv04_methods;
+		for (i = 0; i < METHODCNT; i++)
+			if (!strcasecmp(nouveau_vbios, methods[i].desc))
 				break;
-			method++;
-		}
 
-		if (method->loadbios) {
+		if (i < METHODCNT) {
 			NV_INFO(dev, "Attempting to use BIOS image from %s\n",
-				method->desc);
+				methods[i].desc);
 
-			method->loadbios(dev, data);
-			if (score_vbios(dev, data, method->rw))
+			methods[i].loadbios(dev, data);
+			if (score_vbios(dev, data, methods[i].rw))
 				return true;
 		}
 
@@ -227,28 +228,24 @@ static bool NVShadowVBIOS(struct drm_device *dev, uint8_t *data)
 	else
 		methods = nv50_methods;
 
-	method = methods;
-	while (method->loadbios) {
+	for (i = 0; i < METHODCNT; i++) {
 		NV_TRACE(dev, "Attempting to load BIOS image from %s\n",
-			 method->desc);
+			 methods[i].desc);
 		data[0] = data[1] = 0;	/* avoid reuse of previous image */
-		method->loadbios(dev, data);
-		method->score = score_vbios(dev, data, method->rw);
-		if (method->score == testscore)
+		methods[i].loadbios(dev, data);
+		scores[i] = score_vbios(dev, data, methods[i].rw);
+		if (scores[i] == testscore)
 			return true;
-		method++;
 	}
 
 	while (--testscore > 0) {
-		method = methods;
-		while (method->loadbios) {
-			if (method->score == testscore) {
+		for (i = 0; i < METHODCNT; i++) {
+			if (scores[i] == testscore) {
 				NV_TRACE(dev, "Using BIOS image from %s\n",
-					 method->desc);
-				method->loadbios(dev, data);
+					 methods[i].desc);
+				methods[i].loadbios(dev, data);
 				return true;
 			}
-			method++;
 		}
 	}
 
@@ -259,10 +256,7 @@ static bool NVShadowVBIOS(struct drm_device *dev, uint8_t *data)
 struct init_tbl_entry {
 	char *name;
 	uint8_t id;
-	int length;
-	int length_offset;
-	int length_multiplier;
-	bool (*handler)(struct nvbios *, uint16_t, struct init_exec *);
+	int (*handler)(struct nvbios *, uint16_t, struct init_exec *);
 };
 
 struct bit_entry {
@@ -291,18 +285,21 @@ static void still_alive(void)
 static uint32_t
 munge_reg(struct nvbios *bios, uint32_t reg)
 {
-	if (nv_arch(bios->dev) < NV_50)
-		return reg;
+	struct drm_nouveau_private *dev_priv = bios->dev->dev_private;
+	struct dcb_entry *dcbent = bios->display.output;
 
-	if (!(reg & 0x40000000))
+	if (dev_priv->card_type < NV_50)
 		return reg;
 
-	BUG_ON(!bios->display.output);
+	if (reg & 0x40000000) {
+		BUG_ON(!dcbent);
 
-	if (reg & 0x40000000)
-		reg += (ffs(bios->display.output->or) - 1) * 0x800;
+		reg += (ffs(dcbent->or) - 1) * 0x800;
+		if ((reg & 0x20000000) && !(dcbent->sorconf.link & 1))
+			reg += 0x00000080;
+	}
 
-	reg &= ~0x40000000;
+	reg &= ~0x60000000;
 	return reg;
 }
 
@@ -774,7 +771,7 @@ static uint32_t get_tmds_index_reg(struct drm_device *dev, uint8_t mlv)
 	}
 }
 
-static bool
+static int
 init_io_restrict_prog(struct nvbios *bios, uint16_t offset,
 		      struct init_exec *iexec)
 {
@@ -806,9 +803,10 @@ init_io_restrict_prog(struct nvbios *bios, uint16_t offset,
 	uint32_t reg = ROM32(bios->data[offset + 7]);
 	uint8_t config;
 	uint32_t configval;
+	int len = 11 + count * 4;
 
 	if (!iexec->execute)
-		return true;
+		return len;
 
 	BIOSLOG(bios, "0x%04X: Port: 0x%04X, Index: 0x%02X, Mask: 0x%02X, "
 		      "Shift: 0x%02X, Count: 0x%02X, Reg: 0x%08X\n",
@@ -819,7 +817,7 @@ init_io_restrict_prog(struct nvbios *bios, uint16_t offset,
 		NV_ERROR(bios->dev,
 			 "0x%04X: Config 0x%02X exceeds maximal bound 0x%02X\n",
 			 offset, config, count);
-		return false;
+		return 0;
 	}
 
 	configval = ROM32(bios->data[offset + 11 + config * 4]);
@@ -828,10 +826,10 @@ init_io_restrict_prog(struct nvbios *bios, uint16_t offset,
 
 	bios_wr32(bios, reg, configval);
 
-	return true;
+	return len;
 }
 
-static bool
+static int
 init_repeat(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -866,10 +864,10 @@ init_repeat(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 
 	iexec->repeat = false;
 
-	return true;
+	return 2;
 }
 
-static bool
+static int
 init_io_restrict_pll(struct nvbios *bios, uint16_t offset,
 		     struct init_exec *iexec)
 {
@@ -905,9 +903,10 @@ init_io_restrict_pll(struct nvbios *bios, uint16_t offset,
 	uint32_t reg = ROM32(bios->data[offset + 8]);
 	uint8_t config;
 	uint16_t freq;
+	int len = 12 + count * 2;
 
 	if (!iexec->execute)
-		return true;
+		return len;
 
 	BIOSLOG(bios, "0x%04X: Port: 0x%04X, Index: 0x%02X, Mask: 0x%02X, "
 		      "Shift: 0x%02X, IO Flag Condition: 0x%02X, "
@@ -920,7 +919,7 @@ init_io_restrict_pll(struct nvbios *bios, uint16_t offset,
 		NV_ERROR(bios->dev,
 			 "0x%04X: Config 0x%02X exceeds maximal bound 0x%02X\n",
 			 offset, config, count);
-		return false;
+		return 0;
 	}
 
 	freq = ROM16(bios->data[offset + 12 + config * 2]);
@@ -940,10 +939,10 @@ init_io_restrict_pll(struct nvbios *bios, uint16_t offset,
 
 	setPLL(bios, reg, freq * 10);
 
-	return true;
+	return len;
 }
 
-static bool
+static int
 init_end_repeat(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -961,12 +960,12 @@ init_end_repeat(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	 * we're not in repeat mode
 	 */
 	if (iexec->repeat)
-		return false;
+		return 0;
 
-	return true;
+	return 1;
 }
 
-static bool
+static int
 init_copy(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -995,7 +994,7 @@ init_copy(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint8_t crtcdata;
 
 	if (!iexec->execute)
-		return true;
+		return 11;
 
 	BIOSLOG(bios, "0x%04X: Reg: 0x%08X, Shift: 0x%02X, SrcMask: 0x%02X, "
 		      "Port: 0x%04X, Index: 0x%02X, Mask: 0x%02X\n",
@@ -1014,10 +1013,10 @@ init_copy(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	crtcdata |= (uint8_t)data;
 	bios_idxprt_wr(bios, crtcport, crtcindex, crtcdata);
 
-	return true;
+	return 11;
 }
 
-static bool
+static int
 init_not(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -1033,10 +1032,10 @@ init_not(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 		BIOSLOG(bios, "0x%04X: ------ Executing following commands ------\n", offset);
 
 	iexec->execute = !iexec->execute;
-	return true;
+	return 1;
 }
 
-static bool
+static int
 init_io_flag_condition(struct nvbios *bios, uint16_t offset,
 		       struct init_exec *iexec)
 {
@@ -1054,7 +1053,7 @@ init_io_flag_condition(struct nvbios *bios, uint16_t offset,
 	uint8_t cond = bios->data[offset + 1];
 
 	if (!iexec->execute)
-		return true;
+		return 2;
 
 	if (io_flag_condition_met(bios, offset, cond))
 		BIOSLOG(bios, "0x%04X: Condition fulfilled -- continuing to execute\n", offset);
@@ -1063,10 +1062,10 @@ init_io_flag_condition(struct nvbios *bios, uint16_t offset,
 		iexec->execute = false;
 	}
 
-	return true;
+	return 2;
 }
 
-static bool
+static int
 init_idx_addr_latched(struct nvbios *bios, uint16_t offset,
 		      struct init_exec *iexec)
 {
@@ -1094,11 +1093,12 @@ init_idx_addr_latched(struct nvbios *bios, uint16_t offset,
 	uint32_t mask = ROM32(bios->data[offset + 9]);
 	uint32_t data = ROM32(bios->data[offset + 13]);
 	uint8_t count = bios->data[offset + 17];
+	int len = 18 + count * 2;
 	uint32_t value;
 	int i;
 
 	if (!iexec->execute)
-		return true;
+		return len;
 
 	BIOSLOG(bios, "0x%04X: ControlReg: 0x%08X, DataReg: 0x%08X, "
 		      "Mask: 0x%08X, Data: 0x%08X, Count: 0x%02X\n",
@@ -1118,10 +1118,10 @@ init_idx_addr_latched(struct nvbios *bios, uint16_t offset,
 		bios_wr32(bios, controlreg, value);
 	}
 
-	return true;
+	return len;
 }
 
-static bool
+static int
 init_io_restrict_pll2(struct nvbios *bios, uint16_t offset,
 		      struct init_exec *iexec)
 {
@@ -1150,25 +1150,26 @@ init_io_restrict_pll2(struct nvbios *bios, uint16_t offset,
 	uint8_t shift = bios->data[offset + 5];
 	uint8_t count = bios->data[offset + 6];
 	uint32_t reg = ROM32(bios->data[offset + 7]);
+	int len = 11 + count * 4;
 	uint8_t config;
 	uint32_t freq;
 
 	if (!iexec->execute)
-		return true;
+		return len;
 
 	BIOSLOG(bios, "0x%04X: Port: 0x%04X, Index: 0x%02X, Mask: 0x%02X, "
 		      "Shift: 0x%02X, Count: 0x%02X, Reg: 0x%08X\n",
 		offset, crtcport, crtcindex, mask, shift, count, reg);
 
 	if (!reg)
-		return true;
+		return len;
 
 	config = (bios_idxprt_rd(bios, crtcport, crtcindex) & mask) >> shift;
 	if (config > count) {
 		NV_ERROR(bios->dev,
 			 "0x%04X: Config 0x%02X exceeds maximal bound 0x%02X\n",
 			 offset, config, count);
-		return false;
+		return 0;
 	}
 
 	freq = ROM32(bios->data[offset + 11 + config * 4]);
@@ -1178,10 +1179,10 @@ init_io_restrict_pll2(struct nvbios *bios, uint16_t offset,
 
 	setPLL(bios, reg, freq);
 
-	return true;
+	return len;
 }
 
-static bool
+static int
 init_pll2(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -1198,16 +1199,16 @@ init_pll2(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint32_t freq = ROM32(bios->data[offset + 5]);
 
 	if (!iexec->execute)
-		return true;
+		return 9;
 
 	BIOSLOG(bios, "0x%04X: Reg: 0x%04X, Freq: %dkHz\n",
 		offset, reg, freq);
 
 	setPLL(bios, reg, freq);
-	return true;
+	return 9;
 }
 
-static bool
+static int
 init_i2c_byte(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -1231,12 +1232,13 @@ init_i2c_byte(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint8_t i2c_index = bios->data[offset + 1];
 	uint8_t i2c_address = bios->data[offset + 2];
 	uint8_t count = bios->data[offset + 3];
+	int len = 4 + count * 3;
 	struct nouveau_i2c_chan *chan;
 	struct i2c_msg msg;
 	int i;
 
 	if (!iexec->execute)
-		return true;
+		return len;
 
 	BIOSLOG(bios, "0x%04X: DCBI2CIndex: 0x%02X, I2CAddress: 0x%02X, "
 		      "Count: 0x%02X\n",
@@ -1244,7 +1246,7 @@ init_i2c_byte(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 
 	chan = init_i2c_device_find(bios->dev, i2c_index);
 	if (!chan)
-		return false;
+		return 0;
 
 	for (i = 0; i < count; i++) {
 		uint8_t i2c_reg = bios->data[offset + 4 + i * 3];
@@ -1257,7 +1259,7 @@ init_i2c_byte(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 		msg.len = 1;
 		msg.buf = &value;
 		if (i2c_transfer(&chan->adapter, &msg, 1) != 1)
-			return false;
+			return 0;
 
 		BIOSLOG(bios, "0x%04X: I2CReg: 0x%02X, Value: 0x%02X, "
 			      "Mask: 0x%02X, Data: 0x%02X\n",
@@ -1271,14 +1273,14 @@ init_i2c_byte(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 			msg.len = 1;
 			msg.buf = &value;
 			if (i2c_transfer(&chan->adapter, &msg, 1) != 1)
-				return false;
+				return 0;
 		}
 	}
 
-	return true;
+	return len;
 }
 
-static bool
+static int
 init_zm_i2c_byte(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -1300,12 +1302,13 @@ init_zm_i2c_byte(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint8_t i2c_index = bios->data[offset + 1];
 	uint8_t i2c_address = bios->data[offset + 2];
 	uint8_t count = bios->data[offset + 3];
+	int len = 4 + count * 2;
 	struct nouveau_i2c_chan *chan;
 	struct i2c_msg msg;
 	int i;
 
 	if (!iexec->execute)
-		return true;
+		return len;
 
 	BIOSLOG(bios, "0x%04X: DCBI2CIndex: 0x%02X, I2CAddress: 0x%02X, "
 		      "Count: 0x%02X\n",
@@ -1313,7 +1316,7 @@ init_zm_i2c_byte(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 
 	chan = init_i2c_device_find(bios->dev, i2c_index);
 	if (!chan)
-		return false;
+		return 0;
 
 	for (i = 0; i < count; i++) {
 		uint8_t i2c_reg = bios->data[offset + 4 + i * 2];
@@ -1328,14 +1331,14 @@ init_zm_i2c_byte(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 			msg.len = 1;
 			msg.buf = &data;
 			if (i2c_transfer(&chan->adapter, &msg, 1) != 1)
-				return false;
+				return 0;
 		}
 	}
 
-	return true;
+	return len;
 }
 
-static bool
+static int
 init_zm_i2c(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -1355,13 +1358,14 @@ init_zm_i2c(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint8_t i2c_index = bios->data[offset + 1];
 	uint8_t i2c_address = bios->data[offset + 2];
 	uint8_t count = bios->data[offset + 3];
+	int len = 4 + count;
 	struct nouveau_i2c_chan *chan;
 	struct i2c_msg msg;
 	uint8_t data[256];
 	int i;
 
 	if (!iexec->execute)
-		return true;
+		return len;
 
 	BIOSLOG(bios, "0x%04X: DCBI2CIndex: 0x%02X, I2CAddress: 0x%02X, "
 		      "Count: 0x%02X\n",
@@ -1369,7 +1373,7 @@ init_zm_i2c(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 
 	chan = init_i2c_device_find(bios->dev, i2c_index);
 	if (!chan)
-		return false;
+		return 0;
 
 	for (i = 0; i < count; i++) {
 		data[i] = bios->data[offset + 4 + i];
@@ -1383,13 +1387,13 @@ init_zm_i2c(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 		msg.len = count;
 		msg.buf = data;
 		if (i2c_transfer(&chan->adapter, &msg, 1) != 1)
-			return false;
+			return 0;
 	}
 
-	return true;
+	return len;
 }
 
-static bool
+static int
 init_tmds(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -1414,7 +1418,7 @@ init_tmds(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint32_t reg, value;
 
 	if (!iexec->execute)
-		return true;
+		return 5;
 
 	BIOSLOG(bios, "0x%04X: MagicLookupValue: 0x%02X, TMDSAddr: 0x%02X, "
 		      "Mask: 0x%02X, Data: 0x%02X\n",
@@ -1422,7 +1426,7 @@ init_tmds(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 
 	reg = get_tmds_index_reg(bios->dev, mlv);
 	if (!reg)
-		return false;
+		return 0;
 
 	bios_wr32(bios, reg,
 		  tmdsaddr | NV_PRAMDAC_FP_TMDS_CONTROL_WRITE_DISABLE);
@@ -1430,10 +1434,10 @@ init_tmds(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	bios_wr32(bios, reg + 4, value);
 	bios_wr32(bios, reg, tmdsaddr);
 
-	return true;
+	return 5;
 }
 
-static bool
+static int
 init_zm_tmds_group(struct nvbios *bios, uint16_t offset,
 		   struct init_exec *iexec)
 {
@@ -1454,18 +1458,19 @@ init_zm_tmds_group(struct nvbios *bios, uint16_t offset,
 
 	uint8_t mlv = bios->data[offset + 1];
 	uint8_t count = bios->data[offset + 2];
+	int len = 3 + count * 2;
 	uint32_t reg;
 	int i;
 
 	if (!iexec->execute)
-		return true;
+		return len;
 
 	BIOSLOG(bios, "0x%04X: MagicLookupValue: 0x%02X, Count: 0x%02X\n",
 		offset, mlv, count);
 
 	reg = get_tmds_index_reg(bios->dev, mlv);
 	if (!reg)
-		return false;
+		return 0;
 
 	for (i = 0; i < count; i++) {
 		uint8_t tmdsaddr = bios->data[offset + 3 + i * 2];
@@ -1475,10 +1480,10 @@ init_zm_tmds_group(struct nvbios *bios, uint16_t offset,
 		bios_wr32(bios, reg, tmdsaddr);
 	}
 
-	return true;
+	return len;
 }
 
-static bool
+static int
 init_cr_idx_adr_latch(struct nvbios *bios, uint16_t offset,
 		      struct init_exec *iexec)
 {
@@ -1501,11 +1506,12 @@ init_cr_idx_adr_latch(struct nvbios *bios, uint16_t offset,
 	uint8_t crtcindex2 = bios->data[offset + 2];
 	uint8_t baseaddr = bios->data[offset + 3];
 	uint8_t count = bios->data[offset + 4];
+	int len = 5 + count;
 	uint8_t oldaddr, data;
 	int i;
 
 	if (!iexec->execute)
-		return true;
+		return len;
 
 	BIOSLOG(bios, "0x%04X: Index1: 0x%02X, Index2: 0x%02X, "
 		      "BaseAddr: 0x%02X, Count: 0x%02X\n",
@@ -1522,10 +1528,10 @@ init_cr_idx_adr_latch(struct nvbios *bios, uint16_t offset,
 
 	bios_idxprt_wr(bios, NV_CIO_CRX__COLOR, crtcindex1, oldaddr);
 
-	return true;
+	return len;
 }
 
-static bool
+static int
 init_cr(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -1546,7 +1552,7 @@ init_cr(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint8_t value;
 
 	if (!iexec->execute)
-		return true;
+		return 4;
 
 	BIOSLOG(bios, "0x%04X: Index: 0x%02X, Mask: 0x%02X, Data: 0x%02X\n",
 		offset, crtcindex, mask, data);
@@ -1555,10 +1561,10 @@ init_cr(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	value |= data;
 	bios_idxprt_wr(bios, NV_CIO_CRX__COLOR, crtcindex, value);
 
-	return true;
+	return 4;
 }
 
-static bool
+static int
 init_zm_cr(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -1575,14 +1581,14 @@ init_zm_cr(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint8_t data = bios->data[offset + 2];
 
 	if (!iexec->execute)
-		return true;
+		return 3;
 
 	bios_idxprt_wr(bios, NV_CIO_CRX__COLOR, crtcindex, data);
 
-	return true;
+	return 3;
 }
 
-static bool
+static int
 init_zm_cr_group(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -1599,18 +1605,19 @@ init_zm_cr_group(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	 */
 
 	uint8_t count = bios->data[offset + 1];
+	int len = 2 + count * 2;
 	int i;
 
 	if (!iexec->execute)
-		return true;
+		return len;
 
 	for (i = 0; i < count; i++)
 		init_zm_cr(bios, offset + 2 + 2 * i - 1, iexec);
 
-	return true;
+	return len;
 }
 
-static bool
+static int
 init_condition_time(struct nvbios *bios, uint16_t offset,
 		    struct init_exec *iexec)
 {
@@ -1634,7 +1641,7 @@ init_condition_time(struct nvbios *bios, uint16_t offset,
 	unsigned cnt;
 
 	if (!iexec->execute)
-		return true;
+		return 3;
 
 	if (retries > 100)
 		retries = 100;
@@ -1665,10 +1672,10 @@ init_condition_time(struct nvbios *bios, uint16_t offset,
 		iexec->execute = false;
 	}
 
-	return true;
+	return 3;
 }
 
-static bool
+static int
 init_zm_reg_sequence(struct nvbios *bios, uint16_t offset,
 		     struct init_exec *iexec)
 {
@@ -1688,10 +1695,11 @@ init_zm_reg_sequence(struct nvbios *bios, uint16_t offset,
 
 	uint32_t basereg = ROM32(bios->data[offset + 1]);
 	uint32_t count = bios->data[offset + 5];
+	int len = 6 + count * 4;
 	int i;
 
 	if (!iexec->execute)
-		return true;
+		return len;
 
 	BIOSLOG(bios, "0x%04X: BaseReg: 0x%08X, Count: 0x%02X\n",
 		offset, basereg, count);
@@ -1703,10 +1711,10 @@ init_zm_reg_sequence(struct nvbios *bios, uint16_t offset,
 		bios_wr32(bios, reg, data);
 	}
 
-	return true;
+	return len;
 }
 
-static bool
+static int
 init_sub_direct(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -1722,7 +1730,7 @@ init_sub_direct(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint16_t sub_offset = ROM16(bios->data[offset + 1]);
 
 	if (!iexec->execute)
-		return true;
+		return 3;
 
 	BIOSLOG(bios, "0x%04X: Executing subroutine at 0x%04X\n",
 		offset, sub_offset);
@@ -1731,10 +1739,10 @@ init_sub_direct(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 
 	BIOSLOG(bios, "0x%04X: End of 0x%04X subroutine\n", offset, sub_offset);
 
-	return true;
+	return 3;
 }
 
-static bool
+static int
 init_copy_nv_reg(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -1762,7 +1770,7 @@ init_copy_nv_reg(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint32_t srcvalue, dstvalue;
 
 	if (!iexec->execute)
-		return true;
+		return 22;
 
 	BIOSLOG(bios, "0x%04X: SrcReg: 0x%08X, Shift: 0x%02X, SrcMask: 0x%08X, "
 		      "Xor: 0x%08X, DstReg: 0x%08X, DstMask: 0x%08X\n",
@@ -1781,10 +1789,10 @@ init_copy_nv_reg(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 
 	bios_wr32(bios, dstreg, dstvalue | srcvalue);
 
-	return true;
+	return 22;
 }
 
-static bool
+static int
 init_zm_index_io(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -1802,14 +1810,14 @@ init_zm_index_io(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint8_t data = bios->data[offset + 4];
 
 	if (!iexec->execute)
-		return true;
+		return 5;
 
 	bios_idxprt_wr(bios, crtcport, crtcindex, data);
 
-	return true;
+	return 5;
 }
 
-static bool
+static int
 init_compute_mem(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -1858,7 +1866,7 @@ init_compute_mem(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	struct drm_nouveau_private *dev_priv = bios->dev->dev_private;
 
 	if (dev_priv->card_type >= NV_50)
-		return true;
+		return 1;
 
 	/*
 	 * On every card I've seen, this step gets done for us earlier in
@@ -1876,10 +1884,10 @@ init_compute_mem(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	/* write back the saved configuration value */
 	bios_wr32(bios, NV_PFB_CFG0, bios->state.saved_nv_pfb_cfg0);
 
-	return true;
+	return 1;
 }
 
-static bool
+static int
 init_reset(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -1913,10 +1921,10 @@ init_reset(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	pci_nv_20 &= ~NV_PBUS_PCI_NV_20_ROM_SHADOW_ENABLED;	/* 0xfffffffe */
 	bios_wr32(bios, NV_PBUS_PCI_NV_20, pci_nv_20);
 
-	return true;
+	return 13;
 }
 
-static bool
+static int
 init_configure_mem(struct nvbios *bios, uint16_t offset,
 		   struct init_exec *iexec)
 {
@@ -1937,7 +1945,7 @@ init_configure_mem(struct nvbios *bios, uint16_t offset,
 	uint32_t reg, data;
 
 	if (bios->major_version > 2)
-		return false;
+		return 0;
 
 	bios_idxprt_wr(bios, NV_VIO_SRX, NV_VIO_SR_CLOCK_INDEX, bios_idxprt_rd(
 		       bios, NV_VIO_SRX, NV_VIO_SR_CLOCK_INDEX) | 0x20);
@@ -1969,10 +1977,10 @@ init_configure_mem(struct nvbios *bios, uint16_t offset,
 		bios_wr32(bios, reg, data);
 	}
 
-	return true;
+	return 1;
 }
 
-static bool
+static int
 init_configure_clk(struct nvbios *bios, uint16_t offset,
 		   struct init_exec *iexec)
 {
@@ -1992,7 +2000,7 @@ init_configure_clk(struct nvbios *bios, uint16_t offset,
 	int clock;
 
 	if (bios->major_version > 2)
-		return false;
+		return 0;
 
 	clock = ROM16(bios->data[meminitoffs + 4]) * 10;
 	setPLL(bios, NV_PRAMDAC_NVPLL_COEFF, clock);
@@ -2002,10 +2010,10 @@ init_configure_clk(struct nvbios *bios, uint16_t offset,
 		clock *= 2;
 	setPLL(bios, NV_PRAMDAC_MPLL_COEFF, clock);
 
-	return true;
+	return 1;
 }
 
-static bool
+static int
 init_configure_preinit(struct nvbios *bios, uint16_t offset,
 		       struct init_exec *iexec)
 {
@@ -2025,15 +2033,15 @@ init_configure_preinit(struct nvbios *bios, uint16_t offset,
 	uint8_t cr3c = ((straps << 2) & 0xf0) | (straps & (1 << 6));
 
 	if (bios->major_version > 2)
-		return false;
+		return 0;
 
 	bios_idxprt_wr(bios, NV_CIO_CRX__COLOR,
 			     NV_CIO_CRE_SCRATCH4__INDEX, cr3c);
 
-	return true;
+	return 1;
 }
 
-static bool
+static int
 init_io(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -2053,7 +2061,7 @@ init_io(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint8_t data = bios->data[offset + 4];
 
 	if (!iexec->execute)
-		return true;
+		return 5;
 
 	BIOSLOG(bios, "0x%04X: Port: 0x%04X, Mask: 0x%02X, Data: 0x%02X\n",
 		offset, crtcport, mask, data);
@@ -2112,15 +2120,15 @@ init_io(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 		for (i = 0; i < 2; i++)
 			bios_wr32(bios, 0x614108 + (i*0x800), bios_rd32(
 				  bios, 0x614108 + (i*0x800)) & 0x0fffffff);
-		return true;
+		return 5;
 	}
 
 	bios_port_wr(bios, crtcport, (bios_port_rd(bios, crtcport) & mask) |
 									data);
-	return true;
+	return 5;
 }
 
-static bool
+static int
 init_sub(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -2135,7 +2143,7 @@ init_sub(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint8_t sub = bios->data[offset + 1];
 
 	if (!iexec->execute)
-		return true;
+		return 2;
 
 	BIOSLOG(bios, "0x%04X: Calling script %d\n", offset, sub);
 
@@ -2145,10 +2153,10 @@ init_sub(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 
 	BIOSLOG(bios, "0x%04X: End of script %d\n", offset, sub);
 
-	return true;
+	return 2;
 }
 
-static bool
+static int
 init_ram_condition(struct nvbios *bios, uint16_t offset,
 		   struct init_exec *iexec)
 {
@@ -2169,7 +2177,7 @@ init_ram_condition(struct nvbios *bios, uint16_t offset,
 	uint8_t data;
 
 	if (!iexec->execute)
-		return true;
+		return 3;
 
 	data = bios_rd32(bios, NV_PFB_BOOT_0) & mask;
 
@@ -2183,10 +2191,10 @@ init_ram_condition(struct nvbios *bios, uint16_t offset,
 		iexec->execute = false;
 	}
 
-	return true;
+	return 3;
 }
 
-static bool
+static int
 init_nv_reg(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -2205,17 +2213,17 @@ init_nv_reg(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint32_t data = ROM32(bios->data[offset + 9]);
 
 	if (!iexec->execute)
-		return true;
+		return 13;
 
 	BIOSLOG(bios, "0x%04X: Reg: 0x%08X, Mask: 0x%08X, Data: 0x%08X\n",
 		offset, reg, mask, data);
 
 	bios_wr32(bios, reg, (bios_rd32(bios, reg) & mask) | data);
 
-	return true;
+	return 13;
 }
 
-static bool
+static int
 init_macro(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -2239,7 +2247,7 @@ init_macro(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	int i;
 
 	if (!iexec->execute)
-		return true;
+		return 2;
 
 	BIOSLOG(bios, "0x%04X: Macro: 0x%02X, MacroTableIndex: 0x%02X, "
 		      "Count: 0x%02X\n",
@@ -2254,10 +2262,10 @@ init_macro(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 		bios_wr32(bios, reg, data);
 	}
 
-	return true;
+	return 2;
 }
 
-static bool
+static int
 init_done(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -2269,10 +2277,10 @@ init_done(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	 */
 
 	/* mild retval abuse to stop parsing this table */
-	return false;
+	return 0;
 }
 
-static bool
+static int
 init_resume(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -2284,15 +2292,15 @@ init_resume(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	 */
 
 	if (iexec->execute)
-		return true;
+		return 1;
 
 	iexec->execute = true;
 	BIOSLOG(bios, "0x%04X: ---- Executing following commands ----\n", offset);
 
-	return true;
+	return 1;
 }
 
-static bool
+static int
 init_time(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -2307,7 +2315,7 @@ init_time(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	unsigned time = ROM16(bios->data[offset + 1]);
 
 	if (!iexec->execute)
-		return true;
+		return 3;
 
 	BIOSLOG(bios, "0x%04X: Sleeping for 0x%04X microseconds\n",
 		offset, time);
@@ -2317,10 +2325,10 @@ init_time(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	else
 		msleep((time + 900) / 1000);
 
-	return true;
+	return 3;
 }
 
-static bool
+static int
 init_condition(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -2337,7 +2345,7 @@ init_condition(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint8_t cond = bios->data[offset + 1];
 
 	if (!iexec->execute)
-		return true;
+		return 2;
 
 	BIOSLOG(bios, "0x%04X: Condition: 0x%02X\n", offset, cond);
 
@@ -2348,10 +2356,10 @@ init_condition(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 		iexec->execute = false;
 	}
 
-	return true;
+	return 2;
 }
 
-static bool
+static int
 init_io_condition(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -2368,7 +2376,7 @@ init_io_condition(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint8_t cond = bios->data[offset + 1];
 
 	if (!iexec->execute)
-		return true;
+		return 2;
 
 	BIOSLOG(bios, "0x%04X: IO condition: 0x%02X\n", offset, cond);
 
@@ -2379,10 +2387,10 @@ init_io_condition(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 		iexec->execute = false;
 	}
 
-	return true;
+	return 2;
 }
 
-static bool
+static int
 init_index_io(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -2405,7 +2413,7 @@ init_index_io(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint8_t value;
 
 	if (!iexec->execute)
-		return true;
+		return 6;
 
 	BIOSLOG(bios, "0x%04X: Port: 0x%04X, Index: 0x%02X, Mask: 0x%02X, "
 		      "Data: 0x%02X\n",
@@ -2414,10 +2422,10 @@ init_index_io(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	value = (bios_idxprt_rd(bios, crtcport, crtcindex) & mask) | data;
 	bios_idxprt_wr(bios, crtcport, crtcindex, value);
 
-	return true;
+	return 6;
 }
 
-static bool
+static int
 init_pll(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -2435,16 +2443,16 @@ init_pll(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint16_t freq = ROM16(bios->data[offset + 5]);
 
 	if (!iexec->execute)
-		return true;
+		return 7;
 
 	BIOSLOG(bios, "0x%04X: Reg: 0x%08X, Freq: %d0kHz\n", offset, reg, freq);
 
 	setPLL(bios, reg, freq * 10);
 
-	return true;
+	return 7;
 }
 
-static bool
+static int
 init_zm_reg(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -2461,17 +2469,17 @@ init_zm_reg(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint32_t value = ROM32(bios->data[offset + 5]);
 
 	if (!iexec->execute)
-		return true;
+		return 9;
 
 	if (reg == 0x000200)
 		value |= 1;
 
 	bios_wr32(bios, reg, value);
 
-	return true;
+	return 9;
 }
 
-static bool
+static int
 init_ram_restrict_pll(struct nvbios *bios, uint16_t offset,
 		      struct init_exec *iexec)
 {
@@ -2497,14 +2505,15 @@ init_ram_restrict_pll(struct nvbios *bios, uint16_t offset,
 	uint8_t type = bios->data[offset + 1];
 	uint32_t freq = ROM32(bios->data[offset + 2 + (index * 4)]);
 	uint8_t *pll_limits = &bios->data[bios->pll_limit_tbl_ptr], *entry;
+	int len = 2 + bios->ram_restrict_group_count * 4;
 	int i;
 
 	if (!iexec->execute)
-		return true;
+		return len;
 
 	if (!bios->pll_limit_tbl_ptr || (pll_limits[0] & 0xf0) != 0x30) {
 		NV_ERROR(dev, "PLL limits table not version 3.x\n");
-		return true; /* deliberate, allow default clocks to remain */
+		return len; /* deliberate, allow default clocks to remain */
 	}
 
 	entry = pll_limits + pll_limits[1];
@@ -2517,15 +2526,41 @@ init_ram_restrict_pll(struct nvbios *bios, uint16_t offset,
 				offset, type, reg, freq);
 
 			setPLL(bios, reg, freq);
-			return true;
+			return len;
 		}
 	}
 
 	NV_ERROR(dev, "PLL type 0x%02x not found in PLL limits table", type);
-	return true;
+	return len;
 }
 
-static bool
+static int
+init_8c(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
+{
+	/*
+	 * INIT_8C   opcode: 0x8C ('')
+	 *
+	 * NOP so far....
+	 *
+	 */
+
+	return 1;
+}
+
+static int
+init_8d(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
+{
+	/*
+	 * INIT_8D   opcode: 0x8D ('')
+	 *
+	 * NOP so far....
+	 *
+	 */
+
+	return 1;
+}
+
+static int
 init_gpio(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -2539,18 +2574,21 @@ init_gpio(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 
 	const uint32_t nv50_gpio_reg[4] = { 0xe104, 0xe108, 0xe280, 0xe284 };
 	const uint32_t nv50_gpio_ctl[2] = { 0xe100, 0xe28c };
-	const uint8_t *gpio_table = &bios->data[bios->bdcb.init8e_table_ptr];
+	const uint8_t *gpio_table = &bios->data[bios->bdcb.gpio_table_ptr];
 	const uint8_t *gpio_entry;
 	int i;
 
+	if (!iexec->execute)
+		return 1;
+
 	if (bios->bdcb.version != 0x40) {
 		NV_ERROR(bios->dev, "DCB table not version 4.0\n");
-		return false;
+		return 0;
 	}
 
-	if (!bios->bdcb.init8e_table_ptr) {
+	if (!bios->bdcb.gpio_table_ptr) {
 		NV_WARN(bios->dev, "Invalid pointer to INIT_8E table\n");
-		return false;
+		return 0;
 	}
 
 	gpio_entry = gpio_table + gpio_table[1];
@@ -2588,13 +2626,10 @@ init_gpio(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 		bios_wr32(bios, r, v);
 	}
 
-	return true;
+	return 1;
 }
 
-/* hack to avoid moving the itbl_entry array before this function */
-int init_ram_restrict_zm_reg_group_blocklen;
-
-static bool
+static int
 init_ram_restrict_zm_reg_group(struct nvbios *bios, uint16_t offset,
 			       struct init_exec *iexec)
 {
@@ -2620,21 +2655,21 @@ init_ram_restrict_zm_reg_group(struct nvbios *bios, uint16_t offset,
 	uint8_t regincrement = bios->data[offset + 5];
 	uint8_t count = bios->data[offset + 6];
 	uint32_t strap_ramcfg, data;
-	uint16_t blocklen;
+	/* previously set by 'M' BIT table */
+	uint16_t blocklen = bios->ram_restrict_group_count * 4;
+	int len = 7 + count * blocklen;
 	uint8_t index;
 	int i;
 
-	/* previously set by 'M' BIT table */
-	blocklen = init_ram_restrict_zm_reg_group_blocklen;
 
 	if (!iexec->execute)
-		return true;
+		return len;
 
 	if (!blocklen) {
 		NV_ERROR(bios->dev,
 			 "0x%04X: Zero block length - has the M table "
 			 "been parsed?\n", offset);
-		return false;
+		return 0;
 	}
 
 	strap_ramcfg = (bios_rd32(bios, NV_PEXTDEV_BOOT_0) >> 2) & 0xf;
@@ -2652,10 +2687,10 @@ init_ram_restrict_zm_reg_group(struct nvbios *bios, uint16_t offset,
 		reg += regincrement;
 	}
 
-	return true;
+	return len;
 }
 
-static bool
+static int
 init_copy_zm_reg(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -2672,14 +2707,14 @@ init_copy_zm_reg(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	uint32_t dstreg = ROM32(bios->data[offset + 5]);
 
 	if (!iexec->execute)
-		return true;
+		return 9;
 
 	bios_wr32(bios, dstreg, bios_rd32(bios, srcreg));
 
-	return true;
+	return 9;
 }
 
-static bool
+static int
 init_zm_reg_group_addr_latched(struct nvbios *bios, uint16_t offset,
 			       struct init_exec *iexec)
 {
@@ -2697,20 +2732,21 @@ init_zm_reg_group_addr_latched(struct nvbios *bios, uint16_t offset,
 
 	uint32_t reg = ROM32(bios->data[offset + 1]);
 	uint8_t count = bios->data[offset + 5];
+	int len = 6 + count * 4;
 	int i;
 
 	if (!iexec->execute)
-		return true;
+		return len;
 
 	for (i = 0; i < count; i++) {
 		uint32_t data = ROM32(bios->data[offset + 6 + 4 * i]);
 		bios_wr32(bios, reg, data);
 	}
 
-	return true;
+	return len;
 }
 
-static bool
+static int
 init_reserved(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -2721,10 +2757,10 @@ init_reserved(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	 * Seemingly does nothing
 	 */
 
-	return true;
+	return 1;
 }
 
-static bool
+static int
 init_96(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -2757,13 +2793,13 @@ init_96(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	val <<= bios->data[offset + 16];
 
 	if (!iexec->execute)
-		return true;
+		return 17;
 
 	bios_wr32(bios, reg, (bios_rd32(bios, reg) & mask) | val);
-	return true;
+	return 17;
 }
 
-static bool
+static int
 init_97(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -2787,29 +2823,13 @@ init_97(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	val = (val & mask) | ((val + add) & ~mask);
 
 	if (!iexec->execute)
-		return true;
+		return 13;
 
 	bios_wr32(bios, reg, val);
-	return true;
-}
-
-static int
-nouveau_dp_auxch_rd(struct nouveau_i2c_chan *auxch, int cmd, int addr,
-		    uint8_t buf[16], int len)
-{
-	NV_ERROR(auxch->dev, "auxch_rd: stub!\n");
-	return -ENODEV;
+	return 13;
 }
 
 static int
-nouveau_dp_auxch_wr(struct nouveau_i2c_chan *auxch, int cmd, int addr,
-		    uint8_t buf[16], int len)
-{
-	NV_ERROR(auxch->dev, "auxch_wr: stub!\n");
-	return -ENODEV;
-}
-
-static bool
 init_auxch(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -2827,52 +2847,49 @@ init_auxch(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	struct drm_device *dev = bios->dev;
 	struct nouveau_i2c_chan *auxch;
 	uint32_t addr = ROM32(bios->data[offset + 1]);
-	uint8_t len = bios->data[offset + 5];
-	uint8_t buf[16];
+	uint8_t count = bios->data[offset + 5];
+	int len = 6 + count * 2;
 	int ret, i;
 
-	if (len > 16) {
-		NV_ERROR(dev, "INIT_AUXCH: >16 byte xfer unimplemented!\n");
-		return false;
-	}
-
 	if (!bios->display.output) {
 		NV_ERROR(dev, "INIT_AUXCH: no active output\n");
-		return false;
+		return 0;
 	}
 
 	auxch = init_i2c_device_find(dev, bios->display.output->i2c_index);
 	if (!auxch) {
 		NV_ERROR(dev, "INIT_AUXCH: couldn't get auxch %d\n",
 			 bios->display.output->i2c_index);
-		return false;
+		return 0;
 	}
 
 	if (!iexec->execute)
-		return true;
-
-	ret = nouveau_dp_auxch_rd(auxch, 9, addr, buf, len);
-	if (ret) {
-		NV_ERROR(dev, "INIT_AUXCH: rd auxch fail %d\n", ret);
-		return false;
-	}
+		return len;
 
 	offset += 6;
-	for (i = 0; i < len; i++, offset += 2) {
-		buf[i] &= bios->data[offset + 0];
-		buf[i] |= bios->data[offset + 1];
-	}
+	for (i = 0; i < count; i++, offset += 2) {
+		uint8_t data;
 
-	ret = nouveau_dp_auxch_wr(auxch, 8, addr, buf, len);
-	if (ret) {
-		NV_ERROR(dev, "INIT_AUXCH: wr auxch fail %d\n", ret);
-		return false;
+		ret = nouveau_dp_auxch(auxch, 9, addr, &data, 1);
+		if (ret) {
+			NV_ERROR(dev, "INIT_AUXCH: rd auxch fail %d\n", ret);
+			return 0;
+		}
+
+		data &= bios->data[offset + 0];
+		data |= bios->data[offset + 1];
+
+		ret = nouveau_dp_auxch(auxch, 8, addr, &data, 1);
+		if (ret) {
+			NV_ERROR(dev, "INIT_AUXCH: wr auxch fail %d\n", ret);
+			return 0;
+		}
 	}
 
-	return true;
+	return len;
 }
 
-static bool
+static int
 init_zm_auxch(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 {
 	/*
@@ -2889,106 +2906,99 @@ init_zm_auxch(struct nvbios *bios, uint16_t offset, struct init_exec *iexec)
 	struct drm_device *dev = bios->dev;
 	struct nouveau_i2c_chan *auxch;
 	uint32_t addr = ROM32(bios->data[offset + 1]);
-	uint8_t len = bios->data[offset + 5];
-	int ret;
-
-	if (len > 16) {
-		NV_ERROR(dev, "INIT_ZM_AUXCH: >16 byte xfer unimplemented!\n");
-		return false;
-	}
+	uint8_t count = bios->data[offset + 5];
+	int len = 6 + count;
+	int ret, i;
 
 	if (!bios->display.output) {
 		NV_ERROR(dev, "INIT_ZM_AUXCH: no active output\n");
-		return false;
+		return 0;
 	}
 
 	auxch = init_i2c_device_find(dev, bios->display.output->i2c_index);
 	if (!auxch) {
 		NV_ERROR(dev, "INIT_ZM_AUXCH: couldn't get auxch %d\n",
 			 bios->display.output->i2c_index);
-		return false;
+		return 0;
 	}
 
 	if (!iexec->execute)
-		return true;
+		return len;
 
-	ret = nouveau_dp_auxch_wr(auxch, 8, addr, &bios->data[offset + 6], len);
-	if (ret) {
-		NV_ERROR(dev, "INIT_ZM_AUXCH: wr auxch fail %d\n", ret);
-		return false;
+	offset += 6;
+	for (i = 0; i < count; i++, offset++) {
+		ret = nouveau_dp_auxch(auxch, 8, addr, &bios->data[offset], 1);
+		if (ret) {
+			NV_ERROR(dev, "INIT_ZM_AUXCH: wr auxch fail %d\n", ret);
+			return 0;
+		}
 	}
 
-	return true;
+	return len;
 }
 
 static struct init_tbl_entry itbl_entry[] = {
 	/* command name                       , id  , length  , offset  , mult    , command handler                 */
 	/* INIT_PROG (0x31, 15, 10, 4) removed due to no example of use */
-	{ "INIT_IO_RESTRICT_PROG"             , 0x32, 11      , 6       , 4       , init_io_restrict_prog           },
-	{ "INIT_REPEAT"                       , 0x33, 2       , 0       , 0       , init_repeat                     },
-	{ "INIT_IO_RESTRICT_PLL"              , 0x34, 12      , 7       , 2       , init_io_restrict_pll            },
-	{ "INIT_END_REPEAT"                   , 0x36, 1       , 0       , 0       , init_end_repeat                 },
-	{ "INIT_COPY"                         , 0x37, 11      , 0       , 0       , init_copy                       },
-	{ "INIT_NOT"                          , 0x38, 1       , 0       , 0       , init_not                        },
-	{ "INIT_IO_FLAG_CONDITION"            , 0x39, 2       , 0       , 0       , init_io_flag_condition          },
-	{ "INIT_INDEX_ADDRESS_LATCHED"        , 0x49, 18      , 17      , 2       , init_idx_addr_latched           },
-	{ "INIT_IO_RESTRICT_PLL2"             , 0x4A, 11      , 6       , 4       , init_io_restrict_pll2           },
-	{ "INIT_PLL2"                         , 0x4B, 9       , 0       , 0       , init_pll2                       },
-	{ "INIT_I2C_BYTE"                     , 0x4C, 4       , 3       , 3       , init_i2c_byte                   },
-	{ "INIT_ZM_I2C_BYTE"                  , 0x4D, 4       , 3       , 2       , init_zm_i2c_byte                },
-	{ "INIT_ZM_I2C"                       , 0x4E, 4       , 3       , 1       , init_zm_i2c                     },
-	{ "INIT_TMDS"                         , 0x4F, 5       , 0       , 0       , init_tmds                       },
-	{ "INIT_ZM_TMDS_GROUP"                , 0x50, 3       , 2       , 2       , init_zm_tmds_group              },
-	{ "INIT_CR_INDEX_ADDRESS_LATCHED"     , 0x51, 5       , 4       , 1       , init_cr_idx_adr_latch           },
-	{ "INIT_CR"                           , 0x52, 4       , 0       , 0       , init_cr                         },
-	{ "INIT_ZM_CR"                        , 0x53, 3       , 0       , 0       , init_zm_cr                      },
-	{ "INIT_ZM_CR_GROUP"                  , 0x54, 2       , 1       , 2       , init_zm_cr_group                },
-	{ "INIT_CONDITION_TIME"               , 0x56, 3       , 0       , 0       , init_condition_time             },
-	{ "INIT_ZM_REG_SEQUENCE"              , 0x58, 6       , 5       , 4       , init_zm_reg_sequence            },
+	{ "INIT_IO_RESTRICT_PROG"             , 0x32, init_io_restrict_prog           },
+	{ "INIT_REPEAT"                       , 0x33, init_repeat                     },
+	{ "INIT_IO_RESTRICT_PLL"              , 0x34, init_io_restrict_pll            },
+	{ "INIT_END_REPEAT"                   , 0x36, init_end_repeat                 },
+	{ "INIT_COPY"                         , 0x37, init_copy                       },
+	{ "INIT_NOT"                          , 0x38, init_not                        },
+	{ "INIT_IO_FLAG_CONDITION"            , 0x39, init_io_flag_condition          },
+	{ "INIT_INDEX_ADDRESS_LATCHED"        , 0x49, init_idx_addr_latched           },
+	{ "INIT_IO_RESTRICT_PLL2"             , 0x4A, init_io_restrict_pll2           },
+	{ "INIT_PLL2"                         , 0x4B, init_pll2                       },
+	{ "INIT_I2C_BYTE"                     , 0x4C, init_i2c_byte                   },
+	{ "INIT_ZM_I2C_BYTE"                  , 0x4D, init_zm_i2c_byte                },
+	{ "INIT_ZM_I2C"                       , 0x4E, init_zm_i2c                     },
+	{ "INIT_TMDS"                         , 0x4F, init_tmds                       },
+	{ "INIT_ZM_TMDS_GROUP"                , 0x50, init_zm_tmds_group              },
+	{ "INIT_CR_INDEX_ADDRESS_LATCHED"     , 0x51, init_cr_idx_adr_latch           },
+	{ "INIT_CR"                           , 0x52, init_cr                         },
+	{ "INIT_ZM_CR"                        , 0x53, init_zm_cr                      },
+	{ "INIT_ZM_CR_GROUP"                  , 0x54, init_zm_cr_group                },
+	{ "INIT_CONDITION_TIME"               , 0x56, init_condition_time             },
+	{ "INIT_ZM_REG_SEQUENCE"              , 0x58, init_zm_reg_sequence            },
 	/* INIT_INDIRECT_REG (0x5A, 7, 0, 0) removed due to no example of use */
-	{ "INIT_SUB_DIRECT"                   , 0x5B, 3       , 0       , 0       , init_sub_direct                 },
-	{ "INIT_COPY_NV_REG"                  , 0x5F, 22      , 0       , 0       , init_copy_nv_reg                },
-	{ "INIT_ZM_INDEX_IO"                  , 0x62, 5       , 0       , 0       , init_zm_index_io                },
-	{ "INIT_COMPUTE_MEM"                  , 0x63, 1       , 0       , 0       , init_compute_mem                },
-	{ "INIT_RESET"                        , 0x65, 13      , 0       , 0       , init_reset                      },
-	{ "INIT_CONFIGURE_MEM"                , 0x66, 1       , 0       , 0       , init_configure_mem              },
-	{ "INIT_CONFIGURE_CLK"                , 0x67, 1       , 0       , 0       , init_configure_clk              },
-	{ "INIT_CONFIGURE_PREINIT"            , 0x68, 1       , 0       , 0       , init_configure_preinit          },
-	{ "INIT_IO"                           , 0x69, 5       , 0       , 0       , init_io                         },
-	{ "INIT_SUB"                          , 0x6B, 2       , 0       , 0       , init_sub                        },
-	{ "INIT_RAM_CONDITION"                , 0x6D, 3       , 0       , 0       , init_ram_condition              },
-	{ "INIT_NV_REG"                       , 0x6E, 13      , 0       , 0       , init_nv_reg                     },
-	{ "INIT_MACRO"                        , 0x6F, 2       , 0       , 0       , init_macro                      },
-	{ "INIT_DONE"                         , 0x71, 1       , 0       , 0       , init_done                       },
-	{ "INIT_RESUME"                       , 0x72, 1       , 0       , 0       , init_resume                     },
+	{ "INIT_SUB_DIRECT"                   , 0x5B, init_sub_direct                 },
+	{ "INIT_COPY_NV_REG"                  , 0x5F, init_copy_nv_reg                },
+	{ "INIT_ZM_INDEX_IO"                  , 0x62, init_zm_index_io                },
+	{ "INIT_COMPUTE_MEM"                  , 0x63, init_compute_mem                },
+	{ "INIT_RESET"                        , 0x65, init_reset                      },
+	{ "INIT_CONFIGURE_MEM"                , 0x66, init_configure_mem              },
+	{ "INIT_CONFIGURE_CLK"                , 0x67, init_configure_clk              },
+	{ "INIT_CONFIGURE_PREINIT"            , 0x68, init_configure_preinit          },
+	{ "INIT_IO"                           , 0x69, init_io                         },
+	{ "INIT_SUB"                          , 0x6B, init_sub                        },
+	{ "INIT_RAM_CONDITION"                , 0x6D, init_ram_condition              },
+	{ "INIT_NV_REG"                       , 0x6E, init_nv_reg                     },
+	{ "INIT_MACRO"                        , 0x6F, init_macro                      },
+	{ "INIT_DONE"                         , 0x71, init_done                       },
+	{ "INIT_RESUME"                       , 0x72, init_resume                     },
 	/* INIT_RAM_CONDITION2 (0x73, 9, 0, 0) removed due to no example of use */
-	{ "INIT_TIME"                         , 0x74, 3       , 0       , 0       , init_time                       },
-	{ "INIT_CONDITION"                    , 0x75, 2       , 0       , 0       , init_condition                  },
-	{ "INIT_IO_CONDITION"                 , 0x76, 2       , 0       , 0       , init_io_condition               },
-	{ "INIT_INDEX_IO"                     , 0x78, 6       , 0       , 0       , init_index_io                   },
-	{ "INIT_PLL"                          , 0x79, 7       , 0       , 0       , init_pll                        },
-	{ "INIT_ZM_REG"                       , 0x7A, 9       , 0       , 0       , init_zm_reg                     },
-	/* INIT_RAM_RESTRICT_PLL's length is adjusted by the BIT M table */
-	{ "INIT_RAM_RESTRICT_PLL"             , 0x87, 2       , 0       , 0       , init_ram_restrict_pll           },
-	{ "INIT_GPIO"                         , 0x8E, 1       , 0       , 0       , init_gpio                       },
-	/* INIT_RAM_RESTRICT_ZM_REG_GROUP's mult is loaded by M table in BIT */
-	{ "INIT_RAM_RESTRICT_ZM_REG_GROUP"    , 0x8F, 7       , 6       , 0       , init_ram_restrict_zm_reg_group  },
-	{ "INIT_COPY_ZM_REG"                  , 0x90, 9       , 0       , 0       , init_copy_zm_reg                },
-	{ "INIT_ZM_REG_GROUP_ADDRESS_LATCHED" , 0x91, 6       , 5       , 4       , init_zm_reg_group_addr_latched  },
-	{ "INIT_RESERVED"                     , 0x92, 1       , 0       , 0       , init_reserved                   },
-	{ "INIT_96"                           , 0x96, 17      , 0       , 0       , init_96                         },
-	{ "INIT_97"                           , 0x97, 13      , 0       , 0       , init_97                         },
-	{ "INIT_AUXCH"                        , 0x98, 6       , 5       , 2       , init_auxch                      },
-	{ "INIT_ZM_AUXCH"                     , 0x99, 6       , 5       , 1       , init_zm_auxch                   },
-	{ NULL                                , 0   , 0       , 0       , 0       , NULL                            }
+	{ "INIT_TIME"                         , 0x74, init_time                       },
+	{ "INIT_CONDITION"                    , 0x75, init_condition                  },
+	{ "INIT_IO_CONDITION"                 , 0x76, init_io_condition               },
+	{ "INIT_INDEX_IO"                     , 0x78, init_index_io                   },
+	{ "INIT_PLL"                          , 0x79, init_pll                        },
+	{ "INIT_ZM_REG"                       , 0x7A, init_zm_reg                     },
+	{ "INIT_RAM_RESTRICT_PLL"             , 0x87, init_ram_restrict_pll           },
+	{ "INIT_8C"                           , 0x8C, init_8c                         },
+	{ "INIT_8D"                           , 0x8D, init_8d                         },
+	{ "INIT_GPIO"                         , 0x8E, init_gpio                       },
+	{ "INIT_RAM_RESTRICT_ZM_REG_GROUP"    , 0x8F, init_ram_restrict_zm_reg_group  },
+	{ "INIT_COPY_ZM_REG"                  , 0x90, init_copy_zm_reg                },
+	{ "INIT_ZM_REG_GROUP_ADDRESS_LATCHED" , 0x91, init_zm_reg_group_addr_latched  },
+	{ "INIT_RESERVED"                     , 0x92, init_reserved                   },
+	{ "INIT_96"                           , 0x96, init_96                         },
+	{ "INIT_97"                           , 0x97, init_97                         },
+	{ "INIT_AUXCH"                        , 0x98, init_auxch                      },
+	{ "INIT_ZM_AUXCH"                     , 0x99, init_zm_auxch                   },
+	{ NULL                                , 0   , NULL                            }
 };
 
-static unsigned int get_init_table_entry_length(struct nvbios *bios, unsigned int offset, int i)
-{
-	/* Calculates the length of a given init table entry. */
-	return itbl_entry[i].length + bios->data[offset + itbl_entry[i].length_offset]*itbl_entry[i].length_multiplier;
-}
-
 #define MAX_TABLE_OPS 1000
 
 static int
@@ -3004,7 +3014,7 @@ parse_init_table(struct nvbios *bios, unsigned int offset,
 	 * is changed back to EXECUTE.
 	 */
 
-	int count = 0, i;
+	int count = 0, i, res;
 	uint8_t id;
 
 	/*
@@ -3024,22 +3034,21 @@ parse_init_table(struct nvbios *bios, unsigned int offset,
 				offset, itbl_entry[i].id, itbl_entry[i].name);
 
 			/* execute eventual command handler */
-			if (itbl_entry[i].handler)
-				if (!(*itbl_entry[i].handler)(bios, offset, iexec))
-					break;
+			res = (*itbl_entry[i].handler)(bios, offset, iexec);
+			if (!res)
+				break;
+			/*
+			 * Add the offset of the current command including all data
+			 * of that command. The offset will then be pointing on the
+			 * next op code.
+			 */
+			offset += res;
 		} else {
 			NV_ERROR(bios->dev,
 				 "0x%04X: Init table command not found: "
 				 "0x%02X\n", offset, id);
 			return -ENOENT;
 		}
-
-		/*
-		 * Add the offset of the current command including all data
-		 * of that command. The offset will then be pointing on the
-		 * next op code.
-		 */
-		offset += get_init_table_entry_length(bios, offset, i);
 	}
 
 	if (offset >= bios->length)
@@ -3341,8 +3350,11 @@ static int parse_lvds_manufacturer_table_header(struct drm_device *dev, struct n
 	return 0;
 }
 
-static int get_fp_strap(struct drm_device *dev, struct nvbios *bios)
+static int
+get_fp_strap(struct drm_device *dev, struct nvbios *bios)
 {
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+
 	/*
 	 * The fp strap is normally dictated by the "User Strap" in
 	 * PEXTDEV_BOOT_0[20:16], but on BMP cards when bit 2 of the
@@ -3355,7 +3367,7 @@ static int get_fp_strap(struct drm_device *dev, struct nvbios *bios)
 	if (bios->major_version < 5 && bios->data[0x48] & 0x4)
 		return NVReadVgaCrtc5758(dev, 0, 0xf) & 0xf;
 
-	if (nv_arch(dev) >= NV_50)
+	if (dev_priv->card_type >= NV_50)
 		return (bios_rd32(bios, NV_PEXTDEV_BOOT_0) >> 24) & 0xf;
 	else
 		return (bios_rd32(bios, NV_PEXTDEV_BOOT_0) >> 16) & 0xf;
@@ -3640,7 +3652,9 @@ int nouveau_bios_parse_lvds_table(struct drm_device *dev, int pxclk, bool *dl, b
 		bios->fp.duallink_transition_clk = ROM16(bios->data[bios->fp.lvdsmanufacturerpointer + 5]) * 10;
 		break;
 	case 0x40:
-		/* bios->fp.dual_link = bios->data[lvdsofs] & 1; */
+		bios->fp.dual_link = bios->data[lvdsofs] & 1;
+		bios->fp.if_is_24bit = bios->data[lvdsofs] & 2;
+		bios->fp.strapless_is_24bit = bios->data[bios->fp.lvdsmanufacturerpointer + 4];
 		bios->fp.duallink_transition_clk = ROM16(bios->data[bios->fp.lvdsmanufacturerpointer + 5]) * 10;
 		break;
 	}
@@ -3688,6 +3702,32 @@ bios_output_config_match(struct drm_device *dev, struct dcb_entry *dcbent,
 	return NULL;
 }
 
+void *
+nouveau_bios_dp_table(struct drm_device *dev, struct dcb_entry *dcbent,
+		      int *length)
+{
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	struct nvbios *bios = &dev_priv->VBIOS;
+	uint8_t *table;
+
+	if (!bios->display.dp_table_ptr) {
+		NV_ERROR(dev, "No pointer to DisplayPort table\n");
+		return NULL;
+	}
+	table = &bios->data[bios->display.dp_table_ptr];
+
+	if (table[0] != 0x21) {
+		NV_ERROR(dev, "DisplayPort table version 0x%02x unknown\n",
+			 table[0]);
+		return NULL;
+	}
+
+	*length = table[4];
+	return bios_output_config_match(dev, dcbent,
+					bios->display.dp_table_ptr + table[1],
+					table[2], table[3]);
+}
+
 int
 nouveau_bios_run_display_table(struct drm_device *dev, struct dcb_entry *dcbent,
 			       uint32_t sub, int pxclk)
@@ -3771,7 +3811,7 @@ nouveau_bios_run_display_table(struct drm_device *dev, struct dcb_entry *dcbent,
 	 * script tables is a pointer to the script to execute.
 	 */
 
-	NV_DEBUG(dev, "Searching for output entry for %d %d %d\n",
+	NV_DEBUG_KMS(dev, "Searching for output entry for %d %d %d\n",
 			dcbent->type, dcbent->location, dcbent->or);
 	otable = bios_output_config_match(dev, dcbent, table[1] +
 					  bios->display.script_table_ptr,
@@ -3801,7 +3841,7 @@ nouveau_bios_run_display_table(struct drm_device *dev, struct dcb_entry *dcbent,
 	if (pxclk == 0) {
 		script = ROM16(otable[6]);
 		if (!script) {
-			NV_DEBUG(dev, "output script 0 not found\n");
+			NV_DEBUG_KMS(dev, "output script 0 not found\n");
 			return 1;
 		}
 
@@ -3811,7 +3851,7 @@ nouveau_bios_run_display_table(struct drm_device *dev, struct dcb_entry *dcbent,
 	if (pxclk == -1) {
 		script = ROM16(otable[8]);
 		if (!script) {
-			NV_DEBUG(dev, "output script 1 not found\n");
+			NV_DEBUG_KMS(dev, "output script 1 not found\n");
 			return 1;
 		}
 
@@ -3824,7 +3864,7 @@ nouveau_bios_run_display_table(struct drm_device *dev, struct dcb_entry *dcbent,
 		else
 			script = 0;
 		if (!script) {
-			NV_DEBUG(dev, "output script 2 not found\n");
+			NV_DEBUG_KMS(dev, "output script 2 not found\n");
 			return 1;
 		}
 
@@ -3848,7 +3888,7 @@ nouveau_bios_run_display_table(struct drm_device *dev, struct dcb_entry *dcbent,
 		if (script)
 			script = clkcmptable(bios, script, -pxclk);
 		if (!script) {
-			NV_DEBUG(dev, "clock script 1 not found\n");
+			NV_DEBUG_KMS(dev, "clock script 1 not found\n");
 			return 1;
 		}
 
@@ -3974,6 +4014,7 @@ int get_pll_limits(struct drm_device *dev, uint32_t limit_match, struct pll_lims
 	case 0x20:
 	case 0x21:
 	case 0x30:
+	case 0x40:
 		headerlen = bios->data[bios->pll_limit_tbl_ptr + 1];
 		recordlen = bios->data[bios->pll_limit_tbl_ptr + 2];
 		entries = bios->data[bios->pll_limit_tbl_ptr + 3];
@@ -4122,7 +4163,7 @@ int get_pll_limits(struct drm_device *dev, uint32_t limit_match, struct pll_lims
 					pll_lim->refclk = 25000;
 			}
 		}
-	} else if (pll_lim_ver) { /* ver 0x30 */
+	} else if (pll_lim_ver == 0x30) { /* ver 0x30 */
 		uint8_t *entry = &bios->data[bios->pll_limit_tbl_ptr + headerlen];
 		uint8_t *record = NULL;
 		int i;
@@ -4162,6 +4203,42 @@ int get_pll_limits(struct drm_device *dev, uint32_t limit_match, struct pll_lims
 		pll_lim->max_usable_log2p = pll_lim->max_log2p = record[25];
 		pll_lim->log2p_bias = record[27];
 		pll_lim->refclk = ROM32(record[28]);
+	} else if (pll_lim_ver) { /* ver 0x40 */
+		uint8_t *entry = &bios->data[bios->pll_limit_tbl_ptr + headerlen];
+		uint8_t *record = NULL;
+		int i;
+
+		BIOSLOG(bios, "Loading PLL limits for register 0x%08x\n",
+			limit_match);
+
+		for (i = 0; i < entries; i++, entry += recordlen) {
+			if (ROM32(entry[3]) == limit_match) {
+				record = &bios->data[ROM16(entry[1])];
+				break;
+			}
+		}
+
+		if (!record) {
+			NV_ERROR(dev, "Register 0x%08x not found in PLL "
+				 "limits table", limit_match);
+			return -ENOENT;
+		}
+
+		pll_lim->vco1.minfreq = ROM16(record[0]) * 1000;
+		pll_lim->vco1.maxfreq = ROM16(record[2]) * 1000;
+		pll_lim->vco1.min_inputfreq = ROM16(record[4]) * 1000;
+		pll_lim->vco1.max_inputfreq = ROM16(record[6]) * 1000;
+		pll_lim->vco1.min_m = record[8];
+		pll_lim->vco1.max_m = record[9];
+		pll_lim->vco1.min_n = record[10];
+		pll_lim->vco1.max_n = record[11];
+		pll_lim->min_p = record[12];
+		pll_lim->max_p = record[13];
+		/* where did this go to?? */
+		if (limit_match == 0x00614100 || limit_match == 0x00614900)
+			pll_lim->refclk = 27000;
+		else
+			pll_lim->refclk = 100000;
 	}
 
 	/*
@@ -4472,7 +4549,9 @@ static int parse_bit_lvds_tbl_entry(struct drm_device *dev, struct nvbios *bios,
 	return 0;
 }
 
-static int parse_bit_M_tbl_entry(struct drm_device *dev, struct nvbios *bios, struct bit_entry *bitentry)
+static int
+parse_bit_M_tbl_entry(struct drm_device *dev, struct nvbios *bios,
+		      struct bit_entry *bitentry)
 {
 	/*
 	 * offset + 2  (8  bits): number of options in an
@@ -4484,8 +4563,6 @@ static int parse_bit_M_tbl_entry(struct drm_device *dev, struct nvbios *bios, st
 	 * stuff that we don't use - their use currently unknown
 	 */
 
-	int i;
-
 	/*
 	 * Older bios versions don't have a sufficiently long table for
 	 * what we want
@@ -4493,17 +4570,13 @@ static int parse_bit_M_tbl_entry(struct drm_device *dev, struct nvbios *bios, st
 	if (bitentry->length < 0x5)
 		return 0;
 
-	/* adjust length of INIT_87 */
-	for (i = 0; itbl_entry[i].name && (itbl_entry[i].id != 0x87); i++);
-	itbl_entry[i].length += bios->data[bitentry->offset + 2] * 4;
-
-	/* set up multiplier for INIT_RAM_RESTRICT_ZM_REG_GROUP */
-	for (; itbl_entry[i].name && (itbl_entry[i].id != 0x8f); i++);
-	itbl_entry[i].length_multiplier = bios->data[bitentry->offset + 2] * 4;
-
-	init_ram_restrict_zm_reg_group_blocklen = itbl_entry[i].length_multiplier;
-
-	bios->ram_restrict_tbl_ptr = ROM16(bios->data[bitentry->offset + 3]);
+	if (bitentry->id[1] < 2) {
+		bios->ram_restrict_group_count = bios->data[bitentry->offset + 2];
+		bios->ram_restrict_tbl_ptr = ROM16(bios->data[bitentry->offset + 3]);
+	} else {
+		bios->ram_restrict_group_count = bios->data[bitentry->offset + 0];
+		bios->ram_restrict_tbl_ptr = ROM16(bios->data[bitentry->offset + 1]);
+	}
 
 	return 0;
 }
@@ -4594,6 +4667,14 @@ parse_bit_U_tbl_entry(struct drm_device *dev, struct nvbios *bios,
 	return 0;
 }
 
+static int
+parse_bit_displayport_tbl_entry(struct drm_device *dev, struct nvbios *bios,
+				struct bit_entry *bitentry)
+{
+	bios->display.dp_table_ptr = ROM16(bios->data[bitentry->offset]);
+	return 0;
+}
+
 struct bit_table {
 	const char id;
 	int (* const parse_fn)(struct drm_device *, struct nvbios *, struct bit_entry *);
@@ -4601,8 +4682,11 @@ struct bit_table {
 
 #define BIT_TABLE(id, funcid) ((struct bit_table){ id, parse_bit_##funcid##_tbl_entry })
 
-static int parse_bit_table(struct drm_device *dev, struct nvbios *bios, const uint16_t bitoffset, struct bit_table *table)
+static int
+parse_bit_table(struct nvbios *bios, const uint16_t bitoffset,
+		struct bit_table *table)
 {
+	struct drm_device *dev = bios->dev;
 	uint8_t maxentries = bios->data[bitoffset + 4];
 	int i, offset;
 	struct bit_entry bitentry;
@@ -4620,13 +4704,12 @@ static int parse_bit_table(struct drm_device *dev, struct nvbios *bios, const ui
 		return table->parse_fn(dev, bios, &bitentry);
 	}
 
-	NV_ERROR(dev, "BIT table '%c' not found\n", table->id);
-
+	NV_INFO(dev, "BIT table '%c' not found\n", table->id);
 	return -ENOSYS;
 }
 
-static int parse_bit_structure(struct drm_device *dev, struct nvbios *bios,
-				const uint16_t bitoffset)
+static int
+parse_bit_structure(struct nvbios *bios, const uint16_t bitoffset)
 {
 	int ret;
 
@@ -4636,22 +4719,23 @@ static int parse_bit_structure(struct drm_device *dev, struct nvbios *bios,
 	 * functions shouldn't be actually *doing* anything apart from pulling
 	 * data from the image into the bios struct, thus no interdependencies
 	 */
-	ret = parse_bit_table(dev, bios, bitoffset, &BIT_TABLE('i', i));
+	ret = parse_bit_table(bios, bitoffset, &BIT_TABLE('i', i));
 	if (ret) /* info? */
 		return ret;
 	if (bios->major_version >= 0x60) /* g80+ */
-		parse_bit_table(dev, bios, bitoffset, &BIT_TABLE('A', A));
-	ret = parse_bit_table(dev, bios, bitoffset, &BIT_TABLE('C', C));
+		parse_bit_table(bios, bitoffset, &BIT_TABLE('A', A));
+	ret = parse_bit_table(bios, bitoffset, &BIT_TABLE('C', C));
 	if (ret)
 		return ret;
-	parse_bit_table(dev, bios, bitoffset, &BIT_TABLE('D', display));
-	ret = parse_bit_table(dev, bios, bitoffset, &BIT_TABLE('I', init));
+	parse_bit_table(bios, bitoffset, &BIT_TABLE('D', display));
+	ret = parse_bit_table(bios, bitoffset, &BIT_TABLE('I', init));
 	if (ret)
 		return ret;
-	parse_bit_table(dev, bios, bitoffset, &BIT_TABLE('M', M)); /* memory? */
-	parse_bit_table(dev, bios, bitoffset, &BIT_TABLE('L', lvds));
-	parse_bit_table(dev, bios, bitoffset, &BIT_TABLE('T', tmds));
-	parse_bit_table(dev, bios, bitoffset, &BIT_TABLE('U', U));
+	parse_bit_table(bios, bitoffset, &BIT_TABLE('M', M)); /* memory? */
+	parse_bit_table(bios, bitoffset, &BIT_TABLE('L', lvds));
+	parse_bit_table(bios, bitoffset, &BIT_TABLE('T', tmds));
+	parse_bit_table(bios, bitoffset, &BIT_TABLE('U', U));
+	parse_bit_table(bios, bitoffset, &BIT_TABLE('d', displayport));
 
 	return 0;
 }
@@ -4929,10 +5013,11 @@ read_dcb_i2c_entry(struct drm_device *dev, int dcb_version, uint8_t *i2ctable, i
 		 */
 		if (port_type == 4)	/* seen on C51 */
 			rdofs = wrofs = 1;
-		if (port_type == 5)	/* G80+ */
+		if (port_type >= 5)	/* G80+ */
 			rdofs = wrofs = 0;
 	}
-	if (dcb_i2c_ver >= 0x40 && port_type != 5)
+
+	if (dcb_i2c_ver >= 0x40 && port_type != 5 && port_type != 6)
 		NV_WARN(dev, "DCB I2C table has port type %d\n", port_type);
 
 	i2c->port_type = port_type;
@@ -4942,6 +5027,204 @@ read_dcb_i2c_entry(struct drm_device *dev, int dcb_version, uint8_t *i2ctable, i
 	return 0;
 }
 
+static struct dcb_gpio_entry *
+new_gpio_entry(struct nvbios *bios)
+{
+	struct parsed_dcb_gpio *gpio = &bios->bdcb.gpio;
+
+	return &gpio->entry[gpio->entries++];
+}
+
+struct dcb_gpio_entry *
+nouveau_bios_gpio_entry(struct drm_device *dev, enum dcb_gpio_tag tag)
+{
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	struct nvbios *bios = &dev_priv->VBIOS;
+	int i;
+
+	for (i = 0; i < bios->bdcb.gpio.entries; i++) {
+		if (bios->bdcb.gpio.entry[i].tag != tag)
+			continue;
+
+		return &bios->bdcb.gpio.entry[i];
+	}
+
+	return NULL;
+}
+
+static void
+parse_dcb30_gpio_entry(struct nvbios *bios, uint16_t offset)
+{
+	struct dcb_gpio_entry *gpio;
+	uint16_t ent = ROM16(bios->data[offset]);
+	uint8_t line = ent & 0x1f,
+		tag = ent >> 5 & 0x3f,
+		flags = ent >> 11 & 0x1f;
+
+	if (tag == 0x3f)
+		return;
+
+	gpio = new_gpio_entry(bios);
+
+	gpio->tag = tag;
+	gpio->line = line;
+	gpio->invert = flags != 4;
+}
+
+static void
+parse_dcb40_gpio_entry(struct nvbios *bios, uint16_t offset)
+{
+	struct dcb_gpio_entry *gpio;
+	uint32_t ent = ROM32(bios->data[offset]);
+	uint8_t line = ent & 0x1f,
+		tag = ent >> 8 & 0xff;
+
+	if (tag == 0xff)
+		return;
+
+	gpio = new_gpio_entry(bios);
+
+	/* Currently unused, we may need more fields parsed at some
+	 * point. */
+	gpio->tag = tag;
+	gpio->line = line;
+}
+
+static void
+parse_dcb_gpio_table(struct nvbios *bios)
+{
+	struct drm_device *dev = bios->dev;
+	uint16_t gpio_table_ptr = bios->bdcb.gpio_table_ptr;
+	uint8_t *gpio_table = &bios->data[gpio_table_ptr];
+	int header_len = gpio_table[1],
+	    entries = gpio_table[2],
+	    entry_len = gpio_table[3];
+	void (*parse_entry)(struct nvbios *, uint16_t) = NULL;
+	int i;
+
+	if (bios->bdcb.version >= 0x40) {
+		if (gpio_table_ptr && entry_len != 4) {
+			NV_WARN(dev, "Invalid DCB GPIO table entry length.\n");
+			return;
+		}
+
+		parse_entry = parse_dcb40_gpio_entry;
+
+	} else if (bios->bdcb.version >= 0x30) {
+		if (gpio_table_ptr && entry_len != 2) {
+			NV_WARN(dev, "Invalid DCB GPIO table entry length.\n");
+			return;
+		}
+
+		parse_entry = parse_dcb30_gpio_entry;
+
+	} else if (bios->bdcb.version >= 0x22) {
+		/*
+		 * DCBs older than v3.0 don't really have a GPIO
+		 * table, instead they keep some GPIO info at fixed
+		 * locations.
+		 */
+		uint16_t dcbptr = ROM16(bios->data[0x36]);
+		uint8_t *tvdac_gpio = &bios->data[dcbptr - 5];
+
+		if (tvdac_gpio[0] & 1) {
+			struct dcb_gpio_entry *gpio = new_gpio_entry(bios);
+
+			gpio->tag = DCB_GPIO_TVDAC0;
+			gpio->line = tvdac_gpio[1] >> 4;
+			gpio->invert = tvdac_gpio[0] & 2;
+		}
+	}
+
+	if (!gpio_table_ptr)
+		return;
+
+	if (entries > DCB_MAX_NUM_GPIO_ENTRIES) {
+		NV_WARN(dev, "Too many entries in the DCB GPIO table.\n");
+		entries = DCB_MAX_NUM_GPIO_ENTRIES;
+	}
+
+	for (i = 0; i < entries; i++)
+		parse_entry(bios, gpio_table_ptr + header_len + entry_len * i);
+}
+
+struct dcb_connector_table_entry *
+nouveau_bios_connector_entry(struct drm_device *dev, int index)
+{
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	struct nvbios *bios = &dev_priv->VBIOS;
+	struct dcb_connector_table_entry *cte;
+
+	if (index >= bios->bdcb.connector.entries)
+		return NULL;
+
+	cte = &bios->bdcb.connector.entry[index];
+	if (cte->type == 0xff)
+		return NULL;
+
+	return cte;
+}
+
+static void
+parse_dcb_connector_table(struct nvbios *bios)
+{
+	struct drm_device *dev = bios->dev;
+	struct dcb_connector_table *ct = &bios->bdcb.connector;
+	struct dcb_connector_table_entry *cte;
+	uint8_t *conntab = &bios->data[bios->bdcb.connector_table_ptr];
+	uint8_t *entry;
+	int i;
+
+	if (!bios->bdcb.connector_table_ptr) {
+		NV_DEBUG_KMS(dev, "No DCB connector table present\n");
+		return;
+	}
+
+	NV_INFO(dev, "DCB connector table: VHER 0x%02x %d %d %d\n",
+		conntab[0], conntab[1], conntab[2], conntab[3]);
+	if ((conntab[0] != 0x30 && conntab[0] != 0x40) ||
+	    (conntab[3] != 2 && conntab[3] != 4)) {
+		NV_ERROR(dev, "  Unknown!  Please report.\n");
+		return;
+	}
+
+	ct->entries = conntab[2];
+
+	entry = conntab + conntab[1];
+	cte = &ct->entry[0];
+	for (i = 0; i < conntab[2]; i++, entry += conntab[3], cte++) {
+		if (conntab[3] == 2)
+			cte->entry = ROM16(entry[0]);
+		else
+			cte->entry = ROM32(entry[0]);
+		cte->type  = (cte->entry & 0x000000ff) >> 0;
+		cte->index = (cte->entry & 0x00000f00) >> 8;
+		switch (cte->entry & 0x00033000) {
+		case 0x00001000:
+			cte->gpio_tag = 0x07;
+			break;
+		case 0x00002000:
+			cte->gpio_tag = 0x08;
+			break;
+		case 0x00010000:
+			cte->gpio_tag = 0x51;
+			break;
+		case 0x00020000:
+			cte->gpio_tag = 0x52;
+			break;
+		default:
+			cte->gpio_tag = 0xff;
+			break;
+		}
+
+		if (cte->type == 0xff)
+			continue;
+
+		NV_INFO(dev, "  %d: 0x%08x: type 0x%02x idx %d tag 0x%02x\n",
+			i, cte->entry, cte->type, cte->index, cte->gpio_tag);
+	}
+}
+
 static struct dcb_entry *new_dcb_entry(struct parsed_dcb *dcb)
 {
 	struct dcb_entry *entry = &dcb->entry[dcb->entries];
@@ -5055,18 +5338,14 @@ parse_dcb20_entry(struct drm_device *dev, struct bios_parsed_dcb *bdcb,
 		}
 		if (conf & mask) {
 			/*
-			 * I'm bored of getting this reported; left as a
-			 * reminder for someone to fix it.
+			 * Until we even try to use these on G8x, it's
+			 * useless reporting unknown bits.  They all are.
 			 */
-			if (bdcb->version >= 0x40) {
-				NV_WARN(dev, "G80+ LVDS not initialized by driver; ignoring conf bits\n");
+			if (bdcb->version >= 0x40)
 				break;
-			}
+
 			NV_ERROR(dev, "Unknown LVDS configuration bits, "
-					"please report\n");
-			/* cause output setting to fail, so message is seen */
-			bdcb->dcb.entries = 0;
-			return false;
+				      "please report\n");
 		}
 		break;
 		}
@@ -5079,11 +5358,30 @@ parse_dcb20_entry(struct drm_device *dev, struct bios_parsed_dcb *bdcb,
 
 		break;
 	}
+	case OUTPUT_DP:
+		entry->dpconf.sor.link = (conf & 0x00000030) >> 4;
+		entry->dpconf.link_bw = (conf & 0x00e00000) >> 21;
+		switch ((conf & 0x0f000000) >> 24) {
+		case 0xf:
+			entry->dpconf.link_nr = 4;
+			break;
+		case 0x3:
+			entry->dpconf.link_nr = 2;
+			break;
+		default:
+			entry->dpconf.link_nr = 1;
+			break;
+		}
+		break;
+	case OUTPUT_TMDS:
+		entry->tmdsconf.sor.link = (conf & 0x00000030) >> 4;
+		break;
 	case 0xe:
 		/* weird g80 mobile type that "nv" treats as a terminator */
 		bdcb->dcb.entries--;
 		return false;
 	}
+
 	/* unsure what DCB version introduces this, 3.0? */
 	if (conf & 0x100000)
 		entry->i2c_upper_default = true;
@@ -5271,9 +5569,8 @@ static int parse_dcb_table(struct drm_device *dev, struct nvbios *bios, bool two
 			recordlength = dcbtable[3];
 			i2ctabptr = ROM16(dcbtable[4]);
 			sig = ROM32(dcbtable[6]);
-			if (bdcb->version == 0x40)	/* G80 */
-				bdcb->init8e_table_ptr =
-					ROM16(dcbtable[10]);
+			bdcb->gpio_table_ptr = ROM16(dcbtable[10]);
+			bdcb->connector_table_ptr = ROM16(dcbtable[20]);
 		} else {
 			i2ctabptr = ROM16(dcbtable[2]);
 			sig = ROM32(dcbtable[4]);
@@ -5338,6 +5635,9 @@ static int parse_dcb_table(struct drm_device *dev, struct nvbios *bios, bool two
 			bdcb->i2c_default_indices = bdcb->i2c_table[4];
 	}
 
+	parse_dcb_gpio_table(bios);
+	parse_dcb_connector_table(bios);
+
 	if (entries > DCB_MAX_NUM_ENTRIES)
 		entries = DCB_MAX_NUM_ENTRIES;
 
@@ -5348,17 +5648,17 @@ static int parse_dcb_table(struct drm_device *dev, struct nvbios *bios, bool two
 		if (configblock)
 			config = ROM32(dcbtable[headerlen + confofs + recordlength * i]);
 
-		/*
-		 * Should we allow discontinuous DCBs? Certainly DCB I2C
-		 * tables can be discontinuous.
-		 */
-		if ((connection & 0x0000000f) == 0x0000000f)
-			/* end of records */
-			break;
+		/* seen on an NV11 with DCB v1.5 */
 		if (connection == 0x00000000)
-			/* seen on an NV11 with DCB v1.5 */
 			break;
 
+		/* seen on an NV17 with DCB v2.0 */
+		if (connection == 0xffffffff)
+			break;
+
+		if ((connection & 0x0000000f) == 0x0000000f)
+			continue;
+
 		NV_TRACEWARN(dev, "Raw DCB entry %d: %08x %08x\n",
 			     dcb->entries, connection, config);
 
@@ -5544,13 +5844,16 @@ uint8_t *nouveau_bios_embedded_edid(struct drm_device *dev)
 }
 
 void
-nouveau_bios_run_init_table(struct drm_device *dev, uint16_t table)
+nouveau_bios_run_init_table(struct drm_device *dev, uint16_t table,
+			    struct dcb_entry *dcbent)
 {
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	struct nvbios *bios = &dev_priv->VBIOS;
 	struct init_exec iexec = { true, false };
 
+	bios->display.output = dcbent;
 	parse_init_table(bios, table, &iexec);
+	bios->display.output = NULL;
 }
 
 static bool NVInitVBIOS(struct drm_device *dev)
@@ -5580,7 +5883,7 @@ static int nouveau_parse_vbios_struct(struct drm_device *dev)
 					bit_signature, sizeof(bit_signature));
 	if (offset) {
 		NV_TRACE(dev, "BIT BIOS found\n");
-		return parse_bit_structure(dev, bios, offset + 6);
+		return parse_bit_structure(bios, offset + 6);
 	}
 
 	offset = findstr(bios->data, bios->length,
diff --git a/drivers/gpu/drm/nouveau/nouveau_bios.h b/drivers/gpu/drm/nouveau/nouveau_bios.h
index 1ffda97..058e98c 100644
--- a/drivers/gpu/drm/nouveau/nouveau_bios.h
+++ b/drivers/gpu/drm/nouveau/nouveau_bios.h
@@ -29,6 +29,8 @@
 
 #define DCB_MAX_NUM_ENTRIES 16
 #define DCB_MAX_NUM_I2C_ENTRIES 16
+#define DCB_MAX_NUM_GPIO_ENTRIES 32
+#define DCB_MAX_NUM_CONNECTOR_ENTRIES 16
 
 #define DCB_LOC_ON_CHIP 0
 
@@ -43,16 +45,28 @@ struct dcb_entry {
 	uint8_t or;
 	bool duallink_possible;
 	union {
+		struct sor_conf {
+			int link;
+		} sorconf;
 		struct {
 			int maxfreq;
 		} crtconf;
 		struct {
+			struct sor_conf sor;
 			bool use_straps_for_mode;
 			bool use_power_scripts;
 		} lvdsconf;
 		struct {
 			bool has_component_output;
 		} tvconf;
+		struct {
+			struct sor_conf sor;
+			int link_nr;
+			int link_bw;
+		} dpconf;
+		struct {
+			struct sor_conf sor;
+		} tmdsconf;
 	};
 	bool i2c_upper_default;
 };
@@ -69,14 +83,46 @@ struct parsed_dcb {
 	struct dcb_i2c_entry i2c[DCB_MAX_NUM_I2C_ENTRIES];
 };
 
+enum dcb_gpio_tag {
+	DCB_GPIO_TVDAC0 = 0xc,
+	DCB_GPIO_TVDAC1 = 0x2d,
+};
+
+struct dcb_gpio_entry {
+	enum dcb_gpio_tag tag;
+	int line;
+	bool invert;
+};
+
+struct parsed_dcb_gpio {
+	int entries;
+	struct dcb_gpio_entry entry[DCB_MAX_NUM_GPIO_ENTRIES];
+};
+
+struct dcb_connector_table_entry {
+	uint32_t entry;
+	uint8_t type;
+	uint8_t index;
+	uint8_t gpio_tag;
+};
+
+struct dcb_connector_table {
+	int entries;
+	struct dcb_connector_table_entry entry[DCB_MAX_NUM_CONNECTOR_ENTRIES];
+};
+
 struct bios_parsed_dcb {
 	uint8_t version;
 
 	struct parsed_dcb dcb;
 
-	uint16_t init8e_table_ptr;
 	uint8_t *i2c_table;
 	uint8_t i2c_default_indices;
+
+	uint16_t gpio_table_ptr;
+	struct parsed_dcb_gpio gpio;
+	uint16_t connector_table_ptr;
+	struct dcb_connector_table connector;
 };
 
 enum nouveau_encoder_type {
@@ -137,6 +183,10 @@ struct pll_lims {
 	 */
 	uint8_t max_usable_log2p;
 	uint8_t log2p_bias;
+
+	uint8_t min_p;
+	uint8_t max_p;
+
 	int refclk;
 };
 
@@ -177,6 +227,7 @@ struct nvbios {
 
 	uint16_t pll_limit_tbl_ptr;
 	uint16_t ram_restrict_tbl_ptr;
+	uint8_t ram_restrict_group_count;
 
 	uint16_t some_script_ptr; /* BIT I + 14 */
 	uint16_t init96_tbl_ptr; /* BIT I + 16 */
@@ -192,6 +243,7 @@ struct nvbios {
 	struct {
 		struct dcb_entry *output;
 		uint16_t script_table_ptr;
+		uint16_t dp_table_ptr;
 	} display;
 
 	struct {
@@ -207,7 +259,9 @@ struct nvbios {
 		bool dual_link;
 		bool link_c_increment;
 		bool BITbit1;
+		bool if_is_24bit;
 		int duallink_transition_clk;
+		uint8_t strapless_is_24bit;
 		uint8_t *edid;
 
 		/* will need resetting after suspend */
diff --git a/drivers/gpu/drm/nouveau/nouveau_bo.c b/drivers/gpu/drm/nouveau/nouveau_bo.c
index 1193652..e342a41 100644
--- a/drivers/gpu/drm/nouveau/nouveau_bo.c
+++ b/drivers/gpu/drm/nouveau/nouveau_bo.c
@@ -33,10 +33,13 @@
 #include "nouveau_drv.h"
 #include "nouveau_dma.h"
 
+#include <linux/log2.h>
+
 static void
 nouveau_bo_del_ttm(struct ttm_buffer_object *bo)
 {
 	struct drm_nouveau_private *dev_priv = nouveau_bdev(bo->bdev);
+	struct drm_device *dev = dev_priv->dev;
 	struct nouveau_bo *nvbo = nouveau_bo(bo);
 
 	ttm_bo_kunmap(&nvbo->kmap);
@@ -44,6 +47,9 @@ nouveau_bo_del_ttm(struct ttm_buffer_object *bo)
 	if (unlikely(nvbo->gem))
 		DRM_ERROR("bo %p still attached to GEM object\n", bo);
 
+	if (nvbo->tile)
+		nv10_mem_expire_tiling(dev, nvbo->tile, NULL);
+
 	spin_lock(&dev_priv->ttm.bo_list_lock);
 	list_del(&nvbo->head);
 	spin_unlock(&dev_priv->ttm.bo_list_lock);
@@ -343,8 +349,10 @@ nouveau_bo_create_ttm_backend_entry(struct ttm_bo_device *bdev)
 	struct drm_device *dev = dev_priv->dev;
 
 	switch (dev_priv->gart_info.type) {
+#if __OS_HAS_AGP
 	case NOUVEAU_GART_AGP:
 		return ttm_agp_backend_init(bdev, dev->agp->bridge);
+#endif
 	case NOUVEAU_GART_SGDMA:
 		return nouveau_sgdma_init_ttm(dev);
 	default:
@@ -446,6 +454,7 @@ nouveau_bo_evict_flags(struct ttm_buffer_object *bo, struct ttm_placement *pl)
 /* GPU-assisted copy using NV_MEMORY_TO_MEMORY_FORMAT, can access
  * TTM_PL_{VRAM,TT} directly.
  */
+
 static int
 nouveau_bo_move_accel_cleanup(struct nouveau_channel *chan,
 			      struct nouveau_bo *nvbo, bool evict, bool no_wait,
@@ -480,22 +489,20 @@ nouveau_bo_mem_ctxdma(struct nouveau_bo *nvbo, struct nouveau_channel *chan,
 }
 
 static int
-nouveau_bo_move_m2mf(struct ttm_buffer_object *bo, int evict, int no_wait,
-		     struct ttm_mem_reg *old_mem, struct ttm_mem_reg *new_mem)
+nouveau_bo_move_m2mf(struct ttm_buffer_object *bo, int evict, bool intr,
+		     int no_wait, struct ttm_mem_reg *new_mem)
 {
 	struct nouveau_bo *nvbo = nouveau_bo(bo);
 	struct drm_nouveau_private *dev_priv = nouveau_bdev(bo->bdev);
+	struct ttm_mem_reg *old_mem = &bo->mem;
 	struct nouveau_channel *chan;
 	uint64_t src_offset, dst_offset;
 	uint32_t page_count;
 	int ret;
 
 	chan = nvbo->channel;
-	if (!chan || nvbo->tile_flags || nvbo->no_vm) {
+	if (!chan || nvbo->tile_flags || nvbo->no_vm)
 		chan = dev_priv->channel;
-		if (!chan)
-			return -EINVAL;
-	}
 
 	src_offset = old_mem->mm_node->start << PAGE_SHIFT;
 	dst_offset = new_mem->mm_node->start << PAGE_SHIFT;
@@ -587,7 +594,7 @@ nouveau_bo_move_flipd(struct ttm_buffer_object *bo, bool evict, bool intr,
 	if (ret)
 		goto out;
 
-	ret = nouveau_bo_move_m2mf(bo, true, no_wait, &bo->mem, &tmp_mem);
+	ret = nouveau_bo_move_m2mf(bo, true, intr, no_wait, &tmp_mem);
 	if (ret)
 		goto out;
 
@@ -625,7 +632,7 @@ nouveau_bo_move_flips(struct ttm_buffer_object *bo, bool evict, bool intr,
 	if (ret)
 		goto out;
 
-	ret = nouveau_bo_move_m2mf(bo, true, no_wait, &bo->mem, new_mem);
+	ret = nouveau_bo_move_m2mf(bo, evict, intr, no_wait, new_mem);
 	if (ret)
 		goto out;
 
@@ -640,51 +647,106 @@ out:
 }
 
 static int
-nouveau_bo_move(struct ttm_buffer_object *bo, bool evict, bool intr,
-		bool no_wait, struct ttm_mem_reg *new_mem)
+nouveau_bo_vm_bind(struct ttm_buffer_object *bo, struct ttm_mem_reg *new_mem,
+		   struct nouveau_tile_reg **new_tile)
 {
 	struct drm_nouveau_private *dev_priv = nouveau_bdev(bo->bdev);
-	struct nouveau_bo *nvbo = nouveau_bo(bo);
 	struct drm_device *dev = dev_priv->dev;
-	struct ttm_mem_reg *old_mem = &bo->mem;
+	struct nouveau_bo *nvbo = nouveau_bo(bo);
+	uint64_t offset;
 	int ret;
 
-	if (dev_priv->card_type == NV_50 &&
-	    (new_mem->mem_type == TTM_PL_VRAM) && !nvbo->no_vm) {
-		uint64_t offset = new_mem->mm_node->start << PAGE_SHIFT;
+	if (nvbo->no_vm || new_mem->mem_type != TTM_PL_VRAM) {
+		/* Nothing to do. */
+		*new_tile = NULL;
+		return 0;
+	}
+
+	offset = new_mem->mm_node->start << PAGE_SHIFT;
 
+	if (dev_priv->card_type == NV_50) {
 		ret = nv50_mem_vm_bind_linear(dev,
 					      offset + dev_priv->vm_vram_base,
 					      new_mem->size, nvbo->tile_flags,
 					      offset);
 		if (ret)
 			return ret;
+
+	} else if (dev_priv->card_type >= NV_10) {
+		*new_tile = nv10_mem_set_tiling(dev, offset, new_mem->size,
+						nvbo->tile_mode);
 	}
 
-	if (dev_priv->init_state != NOUVEAU_CARD_INIT_DONE)
-		return ttm_bo_move_memcpy(bo, evict, no_wait, new_mem);
+	return 0;
+}
+
+static void
+nouveau_bo_vm_cleanup(struct ttm_buffer_object *bo,
+		      struct nouveau_tile_reg *new_tile,
+		      struct nouveau_tile_reg **old_tile)
+{
+	struct drm_nouveau_private *dev_priv = nouveau_bdev(bo->bdev);
+	struct drm_device *dev = dev_priv->dev;
+
+	if (dev_priv->card_type >= NV_10 &&
+	    dev_priv->card_type < NV_50) {
+		if (*old_tile)
+			nv10_mem_expire_tiling(dev, *old_tile, bo->sync_obj);
 
+		*old_tile = new_tile;
+	}
+}
+
+static int
+nouveau_bo_move(struct ttm_buffer_object *bo, bool evict, bool intr,
+		bool no_wait, struct ttm_mem_reg *new_mem)
+{
+	struct drm_nouveau_private *dev_priv = nouveau_bdev(bo->bdev);
+	struct nouveau_bo *nvbo = nouveau_bo(bo);
+	struct ttm_mem_reg *old_mem = &bo->mem;
+	struct nouveau_tile_reg *new_tile = NULL;
+	int ret = 0;
+
+	ret = nouveau_bo_vm_bind(bo, new_mem, &new_tile);
+	if (ret)
+		return ret;
+
+	/* Software copy if the card isn't up and running yet. */
+	if (dev_priv->init_state != NOUVEAU_CARD_INIT_DONE ||
+	    !dev_priv->channel) {
+		ret = ttm_bo_move_memcpy(bo, evict, no_wait, new_mem);
+		goto out;
+	}
+
+	/* Fake bo copy. */
 	if (old_mem->mem_type == TTM_PL_SYSTEM && !bo->ttm) {
 		BUG_ON(bo->mem.mm_node != NULL);
 		bo->mem = *new_mem;
 		new_mem->mm_node = NULL;
-		return 0;
+		goto out;
 	}
 
-	if (new_mem->mem_type == TTM_PL_SYSTEM) {
-		if (old_mem->mem_type == TTM_PL_SYSTEM)
-			return ttm_bo_move_memcpy(bo, evict, no_wait, new_mem);
-		if (nouveau_bo_move_flipd(bo, evict, intr, no_wait, new_mem))
-			return ttm_bo_move_memcpy(bo, evict, no_wait, new_mem);
-	} else if (old_mem->mem_type == TTM_PL_SYSTEM) {
-		if (nouveau_bo_move_flips(bo, evict, intr, no_wait, new_mem))
-			return ttm_bo_move_memcpy(bo, evict, no_wait, new_mem);
-	} else {
-		if (nouveau_bo_move_m2mf(bo, evict, no_wait, old_mem, new_mem))
-			return ttm_bo_move_memcpy(bo, evict, no_wait, new_mem);
-	}
+	/* Hardware assisted copy. */
+	if (new_mem->mem_type == TTM_PL_SYSTEM)
+		ret = nouveau_bo_move_flipd(bo, evict, intr, no_wait, new_mem);
+	else if (old_mem->mem_type == TTM_PL_SYSTEM)
+		ret = nouveau_bo_move_flips(bo, evict, intr, no_wait, new_mem);
+	else
+		ret = nouveau_bo_move_m2mf(bo, evict, intr, no_wait, new_mem);
 
-	return 0;
+	if (!ret)
+		goto out;
+
+	/* Fallback to software copy. */
+	ret = ttm_bo_move_memcpy(bo, evict, no_wait, new_mem);
+
+out:
+	if (ret)
+		nouveau_bo_vm_cleanup(bo, NULL, &new_tile);
+	else
+		nouveau_bo_vm_cleanup(bo, new_tile, &nvbo->tile);
+
+	return ret;
 }
 
 static int
diff --git a/drivers/gpu/drm/nouveau/nouveau_calc.c b/drivers/gpu/drm/nouveau/nouveau_calc.c
index 3f80db8..ee2b845 100644
--- a/drivers/gpu/drm/nouveau/nouveau_calc.c
+++ b/drivers/gpu/drm/nouveau/nouveau_calc.c
@@ -34,35 +34,31 @@
 \****************************************************************************/
 
 struct nv_fifo_info {
-	int graphics_lwm;
-	int video_lwm;
-	int graphics_burst_size;
-	int video_burst_size;
-	bool valid;
+	int lwm;
+	int burst;
 };
 
 struct nv_sim_state {
 	int pclk_khz;
 	int mclk_khz;
 	int nvclk_khz;
-	int pix_bpp;
-	bool enable_mp;
-	bool enable_video;
+	int bpp;
 	int mem_page_miss;
 	int mem_latency;
 	int memory_type;
 	int memory_width;
+	int two_heads;
 };
 
 static void
-nv4CalcArbitration(struct nv_fifo_info *fifo, struct nv_sim_state *arb)
+nv04_calc_arb(struct nv_fifo_info *fifo, struct nv_sim_state *arb)
 {
-	int pagemiss, cas, width, video_enable, bpp;
-	int nvclks, mclks, pclks, vpagemiss, crtpagemiss, vbs;
+	int pagemiss, cas, width, bpp;
+	int nvclks, mclks, pclks, crtpagemiss;
 	int found, mclk_extra, mclk_loop, cbs, m1, p1;
-	int mclk_freq, pclk_freq, nvclk_freq, mp_enable;
-	int us_m, us_n, us_p, video_drain_rate, crtc_drain_rate;
-	int vpm_us, us_video, vlwm, video_fill_us, cpm_us, us_crt, clwm;
+	int mclk_freq, pclk_freq, nvclk_freq;
+	int us_m, us_n, us_p, crtc_drain_rate;
+	int cpm_us, us_crt, clwm;
 
 	pclk_freq = arb->pclk_khz;
 	mclk_freq = arb->mclk_khz;
@@ -70,278 +66,136 @@ nv4CalcArbitration(struct nv_fifo_info *fifo, struct nv_sim_state *arb)
 	pagemiss = arb->mem_page_miss;
 	cas = arb->mem_latency;
 	width = arb->memory_width >> 6;
-	video_enable = arb->enable_video;
-	bpp = arb->pix_bpp;
-	mp_enable = arb->enable_mp;
-	clwm = 0;
-	vlwm = 0;
+	bpp = arb->bpp;
 	cbs = 128;
+
 	pclks = 2;
-	nvclks = 2;
-	nvclks += 2;
-	nvclks += 1;
-	mclks = 5;
-	mclks += 3;
-	mclks += 1;
-	mclks += cas;
-	mclks += 1;
-	mclks += 1;
-	mclks += 1;
-	mclks += 1;
+	nvclks = 10;
+	mclks = 13 + cas;
 	mclk_extra = 3;
-	nvclks += 2;
-	nvclks += 1;
-	nvclks += 1;
-	nvclks += 1;
-	if (mp_enable)
-		mclks += 4;
-	nvclks += 0;
-	pclks += 0;
 	found = 0;
-	vbs = 0;
-	while (found != 1) {
-		fifo->valid = true;
+
+	while (!found) {
 		found = 1;
+
 		mclk_loop = mclks + mclk_extra;
 		us_m = mclk_loop * 1000 * 1000 / mclk_freq;
 		us_n = nvclks * 1000 * 1000 / nvclk_freq;
 		us_p = nvclks * 1000 * 1000 / pclk_freq;
-		if (video_enable) {
-			video_drain_rate = pclk_freq * 2;
-			crtc_drain_rate = pclk_freq * bpp / 8;
-			vpagemiss = 2;
-			vpagemiss += 1;
-			crtpagemiss = 2;
-			vpm_us = vpagemiss * pagemiss * 1000 * 1000 / mclk_freq;
-			if (nvclk_freq * 2 > mclk_freq * width)
-				video_fill_us = cbs * 1000 * 1000 / 16 / nvclk_freq;
-			else
-				video_fill_us = cbs * 1000 * 1000 / (8 * width) / mclk_freq;
-			us_video = vpm_us + us_m + us_n + us_p + video_fill_us;
-			vlwm = us_video * video_drain_rate / (1000 * 1000);
-			vlwm++;
-			vbs = 128;
-			if (vlwm > 128)
-				vbs = 64;
-			if (vlwm > (256 - 64))
-				vbs = 32;
-			if (nvclk_freq * 2 > mclk_freq * width)
-				video_fill_us = vbs * 1000 * 1000 / 16 / nvclk_freq;
-			else
-				video_fill_us = vbs * 1000 * 1000 / (8 * width) / mclk_freq;
-			cpm_us = crtpagemiss * pagemiss * 1000 * 1000 / mclk_freq;
-			us_crt = us_video + video_fill_us + cpm_us + us_m + us_n + us_p;
-			clwm = us_crt * crtc_drain_rate / (1000 * 1000);
-			clwm++;
-		} else {
-			crtc_drain_rate = pclk_freq * bpp / 8;
-			crtpagemiss = 2;
-			crtpagemiss += 1;
-			cpm_us = crtpagemiss * pagemiss * 1000 * 1000 / mclk_freq;
-			us_crt = cpm_us + us_m + us_n + us_p;
-			clwm = us_crt * crtc_drain_rate / (1000 * 1000);
-			clwm++;
-		}
+
+		crtc_drain_rate = pclk_freq * bpp / 8;
+		crtpagemiss = 2;
+		crtpagemiss += 1;
+		cpm_us = crtpagemiss * pagemiss * 1000 * 1000 / mclk_freq;
+		us_crt = cpm_us + us_m + us_n + us_p;
+		clwm = us_crt * crtc_drain_rate / (1000 * 1000);
+		clwm++;
+
 		m1 = clwm + cbs - 512;
 		p1 = m1 * pclk_freq / mclk_freq;
 		p1 = p1 * bpp / 8;
-		if ((p1 < m1 && m1 > 0) ||
-		    (video_enable && (clwm > 511 || vlwm > 255)) ||
-		    (!video_enable && clwm > 519)) {
-			fifo->valid = false;
+		if ((p1 < m1 && m1 > 0) || clwm > 519) {
 			found = !mclk_extra;
 			mclk_extra--;
 		}
 		if (clwm < 384)
 			clwm = 384;
-		if (vlwm < 128)
-			vlwm = 128;
-		fifo->graphics_lwm = clwm;
-		fifo->graphics_burst_size = 128;
-		fifo->video_lwm = vlwm + 15;
-		fifo->video_burst_size = vbs;
+
+		fifo->lwm = clwm;
+		fifo->burst = cbs;
 	}
 }
 
 static void
-nv10CalcArbitration(struct nv_fifo_info *fifo, struct nv_sim_state *arb)
+nv10_calc_arb(struct nv_fifo_info *fifo, struct nv_sim_state *arb)
 {
-	int pagemiss, width, video_enable, bpp;
-	int nvclks, mclks, pclks, vpagemiss, crtpagemiss;
-	int nvclk_fill;
-	int found, mclk_extra, mclk_loop, cbs, m1;
-	int mclk_freq, pclk_freq, nvclk_freq, mp_enable;
-	int us_m, us_m_min, us_n, us_p, crtc_drain_rate;
-	int vus_m;
-	int vpm_us, us_video, cpm_us, us_crt, clwm;
-	int clwm_rnd_down, min_clwm;
-	int m2us, us_pipe_min, p1clk, p2;
-	int min_mclk_extra;
-	int us_min_mclk_extra;
-
-	pclk_freq = arb->pclk_khz;	/* freq in KHz */
-	mclk_freq = arb->mclk_khz;
+	int fill_rate, drain_rate;
+	int pclks, nvclks, mclks, xclks;
+	int pclk_freq, nvclk_freq, mclk_freq;
+	int fill_lat, extra_lat;
+	int max_burst_o, max_burst_l;
+	int fifo_len, min_lwm, max_lwm;
+	const int burst_lat = 80; /* Maximum allowable latency due
+				   * to the CRTC FIFO burst. (ns) */
+
+	pclk_freq = arb->pclk_khz;
 	nvclk_freq = arb->nvclk_khz;
-	pagemiss = arb->mem_page_miss;
-	width = arb->memory_width / 64;
-	video_enable = arb->enable_video;
-	bpp = arb->pix_bpp;
-	mp_enable = arb->enable_mp;
-	clwm = 0;
-	cbs = 512;
+	mclk_freq = arb->mclk_khz;
+
+	fill_rate = mclk_freq * arb->memory_width / 8; /* kB/s */
+	drain_rate = pclk_freq * arb->bpp / 8; /* kB/s */
+
+	fifo_len = arb->two_heads ? 1536 : 1024; /* B */
+
+	/* Fixed FIFO refill latency. */
+
 	pclks = 4;	/* lwm detect. */
-	nvclks = 3;	/* lwm -> sync. */
-	nvclks += 2;	/* fbi bus cycles (1 req + 1 busy) */
-	mclks = 1;	/* 2 edge sync.  may be very close to edge so just put one. */
-	mclks += 1;	/* arb_hp_req */
-	mclks += 5;	/* ap_hp_req   tiling pipeline */
-	mclks += 2;	/* tc_req     latency fifo */
-	mclks += 2;	/* fb_cas_n_  memory request to fbio block */
-	mclks += 7;	/* sm_d_rdv   data returned from fbio block */
-
-	/* fb.rd.d.Put_gc   need to accumulate 256 bits for read */
-	if (arb->memory_type == 0) {
-		if (arb->memory_width == 64)	/* 64 bit bus */
-			mclks += 4;
-		else
-			mclks += 2;
-	} else if (arb->memory_width == 64)	/* 64 bit bus */
-		mclks += 2;
-	else
-		mclks += 1;
 
-	if (!video_enable && arb->memory_width == 128) {
-		mclk_extra = (bpp == 32) ? 31 : 42;	/* Margin of error */
-		min_mclk_extra = 17;
-	} else {
-		mclk_extra = (bpp == 32) ? 8 : 4;	/* Margin of error */
-		/* mclk_extra = 4; *//* Margin of error */
-		min_mclk_extra = 18;
-	}
+	nvclks = 3	/* lwm -> sync. */
+		+ 2	/* fbi bus cycles (1 req + 1 busy) */
+		+ 1	/* 2 edge sync.  may be very close to edge so
+			 * just put one. */
+		+ 1	/* fbi_d_rdv_n */
+		+ 1	/* Fbi_d_rdata */
+		+ 1;	/* crtfifo load */
 
-	nvclks += 1;	/* 2 edge sync.  may be very close to edge so just put one. */
-	nvclks += 1;	/* fbi_d_rdv_n */
-	nvclks += 1;	/* Fbi_d_rdata */
-	nvclks += 1;	/* crtfifo load */
+	mclks = 1	/* 2 edge sync.  may be very close to edge so
+			 * just put one. */
+		+ 1	/* arb_hp_req */
+		+ 5	/* tiling pipeline */
+		+ 2	/* latency fifo */
+		+ 2	/* memory request to fbio block */
+		+ 7;	/* data returned from fbio block */
 
-	if (mp_enable)
-		mclks += 4;	/* Mp can get in with a burst of 8. */
-	/* Extra clocks determined by heuristics */
+	/* Need to accumulate 256 bits for read */
+	mclks += (arb->memory_type == 0 ? 2 : 1)
+		* arb->memory_width / 32;
 
-	nvclks += 0;
-	pclks += 0;
-	found = 0;
-	while (found != 1) {
-		fifo->valid = true;
-		found = 1;
-		mclk_loop = mclks + mclk_extra;
-		us_m = mclk_loop * 1000 * 1000 / mclk_freq;	/* Mclk latency in us */
-		us_m_min = mclks * 1000 * 1000 / mclk_freq;	/* Minimum Mclk latency in us */
-		us_min_mclk_extra = min_mclk_extra * 1000 * 1000 / mclk_freq;
-		us_n = nvclks * 1000 * 1000 / nvclk_freq;	/* nvclk latency in us */
-		us_p = pclks * 1000 * 1000 / pclk_freq;	/* nvclk latency in us */
-		us_pipe_min = us_m_min + us_n + us_p;
-
-		vus_m = mclk_loop * 1000 * 1000 / mclk_freq;	/* Mclk latency in us */
-
-		if (video_enable) {
-			crtc_drain_rate = pclk_freq * bpp / 8;	/* MB/s */
-
-			vpagemiss = 1;	/* self generating page miss */
-			vpagemiss += 1;	/* One higher priority before */
-
-			crtpagemiss = 2;	/* self generating page miss */
-			if (mp_enable)
-				crtpagemiss += 1;	/* if MA0 conflict */
-
-			vpm_us = vpagemiss * pagemiss * 1000 * 1000 / mclk_freq;
-
-			us_video = vpm_us + vus_m;	/* Video has separate read return path */
-
-			cpm_us = crtpagemiss * pagemiss * 1000 * 1000 / mclk_freq;
-			us_crt = us_video	/* Wait for video */
-				 + cpm_us	/* CRT Page miss */
-				 + us_m + us_n + us_p;	/* other latency */
-
-			clwm = us_crt * crtc_drain_rate / (1000 * 1000);
-			clwm++;	/* fixed point <= float_point - 1.  Fixes that */
-		} else {
-			crtc_drain_rate = pclk_freq * bpp / 8;	/* bpp * pclk/8 */
-
-			crtpagemiss = 1;	/* self generating page miss */
-			crtpagemiss += 1;	/* MA0 page miss */
-			if (mp_enable)
-				crtpagemiss += 1;	/* if MA0 conflict */
-			cpm_us = crtpagemiss * pagemiss * 1000 * 1000 / mclk_freq;
-			us_crt = cpm_us + us_m + us_n + us_p;
-			clwm = us_crt * crtc_drain_rate / (1000 * 1000);
-			clwm++;	/* fixed point <= float_point - 1.  Fixes that */
-
-			/* Finally, a heuristic check when width == 64 bits */
-			if (width == 1) {
-				nvclk_fill = nvclk_freq * 8;
-				if (crtc_drain_rate * 100 >= nvclk_fill * 102)
-					clwm = 0xfff;	/* Large number to fail */
-				else if (crtc_drain_rate * 100 >= nvclk_fill * 98) {
-					clwm = 1024;
-					cbs = 512;
-				}
-			}
-		}
+	fill_lat = mclks * 1000 * 1000 / mclk_freq   /* minimum mclk latency */
+		+ nvclks * 1000 * 1000 / nvclk_freq  /* nvclk latency */
+		+ pclks * 1000 * 1000 / pclk_freq;   /* pclk latency */
 
-		/*
-		 * Overfill check:
-		 */
-
-		clwm_rnd_down = (clwm / 8) * 8;
-		if (clwm_rnd_down < clwm)
-			clwm += 8;
-
-		m1 = clwm + cbs - 1024;	/* Amount of overfill */
-		m2us = us_pipe_min + us_min_mclk_extra;
-
-		/* pclk cycles to drain */
-		p1clk = m2us * pclk_freq / (1000 * 1000);
-		p2 = p1clk * bpp / 8;	/* bytes drained. */
-
-		if (p2 < m1 && m1 > 0) {
-			fifo->valid = false;
-			found = 0;
-			if (min_mclk_extra == 0) {
-				if (cbs <= 32)
-					found = 1;	/* Can't adjust anymore! */
-				else
-					cbs = cbs / 2;	/* reduce the burst size */
-			} else
-				min_mclk_extra--;
-		} else if (clwm > 1023) {	/* Have some margin */
-			fifo->valid = false;
-			found = 0;
-			if (min_mclk_extra == 0)
-				found = 1;	/* Can't adjust anymore! */
-			else
-				min_mclk_extra--;
-		}
+	/* Conditional FIFO refill latency. */
 
-		/* This correction works around a slight snow effect
-		 * when the TV and VGA outputs are enabled simultaneously. */
-		min_clwm = 1024 - cbs + 128 * pclk_freq / 100000;
-		if (clwm < min_clwm)
-			clwm = min_clwm;
+	xclks = 2 * arb->mem_page_miss + mclks /* Extra latency due to
+						* the overlay. */
+		+ 2 * arb->mem_page_miss       /* Extra pagemiss latency. */
+		+ (arb->bpp == 32 ? 8 : 4);    /* Margin of error. */
 
-		/*  printf("CRT LWM: prog: 0x%x, bs: 256\n", clwm); */
-		fifo->graphics_lwm = clwm;
-		fifo->graphics_burst_size = cbs;
+	extra_lat = xclks * 1000 * 1000 / mclk_freq;
 
-		fifo->video_lwm = 1024;
-		fifo->video_burst_size = 512;
-	}
+	if (arb->two_heads)
+		/* Account for another CRTC. */
+		extra_lat += fill_lat + extra_lat + burst_lat;
+
+	/* FIFO burst */
+
+	/* Max burst not leading to overflows. */
+	max_burst_o = (1 + fifo_len - extra_lat * drain_rate / (1000 * 1000))
+		* (fill_rate / 1000) / ((fill_rate - drain_rate) / 1000);
+	fifo->burst = min(max_burst_o, 1024);
+
+	/* Max burst value with an acceptable latency. */
+	max_burst_l = burst_lat * fill_rate / (1000 * 1000);
+	fifo->burst = min(max_burst_l, fifo->burst);
+
+	fifo->burst = rounddown_pow_of_two(fifo->burst);
+
+	/* FIFO low watermark */
+
+	min_lwm = (fill_lat + extra_lat) * drain_rate / (1000 * 1000) + 1;
+	max_lwm = fifo_len - fifo->burst
+		+ fill_lat * drain_rate / (1000 * 1000)
+		+ fifo->burst * drain_rate / fill_rate;
+
+	fifo->lwm = min_lwm + 10 * (max_lwm - min_lwm) / 100; /* Empirical. */
 }
 
 static void
-nv4_10UpdateArbitrationSettings(struct drm_device *dev, int VClk, int bpp,
-				int *burst, int *lwm)
+nv04_update_arb(struct drm_device *dev, int VClk, int bpp,
+		int *burst, int *lwm)
 {
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	struct nv_fifo_info fifo_data;
 	struct nv_sim_state sim_data;
 	int MClk = nouveau_hw_get_clock(dev, MPLL);
@@ -351,43 +205,36 @@ nv4_10UpdateArbitrationSettings(struct drm_device *dev, int VClk, int bpp,
 	sim_data.pclk_khz = VClk;
 	sim_data.mclk_khz = MClk;
 	sim_data.nvclk_khz = NVClk;
-	sim_data.pix_bpp = bpp;
-	sim_data.enable_mp = false;
+	sim_data.bpp = bpp;
+	sim_data.two_heads = nv_two_heads(dev);
 	if ((dev->pci_device & 0xffff) == 0x01a0 /*CHIPSET_NFORCE*/ ||
 	    (dev->pci_device & 0xffff) == 0x01f0 /*CHIPSET_NFORCE2*/) {
 		uint32_t type;
 
 		pci_read_config_dword(pci_get_bus_and_slot(0, 1), 0x7c, &type);
 
-		sim_data.enable_video = false;
 		sim_data.memory_type = (type >> 12) & 1;
 		sim_data.memory_width = 64;
 		sim_data.mem_latency = 3;
 		sim_data.mem_page_miss = 10;
 	} else {
-		sim_data.enable_video = (nv_arch(dev) != NV_04);
 		sim_data.memory_type = nvReadFB(dev, NV_PFB_CFG0) & 0x1;
 		sim_data.memory_width = (nvReadEXTDEV(dev, NV_PEXTDEV_BOOT_0) & 0x10) ? 128 : 64;
 		sim_data.mem_latency = cfg1 & 0xf;
 		sim_data.mem_page_miss = ((cfg1 >> 4) & 0xf) + ((cfg1 >> 31) & 0x1);
 	}
 
-	if (nv_arch(dev) == NV_04)
-		nv4CalcArbitration(&fifo_data, &sim_data);
+	if (dev_priv->card_type == NV_04)
+		nv04_calc_arb(&fifo_data, &sim_data);
 	else
-		nv10CalcArbitration(&fifo_data, &sim_data);
-
-	if (fifo_data.valid) {
-		int b = fifo_data.graphics_burst_size >> 4;
-		*burst = 0;
-		while (b >>= 1)
-			(*burst)++;
-		*lwm = fifo_data.graphics_lwm >> 3;
-	}
+		nv10_calc_arb(&fifo_data, &sim_data);
+
+	*burst = ilog2(fifo_data.burst >> 4);
+	*lwm = fifo_data.lwm >> 3;
 }
 
 static void
-nv30UpdateArbitrationSettings(int *burst, int *lwm)
+nv30_update_arb(int *burst, int *lwm)
 {
 	unsigned int fifo_size, burst_size, graphics_lwm;
 
@@ -395,24 +242,23 @@ nv30UpdateArbitrationSettings(int *burst, int *lwm)
 	burst_size = 512;
 	graphics_lwm = fifo_size - burst_size;
 
-	*burst = 0;
-	burst_size >>= 5;
-	while (burst_size >>= 1)
-		(*burst)++;
+	*burst = ilog2(burst_size >> 5);
 	*lwm = graphics_lwm >> 3;
 }
 
 void
 nouveau_calc_arb(struct drm_device *dev, int vclk, int bpp, int *burst, int *lwm)
 {
-	if (nv_arch(dev) < NV_30)
-		nv4_10UpdateArbitrationSettings(dev, vclk, bpp, burst, lwm);
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+
+	if (dev_priv->card_type < NV_30)
+		nv04_update_arb(dev, vclk, bpp, burst, lwm);
 	else if ((dev->pci_device & 0xfff0) == 0x0240 /*CHIPSET_C51*/ ||
 		 (dev->pci_device & 0xfff0) == 0x03d0 /*CHIPSET_C512*/) {
 		*burst = 128;
 		*lwm = 0x0480;
 	} else
-		nv30UpdateArbitrationSettings(burst, lwm);
+		nv30_update_arb(burst, lwm);
 }
 
 static int
@@ -432,40 +278,46 @@ getMNP_single(struct drm_device *dev, struct pll_lims *pll_lim, int clk,
 	int minvco = pll_lim->vco1.minfreq, maxvco = pll_lim->vco1.maxfreq;
 	int minM = pll_lim->vco1.min_m, maxM = pll_lim->vco1.max_m;
 	int minN = pll_lim->vco1.min_n, maxN = pll_lim->vco1.max_n;
-	int minU = pll_lim->vco1.min_inputfreq, maxU = pll_lim->vco1.max_inputfreq;
-	int maxlog2P = pll_lim->max_usable_log2p;
+	int minU = pll_lim->vco1.min_inputfreq;
+	int maxU = pll_lim->vco1.max_inputfreq;
+	int minP = pll_lim->max_p ? pll_lim->min_p : 0;
+	int maxP = pll_lim->max_p ? pll_lim->max_p : pll_lim->max_usable_log2p;
 	int crystal = pll_lim->refclk;
-	int M, N, log2P, P;
+	int M, N, thisP, P;
 	int clkP, calcclk;
 	int delta, bestdelta = INT_MAX;
 	int bestclk = 0;
 
 	/* this division verified for nv20, nv18, nv28 (Haiku), and nv34 */
 	/* possibly correlated with introduction of 27MHz crystal */
-	if (cv < 0x17 || cv == 0x1a || cv == 0x20) {
-		if (clk > 250000)
-			maxM = 6;
-		if (clk > 340000)
-			maxM = 2;
-	} else if (cv < 0x40) {
-		if (clk > 150000)
-			maxM = 6;
-		if (clk > 200000)
-			maxM = 4;
-		if (clk > 340000)
-			maxM = 2;
+	if (dev_priv->card_type < NV_50) {
+		if (cv < 0x17 || cv == 0x1a || cv == 0x20) {
+			if (clk > 250000)
+				maxM = 6;
+			if (clk > 340000)
+				maxM = 2;
+		} else if (cv < 0x40) {
+			if (clk > 150000)
+				maxM = 6;
+			if (clk > 200000)
+				maxM = 4;
+			if (clk > 340000)
+				maxM = 2;
+		}
 	}
 
-	if ((clk << maxlog2P) < minvco) {
-		minvco = clk << maxlog2P;
+	P = pll_lim->max_p ? maxP : (1 << maxP);
+	if ((clk * P) < minvco) {
+		minvco = clk * maxP;
 		maxvco = minvco * 2;
 	}
+
 	if (clk + clk/200 > maxvco)	/* +0.5% */
 		maxvco = clk + clk/200;
 
 	/* NV34 goes maxlog2P->0, NV20 goes 0->maxlog2P */
-	for (log2P = 0; log2P <= maxlog2P; log2P++) {
-		P = 1 << log2P;
+	for (thisP = minP; thisP <= maxP; thisP++) {
+		P = pll_lim->max_p ? thisP : (1 << thisP);
 		clkP = clk * P;
 
 		if (clkP < minvco)
@@ -498,7 +350,7 @@ getMNP_single(struct drm_device *dev, struct pll_lims *pll_lim, int clk,
 				bestclk = calcclk;
 				bestpv->N1 = N;
 				bestpv->M1 = M;
-				bestpv->log2P = log2P;
+				bestpv->log2P = thisP;
 				if (delta == 0)	/* except this one */
 					return bestclk;
 			}
diff --git a/drivers/gpu/drm/nouveau/nouveau_channel.c b/drivers/gpu/drm/nouveau/nouveau_channel.c
index 9aaa972..343d718 100644
--- a/drivers/gpu/drm/nouveau/nouveau_channel.c
+++ b/drivers/gpu/drm/nouveau/nouveau_channel.c
@@ -158,6 +158,8 @@ nouveau_channel_alloc(struct drm_device *dev, struct nouveau_channel **chan_ret,
 		return ret;
 	}
 
+	nouveau_dma_pre_init(chan);
+
 	/* Locate channel's user control regs */
 	if (dev_priv->card_type < NV_40)
 		user = NV03_USER(channel);
@@ -235,47 +237,6 @@ nouveau_channel_alloc(struct drm_device *dev, struct nouveau_channel **chan_ret,
 	return 0;
 }
 
-int
-nouveau_channel_idle(struct nouveau_channel *chan)
-{
-	struct drm_device *dev = chan->dev;
-	struct drm_nouveau_private *dev_priv = dev->dev_private;
-	struct nouveau_engine *engine = &dev_priv->engine;
-	uint32_t caches;
-	int idle;
-
-	if (!chan) {
-		NV_ERROR(dev, "no channel...\n");
-		return 1;
-	}
-
-	caches = nv_rd32(dev, NV03_PFIFO_CACHES);
-	nv_wr32(dev, NV03_PFIFO_CACHES, caches & ~1);
-
-	if (engine->fifo.channel_id(dev) != chan->id) {
-		struct nouveau_gpuobj *ramfc =
-			chan->ramfc ? chan->ramfc->gpuobj : NULL;
-
-		if (!ramfc) {
-			NV_ERROR(dev, "No RAMFC for channel %d\n", chan->id);
-			return 1;
-		}
-
-		engine->instmem.prepare_access(dev, false);
-		if (nv_ro32(dev, ramfc, 0) != nv_ro32(dev, ramfc, 1))
-			idle = 0;
-		else
-			idle = 1;
-		engine->instmem.finish_access(dev);
-	} else {
-		idle = (nv_rd32(dev, NV04_PFIFO_CACHE1_DMA_GET) ==
-			nv_rd32(dev, NV04_PFIFO_CACHE1_DMA_PUT));
-	}
-
-	nv_wr32(dev, NV03_PFIFO_CACHES, caches);
-	return idle;
-}
-
 /* stops a fifo */
 void
 nouveau_channel_free(struct nouveau_channel *chan)
@@ -414,7 +375,9 @@ nouveau_ioctl_fifo_alloc(struct drm_device *dev, void *data,
 		init->subchan[0].grclass = 0x0039;
 	else
 		init->subchan[0].grclass = 0x5039;
-	init->nr_subchan = 1;
+	init->subchan[1].handle = NvSw;
+	init->subchan[1].grclass = NV_SW;
+	init->nr_subchan = 2;
 
 	/* Named memory object area */
 	ret = drm_gem_handle_create(file_priv, chan->notifier_bo->gem,
diff --git a/drivers/gpu/drm/nouveau/nouveau_connector.c b/drivers/gpu/drm/nouveau/nouveau_connector.c
index 1e40ef0..5a10deb 100644
--- a/drivers/gpu/drm/nouveau/nouveau_connector.c
+++ b/drivers/gpu/drm/nouveau/nouveau_connector.c
@@ -86,7 +86,7 @@ nouveau_connector_destroy(struct drm_connector *drm_connector)
 	struct nouveau_connector *connector = nouveau_connector(drm_connector);
 	struct drm_device *dev = connector->base.dev;
 
-	NV_DEBUG(dev, "\n");
+	NV_DEBUG_KMS(dev, "\n");
 
 	if (!connector)
 		return;
@@ -248,9 +248,12 @@ nouveau_connector_detect(struct drm_connector *connector)
 			NV_ERROR(dev, "DDC responded, but no EDID for %s\n",
 				 drm_get_connector_name(connector));
 			return connector_status_disconnected;
-		} else
-		if (nv_encoder->dcb->type == OUTPUT_DP) {
-			NV_ERROR(dev, "Detected DP connected, ignoring!\n");
+		}
+
+		if (nv_encoder->dcb->type == OUTPUT_DP &&
+		    !nouveau_dp_detect(to_drm_encoder(nv_encoder))) {
+			NV_ERROR(dev, "Detected %s, but failed init\n",
+				 drm_get_connector_name(connector));
 			return connector_status_disconnected;
 		}
 
@@ -417,7 +420,7 @@ nouveau_connector_native_mode(struct nouveau_connector *connector)
 	/* Use preferred mode if there is one.. */
 	list_for_each_entry(mode, &connector->base.probed_modes, head) {
 		if (mode->type & DRM_MODE_TYPE_PREFERRED) {
-			NV_DEBUG(dev, "native mode from preferred\n");
+			NV_DEBUG_KMS(dev, "native mode from preferred\n");
 			return drm_mode_duplicate(dev, mode);
 		}
 	}
@@ -442,7 +445,7 @@ nouveau_connector_native_mode(struct nouveau_connector *connector)
 		largest = mode;
 	}
 
-	NV_DEBUG(dev, "native mode from largest: %dx%d@%d\n",
+	NV_DEBUG_KMS(dev, "native mode from largest: %dx%d@%d\n",
 		      high_w, high_h, high_v);
 	return largest ? drm_mode_duplicate(dev, largest) : NULL;
 }
@@ -556,6 +559,7 @@ nouveau_connector_mode_valid(struct drm_connector *connector,
 	struct nouveau_connector *nv_connector = nouveau_connector(connector);
 	struct nouveau_encoder *nv_encoder = nv_connector->detected_encoder;
 	unsigned min_clock = 25000, max_clock = min_clock;
+	unsigned clock = mode->clock;
 
 	switch (nv_encoder->dcb->type) {
 	case OUTPUT_LVDS:
@@ -583,12 +587,20 @@ nouveau_connector_mode_valid(struct drm_connector *connector,
 	case OUTPUT_TV:
 		return get_slave_funcs(nv_encoder)->
 			mode_valid(to_drm_encoder(nv_encoder), mode);
+	case OUTPUT_DP:
+		if (nv_encoder->dp.link_bw == DP_LINK_BW_2_7)
+			max_clock = nv_encoder->dp.link_nr * 270000;
+		else
+			max_clock = nv_encoder->dp.link_nr * 162000;
+
+		clock *= 3;
+		break;
 	}
 
-	if (mode->clock < min_clock)
+	if (clock < min_clock)
 		return MODE_CLOCK_LOW;
 
-	if (mode->clock > max_clock)
+	if (clock > max_clock)
 		return MODE_CLOCK_HIGH;
 
 	return MODE_OK;
@@ -663,9 +675,9 @@ nouveau_connector_create_lvds(struct drm_device *dev,
 	 * modeline is avalilable for the panel, set it as the panel's
 	 * native mode and exit.
 	 */
-	if (!nv_connector->edid &&
-	     nv_encoder->dcb->lvdsconf.use_straps_for_mode &&
-	     nouveau_bios_fp_mode(dev, &native)) {
+	if (!nv_connector->edid && nouveau_bios_fp_mode(dev, &native) &&
+	     (nv_encoder->dcb->lvdsconf.use_straps_for_mode ||
+	      dev_priv->VBIOS.pub.fp_no_ddc)) {
 		nv_connector->native_mode = drm_mode_duplicate(dev, &native);
 		goto out;
 	}
@@ -713,11 +725,12 @@ nouveau_connector_create(struct drm_device *dev, int index, int type)
 	struct drm_encoder *encoder;
 	int ret;
 
-	NV_DEBUG(dev, "\n");
+	NV_DEBUG_KMS(dev, "\n");
 
 	nv_connector = kzalloc(sizeof(*nv_connector), GFP_KERNEL);
 	if (!nv_connector)
 		return -ENOMEM;
+	nv_connector->dcb = nouveau_bios_connector_entry(dev, index);
 	connector = &nv_connector->base;
 
 	switch (type) {
diff --git a/drivers/gpu/drm/nouveau/nouveau_connector.h b/drivers/gpu/drm/nouveau/nouveau_connector.h
index 75dbe9b..728b809 100644
--- a/drivers/gpu/drm/nouveau/nouveau_connector.h
+++ b/drivers/gpu/drm/nouveau/nouveau_connector.h
@@ -33,15 +33,14 @@
 struct nouveau_connector {
 	struct drm_connector base;
 
-	struct drm_display_mode *native_mode;
+	struct dcb_connector_table_entry *dcb;
 
 	int scaling_mode;
-
 	bool use_dithering;
 
 	struct nouveau_encoder *detected_encoder;
-
 	struct edid *edid;
+	struct drm_display_mode *native_mode;
 };
 
 static inline struct nouveau_connector *nouveau_connector(
diff --git a/drivers/gpu/drm/nouveau/nouveau_dma.c b/drivers/gpu/drm/nouveau/nouveau_dma.c
index 7035536..7afbe8b 100644
--- a/drivers/gpu/drm/nouveau/nouveau_dma.c
+++ b/drivers/gpu/drm/nouveau/nouveau_dma.c
@@ -29,12 +29,22 @@
 #include "nouveau_drv.h"
 #include "nouveau_dma.h"
 
+void
+nouveau_dma_pre_init(struct nouveau_channel *chan)
+{
+	chan->dma.max  = (chan->pushbuf_bo->bo.mem.size >> 2) - 2;
+	chan->dma.put  = 0;
+	chan->dma.cur  = chan->dma.put;
+	chan->dma.free = chan->dma.max - chan->dma.cur;
+}
+
 int
 nouveau_dma_init(struct nouveau_channel *chan)
 {
 	struct drm_device *dev = chan->dev;
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	struct nouveau_gpuobj *m2mf = NULL;
+	struct nouveau_gpuobj *nvsw = NULL;
 	int ret, i;
 
 	/* Create NV_MEMORY_TO_MEMORY_FORMAT for buffer moves */
@@ -47,6 +57,15 @@ nouveau_dma_init(struct nouveau_channel *chan)
 	if (ret)
 		return ret;
 
+	/* Create an NV_SW object for various sync purposes */
+	ret = nouveau_gpuobj_sw_new(chan, NV_SW, &nvsw);
+	if (ret)
+		return ret;
+
+	ret = nouveau_gpuobj_ref_add(dev, chan, NvSw, nvsw, NULL);
+	if (ret)
+		return ret;
+
 	/* NV_MEMORY_TO_MEMORY_FORMAT requires a notifier object */
 	ret = nouveau_notifier_alloc(chan, NvNotify0, 32, &chan->m2mf_ntfy);
 	if (ret)
@@ -64,12 +83,6 @@ nouveau_dma_init(struct nouveau_channel *chan)
 			return ret;
 	}
 
-	/* Initialise DMA vars */
-	chan->dma.max  = (chan->pushbuf_bo->bo.mem.size >> 2) - 2;
-	chan->dma.put  = 0;
-	chan->dma.cur  = chan->dma.put;
-	chan->dma.free = chan->dma.max - chan->dma.cur;
-
 	/* Insert NOPS for NOUVEAU_DMA_SKIPS */
 	ret = RING_SPACE(chan, NOUVEAU_DMA_SKIPS);
 	if (ret)
@@ -87,6 +100,13 @@ nouveau_dma_init(struct nouveau_channel *chan)
 	BEGIN_RING(chan, NvSubM2MF, NV_MEMORY_TO_MEMORY_FORMAT_DMA_NOTIFY, 1);
 	OUT_RING(chan, NvNotify0);
 
+	/* Initialise NV_SW */
+	ret = RING_SPACE(chan, 2);
+	if (ret)
+		return ret;
+	BEGIN_RING(chan, NvSubSw, 0, 1);
+	OUT_RING(chan, NvSw);
+
 	/* Sit back and pray the channel works.. */
 	FIRE_RING(chan);
 
@@ -113,7 +133,7 @@ READ_GET(struct nouveau_channel *chan, uint32_t *get)
 
 	val = nvchan_rd32(chan, chan->user_get);
 	if (val < chan->pushbuf_base ||
-	    val >= chan->pushbuf_base + chan->pushbuf_bo->bo.mem.size) {
+	    val > chan->pushbuf_base + (chan->dma.max << 2)) {
 		/* meaningless to dma_wait() except to know whether the
 		 * GPU has stalled or not
 		 */
diff --git a/drivers/gpu/drm/nouveau/nouveau_dma.h b/drivers/gpu/drm/nouveau/nouveau_dma.h
index 04e85d8..dabfd65 100644
--- a/drivers/gpu/drm/nouveau/nouveau_dma.h
+++ b/drivers/gpu/drm/nouveau/nouveau_dma.h
@@ -46,10 +46,11 @@
 /* Hardcoded object assignments to subchannels (subchannel id). */
 enum {
 	NvSubM2MF	= 0,
-	NvSub2D		= 1,
-	NvSubCtxSurf2D  = 1,
-	NvSubGdiRect    = 2,
-	NvSubImageBlit  = 3
+	NvSubSw		= 1,
+	NvSub2D		= 2,
+	NvSubCtxSurf2D  = 2,
+	NvSubGdiRect    = 3,
+	NvSubImageBlit  = 4
 };
 
 /* Object handles. */
@@ -67,6 +68,7 @@ enum {
 	NvClipRect	= 0x8000000b,
 	NvGdiRect	= 0x8000000c,
 	NvImageBlit	= 0x8000000d,
+	NvSw		= 0x8000000e,
 
 	/* G80+ display objects */
 	NvEvoVRAM	= 0x01000000,
diff --git a/drivers/gpu/drm/nouveau/nouveau_dp.c b/drivers/gpu/drm/nouveau/nouveau_dp.c
new file mode 100644
index 0000000..9e2926c
--- /dev/null
+++ b/drivers/gpu/drm/nouveau/nouveau_dp.c
@@ -0,0 +1,569 @@
+/*
+ * Copyright 2009 Red Hat Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
+ * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+ * OTHER DEALINGS IN THE SOFTWARE.
+ *
+ * Authors: Ben Skeggs
+ */
+
+#include "drmP.h"
+#include "nouveau_drv.h"
+#include "nouveau_i2c.h"
+#include "nouveau_encoder.h"
+
+static int
+auxch_rd(struct drm_encoder *encoder, int address, uint8_t *buf, int size)
+{
+	struct drm_device *dev = encoder->dev;
+	struct nouveau_encoder *nv_encoder = nouveau_encoder(encoder);
+	struct nouveau_i2c_chan *auxch;
+	int ret;
+
+	auxch = nouveau_i2c_find(dev, nv_encoder->dcb->i2c_index);
+	if (!auxch)
+		return -ENODEV;
+
+	ret = nouveau_dp_auxch(auxch, 9, address, buf, size);
+	if (ret)
+		return ret;
+
+	return 0;
+}
+
+static int
+auxch_wr(struct drm_encoder *encoder, int address, uint8_t *buf, int size)
+{
+	struct drm_device *dev = encoder->dev;
+	struct nouveau_encoder *nv_encoder = nouveau_encoder(encoder);
+	struct nouveau_i2c_chan *auxch;
+	int ret;
+
+	auxch = nouveau_i2c_find(dev, nv_encoder->dcb->i2c_index);
+	if (!auxch)
+		return -ENODEV;
+
+	ret = nouveau_dp_auxch(auxch, 8, address, buf, size);
+	return ret;
+}
+
+static int
+nouveau_dp_lane_count_set(struct drm_encoder *encoder, uint8_t cmd)
+{
+	struct drm_device *dev = encoder->dev;
+	struct nouveau_encoder *nv_encoder = nouveau_encoder(encoder);
+	uint32_t tmp;
+	int or = nv_encoder->or, link = !(nv_encoder->dcb->sorconf.link & 1);
+
+	tmp  = nv_rd32(dev, NV50_SOR_DP_CTRL(or, link));
+	tmp &= ~(NV50_SOR_DP_CTRL_ENHANCED_FRAME_ENABLED |
+		 NV50_SOR_DP_CTRL_LANE_MASK);
+	tmp |= ((1 << (cmd & DP_LANE_COUNT_MASK)) - 1) << 16;
+	if (cmd & DP_LANE_COUNT_ENHANCED_FRAME_EN)
+		tmp |= NV50_SOR_DP_CTRL_ENHANCED_FRAME_ENABLED;
+	nv_wr32(dev, NV50_SOR_DP_CTRL(or, link), tmp);
+
+	return auxch_wr(encoder, DP_LANE_COUNT_SET, &cmd, 1);
+}
+
+static int
+nouveau_dp_link_bw_set(struct drm_encoder *encoder, uint8_t cmd)
+{
+	struct drm_device *dev = encoder->dev;
+	struct nouveau_encoder *nv_encoder = nouveau_encoder(encoder);
+	uint32_t tmp;
+	int reg = 0x614300 + (nv_encoder->or * 0x800);
+
+	tmp  = nv_rd32(dev, reg);
+	tmp &= 0xfff3ffff;
+	if (cmd == DP_LINK_BW_2_7)
+		tmp |= 0x00040000;
+	nv_wr32(dev, reg, tmp);
+
+	return auxch_wr(encoder, DP_LINK_BW_SET, &cmd, 1);
+}
+
+static int
+nouveau_dp_link_train_set(struct drm_encoder *encoder, int pattern)
+{
+	struct drm_device *dev = encoder->dev;
+	struct nouveau_encoder *nv_encoder = nouveau_encoder(encoder);
+	uint32_t tmp;
+	uint8_t cmd;
+	int or = nv_encoder->or, link = !(nv_encoder->dcb->sorconf.link & 1);
+	int ret;
+
+	tmp  = nv_rd32(dev, NV50_SOR_DP_CTRL(or, link));
+	tmp &= ~NV50_SOR_DP_CTRL_TRAINING_PATTERN;
+	tmp |= (pattern << 24);
+	nv_wr32(dev, NV50_SOR_DP_CTRL(or, link), tmp);
+
+	ret = auxch_rd(encoder, DP_TRAINING_PATTERN_SET, &cmd, 1);
+	if (ret)
+		return ret;
+	cmd &= ~DP_TRAINING_PATTERN_MASK;
+	cmd |= (pattern & DP_TRAINING_PATTERN_MASK);
+	return auxch_wr(encoder, DP_TRAINING_PATTERN_SET, &cmd, 1);
+}
+
+static int
+nouveau_dp_max_voltage_swing(struct drm_encoder *encoder)
+{
+	struct nouveau_encoder *nv_encoder = nouveau_encoder(encoder);
+	struct drm_device *dev = encoder->dev;
+	struct bit_displayport_encoder_table_entry *dpse;
+	struct bit_displayport_encoder_table *dpe;
+	int i, dpe_headerlen, max_vs = 0;
+
+	dpe = nouveau_bios_dp_table(dev, nv_encoder->dcb, &dpe_headerlen);
+	if (!dpe)
+		return false;
+	dpse = (void *)((char *)dpe + dpe_headerlen);
+
+	for (i = 0; i < dpe_headerlen; i++, dpse++) {
+		if (dpse->vs_level > max_vs)
+			max_vs = dpse->vs_level;
+	}
+
+	return max_vs;
+}
+
+static int
+nouveau_dp_max_pre_emphasis(struct drm_encoder *encoder, int vs)
+{
+	struct nouveau_encoder *nv_encoder = nouveau_encoder(encoder);
+	struct drm_device *dev = encoder->dev;
+	struct bit_displayport_encoder_table_entry *dpse;
+	struct bit_displayport_encoder_table *dpe;
+	int i, dpe_headerlen, max_pre = 0;
+
+	dpe = nouveau_bios_dp_table(dev, nv_encoder->dcb, &dpe_headerlen);
+	if (!dpe)
+		return false;
+	dpse = (void *)((char *)dpe + dpe_headerlen);
+
+	for (i = 0; i < dpe_headerlen; i++, dpse++) {
+		if (dpse->vs_level != vs)
+			continue;
+
+		if (dpse->pre_level > max_pre)
+			max_pre = dpse->pre_level;
+	}
+
+	return max_pre;
+}
+
+static bool
+nouveau_dp_link_train_adjust(struct drm_encoder *encoder, uint8_t *config)
+{
+	struct nouveau_encoder *nv_encoder = nouveau_encoder(encoder);
+	struct drm_device *dev = encoder->dev;
+	struct bit_displayport_encoder_table_entry *dpse;
+	struct bit_displayport_encoder_table *dpe;
+	int ret, i, dpe_headerlen, vs = 0, pre = 0;
+	uint8_t request[2];
+
+	dpe = nouveau_bios_dp_table(dev, nv_encoder->dcb, &dpe_headerlen);
+	if (!dpe)
+		return false;
+	dpse = (void *)((char *)dpe + dpe_headerlen);
+
+	ret = auxch_rd(encoder, DP_ADJUST_REQUEST_LANE0_1, request, 2);
+	if (ret)
+		return false;
+
+	NV_DEBUG_KMS(dev, "\t\tadjust 0x%02x 0x%02x\n", request[0], request[1]);
+
+	/* Keep all lanes at the same level.. */
+	for (i = 0; i < nv_encoder->dp.link_nr; i++) {
+		int lane_req = (request[i >> 1] >> ((i & 1) << 2)) & 0xf;
+		int lane_vs = lane_req & 3;
+		int lane_pre = (lane_req >> 2) & 3;
+
+		if (lane_vs > vs)
+			vs = lane_vs;
+		if (lane_pre > pre)
+			pre = lane_pre;
+	}
+
+	if (vs >= nouveau_dp_max_voltage_swing(encoder)) {
+		vs  = nouveau_dp_max_voltage_swing(encoder);
+		vs |= 4;
+	}
+
+	if (pre >= nouveau_dp_max_pre_emphasis(encoder, vs & 3)) {
+		pre  = nouveau_dp_max_pre_emphasis(encoder, vs & 3);
+		pre |= 4;
+	}
+
+	/* Update the configuration for all lanes.. */
+	for (i = 0; i < nv_encoder->dp.link_nr; i++)
+		config[i] = (pre << 3) | vs;
+
+	return true;
+}
+
+static bool
+nouveau_dp_link_train_commit(struct drm_encoder *encoder, uint8_t *config)
+{
+	struct nouveau_encoder *nv_encoder = nouveau_encoder(encoder);
+	struct drm_device *dev = encoder->dev;
+	struct bit_displayport_encoder_table_entry *dpse;
+	struct bit_displayport_encoder_table *dpe;
+	int or = nv_encoder->or, link = !(nv_encoder->dcb->sorconf.link & 1);
+	int dpe_headerlen, ret, i;
+
+	NV_DEBUG_KMS(dev, "\t\tconfig 0x%02x 0x%02x 0x%02x 0x%02x\n",
+		 config[0], config[1], config[2], config[3]);
+
+	dpe = nouveau_bios_dp_table(dev, nv_encoder->dcb, &dpe_headerlen);
+	if (!dpe)
+		return false;
+	dpse = (void *)((char *)dpe + dpe_headerlen);
+
+	for (i = 0; i < dpe->record_nr; i++, dpse++) {
+		if (dpse->vs_level == (config[0] & 3) &&
+		    dpse->pre_level == ((config[0] >> 3) & 3))
+			break;
+	}
+	BUG_ON(i == dpe->record_nr);
+
+	for (i = 0; i < nv_encoder->dp.link_nr; i++) {
+		const int shift[4] = { 16, 8, 0, 24 };
+		uint32_t mask = 0xff << shift[i];
+		uint32_t reg0, reg1, reg2;
+
+		reg0  = nv_rd32(dev, NV50_SOR_DP_UNK118(or, link)) & ~mask;
+		reg0 |= (dpse->reg0 << shift[i]);
+		reg1  = nv_rd32(dev, NV50_SOR_DP_UNK120(or, link)) & ~mask;
+		reg1 |= (dpse->reg1 << shift[i]);
+		reg2  = nv_rd32(dev, NV50_SOR_DP_UNK130(or, link)) & 0xffff00ff;
+		reg2 |= (dpse->reg2 << 8);
+		nv_wr32(dev, NV50_SOR_DP_UNK118(or, link), reg0);
+		nv_wr32(dev, NV50_SOR_DP_UNK120(or, link), reg1);
+		nv_wr32(dev, NV50_SOR_DP_UNK130(or, link), reg2);
+	}
+
+	ret = auxch_wr(encoder, DP_TRAINING_LANE0_SET, config, 4);
+	if (ret)
+		return false;
+
+	return true;
+}
+
+bool
+nouveau_dp_link_train(struct drm_encoder *encoder)
+{
+	struct drm_device *dev = encoder->dev;
+	struct nouveau_encoder *nv_encoder = nouveau_encoder(encoder);
+	uint8_t config[4];
+	uint8_t status[3];
+	bool cr_done, cr_max_vs, eq_done;
+	int ret = 0, i, tries, voltage;
+
+	NV_DEBUG_KMS(dev, "link training!!\n");
+train:
+	cr_done = eq_done = false;
+
+	/* set link configuration */
+	NV_DEBUG_KMS(dev, "\tbegin train: bw %d, lanes %d\n",
+		 nv_encoder->dp.link_bw, nv_encoder->dp.link_nr);
+
+	ret = nouveau_dp_link_bw_set(encoder, nv_encoder->dp.link_bw);
+	if (ret)
+		return false;
+
+	config[0] = nv_encoder->dp.link_nr;
+	if (nv_encoder->dp.dpcd_version >= 0x11)
+		config[0] |= DP_LANE_COUNT_ENHANCED_FRAME_EN;
+
+	ret = nouveau_dp_lane_count_set(encoder, config[0]);
+	if (ret)
+		return false;
+
+	/* clock recovery */
+	NV_DEBUG_KMS(dev, "\tbegin cr\n");
+	ret = nouveau_dp_link_train_set(encoder, DP_TRAINING_PATTERN_1);
+	if (ret)
+		goto stop;
+
+	tries = 0;
+	voltage = -1;
+	memset(config, 0x00, sizeof(config));
+	for (;;) {
+		if (!nouveau_dp_link_train_commit(encoder, config))
+			break;
+
+		udelay(100);
+
+		ret = auxch_rd(encoder, DP_LANE0_1_STATUS, status, 2);
+		if (ret)
+			break;
+		NV_DEBUG_KMS(dev, "\t\tstatus: 0x%02x 0x%02x\n",
+			 status[0], status[1]);
+
+		cr_done = true;
+		cr_max_vs = false;
+		for (i = 0; i < nv_encoder->dp.link_nr; i++) {
+			int lane = (status[i >> 1] >> ((i & 1) * 4)) & 0xf;
+
+			if (!(lane & DP_LANE_CR_DONE)) {
+				cr_done = false;
+				if (config[i] & DP_TRAIN_MAX_PRE_EMPHASIS_REACHED)
+					cr_max_vs = true;
+				break;
+			}
+		}
+
+		if ((config[0] & DP_TRAIN_VOLTAGE_SWING_MASK) != voltage) {
+			voltage = config[0] & DP_TRAIN_VOLTAGE_SWING_MASK;
+			tries = 0;
+		}
+
+		if (cr_done || cr_max_vs || (++tries == 5))
+			break;
+
+		if (!nouveau_dp_link_train_adjust(encoder, config))
+			break;
+	}
+
+	if (!cr_done)
+		goto stop;
+
+	/* channel equalisation */
+	NV_DEBUG_KMS(dev, "\tbegin eq\n");
+	ret = nouveau_dp_link_train_set(encoder, DP_TRAINING_PATTERN_2);
+	if (ret)
+		goto stop;
+
+	for (tries = 0; tries <= 5; tries++) {
+		udelay(400);
+
+		ret = auxch_rd(encoder, DP_LANE0_1_STATUS, status, 3);
+		if (ret)
+			break;
+		NV_DEBUG_KMS(dev, "\t\tstatus: 0x%02x 0x%02x\n",
+			 status[0], status[1]);
+
+		eq_done = true;
+		if (!(status[2] & DP_INTERLANE_ALIGN_DONE))
+			eq_done = false;
+
+		for (i = 0; eq_done && i < nv_encoder->dp.link_nr; i++) {
+			int lane = (status[i >> 1] >> ((i & 1) * 4)) & 0xf;
+
+			if (!(lane & DP_LANE_CR_DONE)) {
+				cr_done = false;
+				break;
+			}
+
+			if (!(lane & DP_LANE_CHANNEL_EQ_DONE) ||
+			    !(lane & DP_LANE_SYMBOL_LOCKED)) {
+				eq_done = false;
+				break;
+			}
+		}
+
+		if (eq_done || !cr_done)
+			break;
+
+		if (!nouveau_dp_link_train_adjust(encoder, config) ||
+		    !nouveau_dp_link_train_commit(encoder, config))
+			break;
+	}
+
+stop:
+	/* end link training */
+	ret = nouveau_dp_link_train_set(encoder, DP_TRAINING_PATTERN_DISABLE);
+	if (ret)
+		return false;
+
+	/* retry at a lower setting, if possible */
+	if (!ret && !(eq_done && cr_done)) {
+		NV_DEBUG_KMS(dev, "\twe failed\n");
+		if (nv_encoder->dp.link_bw != DP_LINK_BW_1_62) {
+			NV_DEBUG_KMS(dev, "retry link training at low rate\n");
+			nv_encoder->dp.link_bw = DP_LINK_BW_1_62;
+			goto train;
+		}
+	}
+
+	return eq_done;
+}
+
+bool
+nouveau_dp_detect(struct drm_encoder *encoder)
+{
+	struct nouveau_encoder *nv_encoder = nouveau_encoder(encoder);
+	struct drm_device *dev = encoder->dev;
+	uint8_t dpcd[4];
+	int ret;
+
+	ret = auxch_rd(encoder, 0x0000, dpcd, 4);
+	if (ret)
+		return false;
+
+	NV_DEBUG_KMS(dev, "encoder: link_bw %d, link_nr %d\n"
+		      "display: link_bw %d, link_nr %d version 0x%02x\n",
+		 nv_encoder->dcb->dpconf.link_bw,
+		 nv_encoder->dcb->dpconf.link_nr,
+		 dpcd[1], dpcd[2] & 0x0f, dpcd[0]);
+
+	nv_encoder->dp.dpcd_version = dpcd[0];
+
+	nv_encoder->dp.link_bw = dpcd[1];
+	if (nv_encoder->dp.link_bw != DP_LINK_BW_1_62 &&
+	    !nv_encoder->dcb->dpconf.link_bw)
+		nv_encoder->dp.link_bw = DP_LINK_BW_1_62;
+
+	nv_encoder->dp.link_nr = dpcd[2] & 0xf;
+	if (nv_encoder->dp.link_nr > nv_encoder->dcb->dpconf.link_nr)
+		nv_encoder->dp.link_nr = nv_encoder->dcb->dpconf.link_nr;
+
+	return true;
+}
+
+int
+nouveau_dp_auxch(struct nouveau_i2c_chan *auxch, int cmd, int addr,
+		 uint8_t *data, int data_nr)
+{
+	struct drm_device *dev = auxch->dev;
+	uint32_t tmp, ctrl, stat = 0, data32[4] = {};
+	int ret = 0, i, index = auxch->rd;
+
+	NV_DEBUG_KMS(dev, "ch %d cmd %d addr 0x%x len %d\n", index, cmd, addr, data_nr);
+
+	tmp = nv_rd32(dev, NV50_AUXCH_CTRL(auxch->rd));
+	nv_wr32(dev, NV50_AUXCH_CTRL(auxch->rd), tmp | 0x00100000);
+	tmp = nv_rd32(dev, NV50_AUXCH_CTRL(auxch->rd));
+	if (!(tmp & 0x01000000)) {
+		NV_ERROR(dev, "expected bit 24 == 1, got 0x%08x\n", tmp);
+		ret = -EIO;
+		goto out;
+	}
+
+	for (i = 0; i < 3; i++) {
+		tmp = nv_rd32(dev, NV50_AUXCH_STAT(auxch->rd));
+		if (tmp & NV50_AUXCH_STAT_STATE_READY)
+			break;
+		udelay(100);
+	}
+
+	if (i == 3) {
+		ret = -EBUSY;
+		goto out;
+	}
+
+	if (!(cmd & 1)) {
+		memcpy(data32, data, data_nr);
+		for (i = 0; i < 4; i++) {
+			NV_DEBUG_KMS(dev, "wr %d: 0x%08x\n", i, data32[i]);
+			nv_wr32(dev, NV50_AUXCH_DATA_OUT(index, i), data32[i]);
+		}
+	}
+
+	nv_wr32(dev, NV50_AUXCH_ADDR(index), addr);
+	ctrl  = nv_rd32(dev, NV50_AUXCH_CTRL(index));
+	ctrl &= ~(NV50_AUXCH_CTRL_CMD | NV50_AUXCH_CTRL_LEN);
+	ctrl |= (cmd << NV50_AUXCH_CTRL_CMD_SHIFT);
+	ctrl |= ((data_nr - 1) << NV50_AUXCH_CTRL_LEN_SHIFT);
+
+	for (;;) {
+		nv_wr32(dev, NV50_AUXCH_CTRL(index), ctrl | 0x80000000);
+		nv_wr32(dev, NV50_AUXCH_CTRL(index), ctrl);
+		nv_wr32(dev, NV50_AUXCH_CTRL(index), ctrl | 0x00010000);
+		if (!nv_wait(NV50_AUXCH_CTRL(index), 0x00010000, 0x00000000)) {
+			NV_ERROR(dev, "expected bit 16 == 0, got 0x%08x\n",
+				 nv_rd32(dev, NV50_AUXCH_CTRL(index)));
+			return -EBUSY;
+		}
+
+		udelay(400);
+
+		stat = nv_rd32(dev, NV50_AUXCH_STAT(index));
+		if ((stat & NV50_AUXCH_STAT_REPLY_AUX) !=
+			    NV50_AUXCH_STAT_REPLY_AUX_DEFER)
+			break;
+	}
+
+	if (cmd & 1) {
+		for (i = 0; i < 4; i++) {
+			data32[i] = nv_rd32(dev, NV50_AUXCH_DATA_IN(index, i));
+			NV_DEBUG_KMS(dev, "rd %d: 0x%08x\n", i, data32[i]);
+		}
+		memcpy(data, data32, data_nr);
+	}
+
+out:
+	tmp = nv_rd32(dev, NV50_AUXCH_CTRL(auxch->rd));
+	nv_wr32(dev, NV50_AUXCH_CTRL(auxch->rd), tmp & ~0x00100000);
+	tmp = nv_rd32(dev, NV50_AUXCH_CTRL(auxch->rd));
+	if (tmp & 0x01000000) {
+		NV_ERROR(dev, "expected bit 24 == 0, got 0x%08x\n", tmp);
+		ret = -EIO;
+	}
+
+	udelay(400);
+
+	return ret ? ret : (stat & NV50_AUXCH_STAT_REPLY);
+}
+
+int
+nouveau_dp_i2c_aux_ch(struct i2c_adapter *adapter, int mode,
+		      uint8_t write_byte, uint8_t *read_byte)
+{
+	struct i2c_algo_dp_aux_data *algo_data = adapter->algo_data;
+	struct nouveau_i2c_chan *auxch = (struct nouveau_i2c_chan *)adapter;
+	struct drm_device *dev = auxch->dev;
+	int ret = 0, cmd, addr = algo_data->address;
+	uint8_t *buf;
+
+	if (mode == MODE_I2C_READ) {
+		cmd = AUX_I2C_READ;
+		buf = read_byte;
+	} else {
+		cmd = (mode & MODE_I2C_READ) ? AUX_I2C_READ : AUX_I2C_WRITE;
+		buf = &write_byte;
+	}
+
+	if (!(mode & MODE_I2C_STOP))
+		cmd |= AUX_I2C_MOT;
+
+	if (mode & MODE_I2C_START)
+		return 1;
+
+	for (;;) {
+		ret = nouveau_dp_auxch(auxch, cmd, addr, buf, 1);
+		if (ret < 0)
+			return ret;
+
+		switch (ret & NV50_AUXCH_STAT_REPLY_I2C) {
+		case NV50_AUXCH_STAT_REPLY_I2C_ACK:
+			return 1;
+		case NV50_AUXCH_STAT_REPLY_I2C_NACK:
+			return -EREMOTEIO;
+		case NV50_AUXCH_STAT_REPLY_I2C_DEFER:
+			udelay(100);
+			break;
+		default:
+			NV_ERROR(dev, "invalid auxch status: 0x%08x\n", ret);
+			return -EREMOTEIO;
+		}
+	}
+}
+
diff --git a/drivers/gpu/drm/nouveau/nouveau_drv.c b/drivers/gpu/drm/nouveau/nouveau_drv.c
index a2b27e0..d117ab5 100644
--- a/drivers/gpu/drm/nouveau/nouveau_drv.c
+++ b/drivers/gpu/drm/nouveau/nouveau_drv.c
@@ -35,6 +35,10 @@
 
 #include "drm_pciids.h"
 
+MODULE_PARM_DESC(ctxfw, "Use external firmware blob for grctx init (NV40)");
+int nouveau_ctxfw = 0;
+module_param_named(ctxfw, nouveau_ctxfw, int, 0400);
+
 MODULE_PARM_DESC(noagp, "Disable AGP");
 int nouveau_noagp;
 module_param_named(noagp, nouveau_noagp, int, 0400);
@@ -277,7 +281,7 @@ nouveau_pci_resume(struct pci_dev *pdev)
 
 		for (i = 0; i < dev_priv->engine.fifo.channels; i++) {
 			chan = dev_priv->fifos[i];
-			if (!chan)
+			if (!chan || !chan->pushbuf_bo)
 				continue;
 
 			for (j = 0; j < NOUVEAU_DMA_SKIPS; j++)
@@ -387,11 +391,7 @@ static int __init nouveau_init(void)
 			nouveau_modeset = 0;
 		else
 #endif
-#if defined(CONFIG_DRM_NOUVEAU_KMS)
 			nouveau_modeset = 1;
-#else
-			nouveau_modeset = 0;
-#endif
 	}
 
 	if (nouveau_modeset == 1)
diff --git a/drivers/gpu/drm/nouveau/nouveau_drv.h b/drivers/gpu/drm/nouveau/nouveau_drv.h
index f00d61d..26e067d 100644
--- a/drivers/gpu/drm/nouveau/nouveau_drv.h
+++ b/drivers/gpu/drm/nouveau/nouveau_drv.h
@@ -54,15 +54,24 @@ struct nouveau_fpriv {
 #include "nouveau_drm.h"
 #include "nouveau_reg.h"
 #include "nouveau_bios.h"
+struct nouveau_grctx;
 
 #define MAX_NUM_DCB_ENTRIES 16
 
 #define NOUVEAU_MAX_CHANNEL_NR 128
+#define NOUVEAU_MAX_TILE_NR 15
 
 #define NV50_VM_MAX_VRAM (2*1024*1024*1024ULL)
 #define NV50_VM_BLOCK    (512*1024*1024ULL)
 #define NV50_VM_VRAM_NR  (NV50_VM_MAX_VRAM / NV50_VM_BLOCK)
 
+struct nouveau_tile_reg {
+	struct nouveau_fence *fence;
+	uint32_t addr;
+	uint32_t size;
+	bool used;
+};
+
 struct nouveau_bo {
 	struct ttm_buffer_object bo;
 	struct ttm_placement placement;
@@ -82,6 +91,7 @@ struct nouveau_bo {
 
 	uint32_t tile_mode;
 	uint32_t tile_flags;
+	struct nouveau_tile_reg *tile;
 
 	struct drm_gem_object *gem;
 	struct drm_file *cpu_filp;
@@ -276,8 +286,13 @@ struct nouveau_timer_engine {
 };
 
 struct nouveau_fb_engine {
+	int num_tiles;
+
 	int  (*init)(struct drm_device *dev);
 	void (*takedown)(struct drm_device *dev);
+
+	void (*set_region_tiling)(struct drm_device *dev, int i, uint32_t addr,
+				 uint32_t size, uint32_t pitch);
 };
 
 struct nouveau_fifo_engine {
@@ -291,6 +306,8 @@ struct nouveau_fifo_engine {
 	void (*disable)(struct drm_device *);
 	void (*enable)(struct drm_device *);
 	bool (*reassign)(struct drm_device *, bool enable);
+	bool (*cache_flush)(struct drm_device *dev);
+	bool (*cache_pull)(struct drm_device *dev, bool enable);
 
 	int  (*channel_id)(struct drm_device *);
 
@@ -315,6 +332,9 @@ struct nouveau_pgraph_object_class {
 struct nouveau_pgraph_engine {
 	struct nouveau_pgraph_object_class *grclass;
 	bool accel_blocked;
+	void *ctxprog;
+	void *ctxvals;
+	int grctx_size;
 
 	int  (*init)(struct drm_device *);
 	void (*takedown)(struct drm_device *);
@@ -326,6 +346,9 @@ struct nouveau_pgraph_engine {
 	void (*destroy_context)(struct nouveau_channel *);
 	int  (*load_context)(struct nouveau_channel *);
 	int  (*unload_context)(struct drm_device *);
+
+	void (*set_region_tiling)(struct drm_device *dev, int i, uint32_t addr,
+				  uint32_t size, uint32_t pitch);
 };
 
 struct nouveau_engine {
@@ -460,16 +483,12 @@ struct nv04_mode_state {
 };
 
 enum nouveau_card_type {
-	NV_UNKNOWN = 0,
-	NV_04      = 4,
-	NV_05      = 5,
-	NV_10      = 10,
-	NV_11      = 11,
-	NV_17      = 17,
-	NV_20      = 20,
-	NV_30      = 30,
-	NV_40      = 40,
-	NV_50      = 50,
+	NV_04      = 0x00,
+	NV_10      = 0x10,
+	NV_20      = 0x20,
+	NV_30      = 0x30,
+	NV_40      = 0x40,
+	NV_50      = 0x50,
 };
 
 struct drm_nouveau_private {
@@ -490,7 +509,9 @@ struct drm_nouveau_private {
 	void __iomem *ramin;
 	uint32_t ramin_size;
 
+	struct workqueue_struct *wq;
 	struct work_struct irq_work;
+
 	struct list_head vbl_waiting;
 
 	struct {
@@ -546,6 +567,12 @@ struct drm_nouveau_private {
 		unsigned long sg_handle;
 	} gart_info;
 
+	/* nv10-nv40 tiling regions */
+	struct {
+		struct nouveau_tile_reg reg[NOUVEAU_MAX_TILE_NR];
+		spinlock_t lock;
+	} tile;
+
 	/* G8x/G9x virtual address space */
 	uint64_t vm_gart_base;
 	uint64_t vm_gart_size;
@@ -650,6 +677,7 @@ extern int nouveau_tv;
 extern char *nouveau_tv_norm;
 extern int nouveau_reg_debug;
 extern char *nouveau_vbios;
+extern int nouveau_ctxfw;
 
 /* nouveau_state.c */
 extern void nouveau_preclose(struct drm_device *dev, struct drm_file *);
@@ -685,6 +713,13 @@ extern void nouveau_mem_release(struct drm_file *, struct mem_block *heap);
 extern int  nouveau_mem_init(struct drm_device *);
 extern int  nouveau_mem_init_agp(struct drm_device *);
 extern void nouveau_mem_close(struct drm_device *);
+extern struct nouveau_tile_reg *nv10_mem_set_tiling(struct drm_device *dev,
+						    uint32_t addr,
+						    uint32_t size,
+						    uint32_t pitch);
+extern void nv10_mem_expire_tiling(struct drm_device *dev,
+				   struct nouveau_tile_reg *tile,
+				   struct nouveau_fence *fence);
 extern int  nv50_mem_vm_bind_linear(struct drm_device *, uint64_t virt,
 				    uint32_t size, uint32_t flags,
 				    uint64_t phys);
@@ -713,7 +748,6 @@ extern int  nouveau_channel_alloc(struct drm_device *dev,
 				  struct drm_file *file_priv,
 				  uint32_t fb_ctxdma, uint32_t tt_ctxdma);
 extern void nouveau_channel_free(struct nouveau_channel *);
-extern int  nouveau_channel_idle(struct nouveau_channel *chan);
 
 /* nouveau_object.c */
 extern int  nouveau_gpuobj_early_init(struct drm_device *);
@@ -756,6 +790,8 @@ extern int nouveau_gpuobj_gart_dma_new(struct nouveau_channel *,
 				       uint32_t *o_ret);
 extern int nouveau_gpuobj_gr_new(struct nouveau_channel *, int class,
 				 struct nouveau_gpuobj **);
+extern int nouveau_gpuobj_sw_new(struct nouveau_channel *, int class,
+				 struct nouveau_gpuobj **);
 extern int nouveau_ioctl_grobj_alloc(struct drm_device *, void *data,
 				     struct drm_file *);
 extern int nouveau_ioctl_gpuobj_free(struct drm_device *, void *data,
@@ -804,6 +840,7 @@ nouveau_debugfs_channel_fini(struct nouveau_channel *chan)
 #endif
 
 /* nouveau_dma.c */
+extern void nouveau_dma_pre_init(struct nouveau_channel *);
 extern int  nouveau_dma_init(struct nouveau_channel *);
 extern int  nouveau_dma_wait(struct nouveau_channel *, int size);
 
@@ -839,12 +876,19 @@ static inline void nouveau_backlight_exit(struct drm_device *dev) { }
 extern int nouveau_bios_init(struct drm_device *);
 extern void nouveau_bios_takedown(struct drm_device *dev);
 extern int nouveau_run_vbios_init(struct drm_device *);
-extern void nouveau_bios_run_init_table(struct drm_device *, uint16_t table);
+extern void nouveau_bios_run_init_table(struct drm_device *, uint16_t table,
+					struct dcb_entry *);
+extern struct dcb_gpio_entry *nouveau_bios_gpio_entry(struct drm_device *,
+						      enum dcb_gpio_tag);
+extern struct dcb_connector_table_entry *
+nouveau_bios_connector_entry(struct drm_device *, int index);
 extern int get_pll_limits(struct drm_device *, uint32_t limit_match,
 			  struct pll_lims *);
 extern int nouveau_bios_run_display_table(struct drm_device *,
 					  struct dcb_entry *,
 					  uint32_t script, int pxclk);
+extern void *nouveau_bios_dp_table(struct drm_device *, struct dcb_entry *,
+				   int *length);
 extern bool nouveau_bios_fp_mode(struct drm_device *, struct drm_display_mode *);
 extern uint8_t *nouveau_bios_embedded_edid(struct drm_device *);
 extern int nouveau_bios_parse_lvds_table(struct drm_device *, int pxclk,
@@ -859,6 +903,12 @@ int nouveau_ttm_global_init(struct drm_nouveau_private *);
 void nouveau_ttm_global_release(struct drm_nouveau_private *);
 int nouveau_ttm_mmap(struct file *, struct vm_area_struct *);
 
+/* nouveau_dp.c */
+int nouveau_dp_auxch(struct nouveau_i2c_chan *auxch, int cmd, int addr,
+		     uint8_t *data, int data_nr);
+bool nouveau_dp_detect(struct drm_encoder *);
+bool nouveau_dp_link_train(struct drm_encoder *);
+
 /* nv04_fb.c */
 extern int  nv04_fb_init(struct drm_device *);
 extern void nv04_fb_takedown(struct drm_device *);
@@ -866,16 +916,22 @@ extern void nv04_fb_takedown(struct drm_device *);
 /* nv10_fb.c */
 extern int  nv10_fb_init(struct drm_device *);
 extern void nv10_fb_takedown(struct drm_device *);
+extern void nv10_fb_set_region_tiling(struct drm_device *, int, uint32_t,
+				      uint32_t, uint32_t);
 
 /* nv40_fb.c */
 extern int  nv40_fb_init(struct drm_device *);
 extern void nv40_fb_takedown(struct drm_device *);
+extern void nv40_fb_set_region_tiling(struct drm_device *, int, uint32_t,
+				      uint32_t, uint32_t);
 
 /* nv04_fifo.c */
 extern int  nv04_fifo_init(struct drm_device *);
 extern void nv04_fifo_disable(struct drm_device *);
 extern void nv04_fifo_enable(struct drm_device *);
 extern bool nv04_fifo_reassign(struct drm_device *, bool);
+extern bool nv04_fifo_cache_flush(struct drm_device *);
+extern bool nv04_fifo_cache_pull(struct drm_device *, bool);
 extern int  nv04_fifo_channel_id(struct drm_device *);
 extern int  nv04_fifo_create_context(struct nouveau_channel *);
 extern void nv04_fifo_destroy_context(struct nouveau_channel *);
@@ -928,6 +984,8 @@ extern void nv10_graph_destroy_context(struct nouveau_channel *);
 extern int  nv10_graph_load_context(struct nouveau_channel *);
 extern int  nv10_graph_unload_context(struct drm_device *);
 extern void nv10_graph_context_switch(struct drm_device *);
+extern void nv10_graph_set_region_tiling(struct drm_device *, int, uint32_t,
+					 uint32_t, uint32_t);
 
 /* nv20_graph.c */
 extern struct nouveau_pgraph_object_class nv20_graph_grclass[];
@@ -939,6 +997,8 @@ extern int  nv20_graph_unload_context(struct drm_device *);
 extern int  nv20_graph_init(struct drm_device *);
 extern void nv20_graph_takedown(struct drm_device *);
 extern int  nv30_graph_init(struct drm_device *);
+extern void nv20_graph_set_region_tiling(struct drm_device *, int, uint32_t,
+					 uint32_t, uint32_t);
 
 /* nv40_graph.c */
 extern struct nouveau_pgraph_object_class nv40_graph_grclass[];
@@ -949,6 +1009,9 @@ extern int  nv40_graph_create_context(struct nouveau_channel *);
 extern void nv40_graph_destroy_context(struct nouveau_channel *);
 extern int  nv40_graph_load_context(struct nouveau_channel *);
 extern int  nv40_graph_unload_context(struct drm_device *);
+extern void nv40_grctx_init(struct nouveau_grctx *);
+extern void nv40_graph_set_region_tiling(struct drm_device *, int, uint32_t,
+					 uint32_t, uint32_t);
 
 /* nv50_graph.c */
 extern struct nouveau_pgraph_object_class nv50_graph_grclass[];
@@ -962,6 +1025,12 @@ extern int  nv50_graph_load_context(struct nouveau_channel *);
 extern int  nv50_graph_unload_context(struct drm_device *);
 extern void nv50_graph_context_switch(struct drm_device *);
 
+/* nouveau_grctx.c */
+extern int  nouveau_grctx_prog_load(struct drm_device *);
+extern void nouveau_grctx_vals_load(struct drm_device *,
+				    struct nouveau_gpuobj *);
+extern void nouveau_grctx_fini(struct drm_device *);
+
 /* nv04_instmem.c */
 extern int  nv04_instmem_init(struct drm_device *);
 extern void nv04_instmem_takedown(struct drm_device *);
@@ -1010,8 +1079,7 @@ extern long nouveau_compat_ioctl(struct file *file, unsigned int cmd,
 
 /* nv04_dac.c */
 extern int nv04_dac_create(struct drm_device *dev, struct dcb_entry *entry);
-extern enum drm_connector_status nv17_dac_detect(struct drm_encoder *encoder,
-						 struct drm_connector *connector);
+extern uint32_t nv17_dac_sample_load(struct drm_encoder *encoder);
 extern int nv04_dac_output_offset(struct drm_encoder *encoder);
 extern void nv04_dac_update_dacclk(struct drm_encoder *encoder, bool enable);
 
@@ -1029,9 +1097,6 @@ extern int nv04_tv_create(struct drm_device *dev, struct dcb_entry *entry);
 
 /* nv17_tv.c */
 extern int nv17_tv_create(struct drm_device *dev, struct dcb_entry *entry);
-extern enum drm_connector_status nv17_tv_detect(struct drm_encoder *encoder,
-						struct drm_connector *connector,
-						uint32_t pin_mask);
 
 /* nv04_display.c */
 extern int nv04_display_create(struct drm_device *);
@@ -1101,6 +1166,10 @@ extern int nouveau_gem_ioctl_cpu_fini(struct drm_device *, void *,
 extern int nouveau_gem_ioctl_info(struct drm_device *, void *,
 				  struct drm_file *);
 
+/* nv17_gpio.c */
+int nv17_gpio_get(struct drm_device *dev, enum dcb_gpio_tag tag);
+int nv17_gpio_set(struct drm_device *dev, enum dcb_gpio_tag tag, int state);
+
 #ifndef ioread32_native
 #ifdef __BIG_ENDIAN
 #define ioread16_native ioread16be
@@ -1190,14 +1259,24 @@ static inline void nv_wo32(struct drm_device *dev, struct nouveau_gpuobj *obj,
 					pci_name(d->pdev), ##arg)
 #ifndef NV_DEBUG_NOTRACE
 #define NV_DEBUG(d, fmt, arg...) do {                                          \
-	if (drm_debug) {                                                       \
+	if (drm_debug & DRM_UT_DRIVER) {                                       \
+		NV_PRINTK(KERN_DEBUG, d, "%s:%d - " fmt, __func__,             \
+			  __LINE__, ##arg);                                    \
+	}                                                                      \
+} while (0)
+#define NV_DEBUG_KMS(d, fmt, arg...) do {                                      \
+	if (drm_debug & DRM_UT_KMS) {                                          \
 		NV_PRINTK(KERN_DEBUG, d, "%s:%d - " fmt, __func__,             \
 			  __LINE__, ##arg);                                    \
 	}                                                                      \
 } while (0)
 #else
 #define NV_DEBUG(d, fmt, arg...) do {                                          \
-	if (drm_debug)                                                         \
+	if (drm_debug & DRM_UT_DRIVER)                                         \
+		NV_PRINTK(KERN_DEBUG, d, fmt, ##arg);                          \
+} while (0)
+#define NV_DEBUG_KMS(d, fmt, arg...) do {                                      \
+	if (drm_debug & DRM_UT_KMS)                                            \
 		NV_PRINTK(KERN_DEBUG, d, fmt, ##arg);                          \
 } while (0)
 #endif
@@ -1226,39 +1305,13 @@ enum {
 		NV_PRINTK(KERN_DEBUG, dev, "%s: " fmt, __func__, ##arg); \
 } while (0)
 
-static inline enum nouveau_card_type
-nv_arch(struct drm_device *dev)
-{
-	struct drm_nouveau_private *dev_priv = dev->dev_private;
-
-	switch (dev_priv->chipset & 0xf0) {
-	case 0x00:
-		return NV_04;
-	case 0x10:
-		return NV_10;
-	case 0x20:
-		return NV_20;
-	case 0x30:
-		return NV_30;
-	case 0x40:
-	case 0x60:
-		return NV_40;
-	case 0x50:
-	case 0x80:
-	case 0x90:
-	case 0xa0:
-		return NV_50;
-	default:
-		return NV_UNKNOWN;
-	}
-}
-
 static inline bool
 nv_two_heads(struct drm_device *dev)
 {
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	const int impl = dev->pci_device & 0x0ff0;
 
-	if (nv_arch(dev) >= NV_10 && impl != 0x0100 &&
+	if (dev_priv->card_type >= NV_10 && impl != 0x0100 &&
 	    impl != 0x0150 && impl != 0x01a0 && impl != 0x0200)
 		return true;
 
@@ -1274,21 +1327,22 @@ nv_gf4_disp_arch(struct drm_device *dev)
 static inline bool
 nv_two_reg_pll(struct drm_device *dev)
 {
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	const int impl = dev->pci_device & 0x0ff0;
 
-	if (impl == 0x0310 || impl == 0x0340 || nv_arch(dev) >= NV_40)
+	if (impl == 0x0310 || impl == 0x0340 || dev_priv->card_type >= NV_40)
 		return true;
 	return false;
 }
 
-#define NV50_NVSW                                                    0x0000506e
-#define NV50_NVSW_DMA_SEMAPHORE                                      0x00000060
-#define NV50_NVSW_SEMAPHORE_OFFSET                                   0x00000064
-#define NV50_NVSW_SEMAPHORE_ACQUIRE                                  0x00000068
-#define NV50_NVSW_SEMAPHORE_RELEASE                                  0x0000006c
-#define NV50_NVSW_DMA_VBLSEM                                         0x0000018c
-#define NV50_NVSW_VBLSEM_OFFSET                                      0x00000400
-#define NV50_NVSW_VBLSEM_RELEASE_VALUE                               0x00000404
-#define NV50_NVSW_VBLSEM_RELEASE                                     0x00000408
+#define NV_SW                                                        0x0000506e
+#define NV_SW_DMA_SEMAPHORE                                          0x00000060
+#define NV_SW_SEMAPHORE_OFFSET                                       0x00000064
+#define NV_SW_SEMAPHORE_ACQUIRE                                      0x00000068
+#define NV_SW_SEMAPHORE_RELEASE                                      0x0000006c
+#define NV_SW_DMA_VBLSEM                                             0x0000018c
+#define NV_SW_VBLSEM_OFFSET                                          0x00000400
+#define NV_SW_VBLSEM_RELEASE_VALUE                                   0x00000404
+#define NV_SW_VBLSEM_RELEASE                                         0x00000408
 
 #endif /* __NOUVEAU_DRV_H__ */
diff --git a/drivers/gpu/drm/nouveau/nouveau_encoder.h b/drivers/gpu/drm/nouveau/nouveau_encoder.h
index ab823fc..bc4a240 100644
--- a/drivers/gpu/drm/nouveau/nouveau_encoder.h
+++ b/drivers/gpu/drm/nouveau/nouveau_encoder.h
@@ -44,6 +44,14 @@ struct nouveau_encoder {
 	struct nv04_output_reg restore;
 
 	void (*disconnect)(struct nouveau_encoder *encoder);
+
+	union {
+		struct {
+			int dpcd_version;
+			int link_nr;
+			int link_bw;
+		} dp;
+	};
 };
 
 static inline struct nouveau_encoder *nouveau_encoder(struct drm_encoder *enc)
@@ -63,4 +71,21 @@ nouveau_encoder_connector_get(struct nouveau_encoder *encoder);
 int nv50_sor_create(struct drm_device *dev, struct dcb_entry *entry);
 int nv50_dac_create(struct drm_device *dev, struct dcb_entry *entry);
 
+struct bit_displayport_encoder_table {
+	uint32_t match;
+	uint8_t  record_nr;
+	uint8_t  unknown;
+	uint16_t script0;
+	uint16_t script1;
+	uint16_t unknown_table;
+} __attribute__ ((packed));
+
+struct bit_displayport_encoder_table_entry {
+	uint8_t vs_level;
+	uint8_t pre_level;
+	uint8_t reg0;
+	uint8_t reg1;
+	uint8_t reg2;
+} __attribute__ ((packed));
+
 #endif /* __NOUVEAU_ENCODER_H__ */
diff --git a/drivers/gpu/drm/nouveau/nouveau_fbcon.c b/drivers/gpu/drm/nouveau/nouveau_fbcon.c
index 36e8c5e..0b05c86 100644
--- a/drivers/gpu/drm/nouveau/nouveau_fbcon.c
+++ b/drivers/gpu/drm/nouveau/nouveau_fbcon.c
@@ -58,14 +58,13 @@ nouveau_fbcon_sync(struct fb_info *info)
 	struct nouveau_channel *chan = dev_priv->channel;
 	int ret, i;
 
-	if (!chan->accel_done ||
+	if (!chan || !chan->accel_done ||
 	    info->state != FBINFO_STATE_RUNNING ||
 	    info->flags & FBINFO_HWACCEL_DISABLED)
 		return 0;
 
 	if (RING_SPACE(chan, 4)) {
-		NV_ERROR(dev, "GPU lockup - switching to software fbcon\n");
-		info->flags |= FBINFO_HWACCEL_DISABLED;
+		nouveau_fbcon_gpu_lockup(info);
 		return 0;
 	}
 
@@ -86,8 +85,7 @@ nouveau_fbcon_sync(struct fb_info *info)
 	}
 
 	if (ret) {
-		NV_ERROR(dev, "GPU lockup - switching to software fbcon\n");
-		info->flags |= FBINFO_HWACCEL_DISABLED;
+		nouveau_fbcon_gpu_lockup(info);
 		return 0;
 	}
 
@@ -212,11 +210,11 @@ nouveau_fbcon_create(struct drm_device *dev, uint32_t fb_width,
 
 	mode_cmd.bpp = surface_bpp;
 	mode_cmd.pitch = mode_cmd.width * (mode_cmd.bpp >> 3);
-	mode_cmd.pitch = ALIGN(mode_cmd.pitch, 256);
+	mode_cmd.pitch = roundup(mode_cmd.pitch, 256);
 	mode_cmd.depth = surface_depth;
 
 	size = mode_cmd.pitch * mode_cmd.height;
-	size = ALIGN(size, PAGE_SIZE);
+	size = roundup(size, PAGE_SIZE);
 
 	ret = nouveau_gem_new(dev, dev_priv->channel, size, 0, TTM_PL_FLAG_VRAM,
 			      0, 0x0000, false, true, &nvbo);
@@ -318,14 +316,16 @@ nouveau_fbcon_create(struct drm_device *dev, uint32_t fb_width,
 	par->nouveau_fb = nouveau_fb;
 	par->dev = dev;
 
-	switch (dev_priv->card_type) {
-	case NV_50:
-		nv50_fbcon_accel_init(info);
-		break;
-	default:
-		nv04_fbcon_accel_init(info);
-		break;
-	};
+	if (dev_priv->channel) {
+		switch (dev_priv->card_type) {
+		case NV_50:
+			nv50_fbcon_accel_init(info);
+			break;
+		default:
+			nv04_fbcon_accel_init(info);
+			break;
+		};
+	}
 
 	nouveau_fbcon_zfill(dev);
 
@@ -347,7 +347,7 @@ out:
 int
 nouveau_fbcon_probe(struct drm_device *dev)
 {
-	NV_DEBUG(dev, "\n");
+	NV_DEBUG_KMS(dev, "\n");
 
 	return drm_fb_helper_single_fb_probe(dev, 32, nouveau_fbcon_create);
 }
@@ -378,3 +378,12 @@ nouveau_fbcon_remove(struct drm_device *dev, struct drm_framebuffer *fb)
 
 	return 0;
 }
+
+void nouveau_fbcon_gpu_lockup(struct fb_info *info)
+{
+	struct nouveau_fbcon_par *par = info->par;
+	struct drm_device *dev = par->dev;
+
+	NV_ERROR(dev, "GPU lockup - switching to software fbcon\n");
+	info->flags |= FBINFO_HWACCEL_DISABLED;
+}
diff --git a/drivers/gpu/drm/nouveau/nouveau_fbcon.h b/drivers/gpu/drm/nouveau/nouveau_fbcon.h
index 8531140..462e0b8 100644
--- a/drivers/gpu/drm/nouveau/nouveau_fbcon.h
+++ b/drivers/gpu/drm/nouveau/nouveau_fbcon.h
@@ -43,5 +43,6 @@ void nouveau_fbcon_zfill(struct drm_device *dev);
 int nv04_fbcon_accel_init(struct fb_info *info);
 int nv50_fbcon_accel_init(struct fb_info *info);
 
+void nouveau_fbcon_gpu_lockup(struct fb_info *info);
 #endif /* __NV50_FBCON_H__ */
 
diff --git a/drivers/gpu/drm/nouveau/nouveau_fence.c b/drivers/gpu/drm/nouveau/nouveau_fence.c
index dacac9a..faddf53 100644
--- a/drivers/gpu/drm/nouveau/nouveau_fence.c
+++ b/drivers/gpu/drm/nouveau/nouveau_fence.c
@@ -142,7 +142,7 @@ nouveau_fence_emit(struct nouveau_fence *fence)
 	list_add_tail(&fence->entry, &chan->fence.pending);
 	spin_unlock_irqrestore(&chan->fence.lock, flags);
 
-	BEGIN_RING(chan, NvSubM2MF, USE_REFCNT ? 0x0050 : 0x0150, 1);
+	BEGIN_RING(chan, NvSubSw, USE_REFCNT ? 0x0050 : 0x0150, 1);
 	OUT_RING(chan, fence->sequence);
 	FIRE_RING(chan);
 
diff --git a/drivers/gpu/drm/nouveau/nouveau_gem.c b/drivers/gpu/drm/nouveau/nouveau_gem.c
index 948f7f2..2009db2 100644
--- a/drivers/gpu/drm/nouveau/nouveau_gem.c
+++ b/drivers/gpu/drm/nouveau/nouveau_gem.c
@@ -104,7 +104,7 @@ nouveau_gem_info(struct drm_gem_object *gem, struct drm_nouveau_gem_info *rep)
 }
 
 static bool
-nouveau_gem_tile_mode_valid(struct drm_device *dev, uint32_t tile_flags) {
+nouveau_gem_tile_flags_valid(struct drm_device *dev, uint32_t tile_flags) {
 	switch (tile_flags) {
 	case 0x0000:
 	case 0x1800:
@@ -151,12 +151,7 @@ nouveau_gem_ioctl_new(struct drm_device *dev, void *data,
 	if (!flags || req->info.domain & NOUVEAU_GEM_DOMAIN_CPU)
 		flags |= TTM_PL_FLAG_SYSTEM;
 
-	if (req->info.tile_mode > 4) {
-		NV_ERROR(dev, "bad tile mode: %d\n", req->info.tile_mode);
-		return -EINVAL;
-	}
-
-	if (!nouveau_gem_tile_mode_valid(dev, req->info.tile_flags))
+	if (!nouveau_gem_tile_flags_valid(dev, req->info.tile_flags))
 		return -EINVAL;
 
 	ret = nouveau_gem_new(dev, chan, req->info.size, req->align, flags,
@@ -224,14 +219,29 @@ nouveau_gem_set_domain(struct drm_gem_object *gem, uint32_t read_domains,
 	return 0;
 }
 
+struct validate_op {
+	struct list_head vram_list;
+	struct list_head gart_list;
+	struct list_head both_list;
+};
+
 static void
-nouveau_gem_pushbuf_backoff(struct list_head *list)
+validate_fini_list(struct list_head *list, struct nouveau_fence *fence)
 {
 	struct list_head *entry, *tmp;
 	struct nouveau_bo *nvbo;
 
 	list_for_each_safe(entry, tmp, list) {
 		nvbo = list_entry(entry, struct nouveau_bo, entry);
+		if (likely(fence)) {
+			struct nouveau_fence *prev_fence;
+
+			spin_lock(&nvbo->bo.lock);
+			prev_fence = nvbo->bo.sync_obj;
+			nvbo->bo.sync_obj = nouveau_fence_ref(fence);
+			spin_unlock(&nvbo->bo.lock);
+			nouveau_fence_unref((void *)&prev_fence);
+		}
 
 		list_del(&nvbo->entry);
 		nvbo->reserved_by = NULL;
@@ -241,144 +251,139 @@ nouveau_gem_pushbuf_backoff(struct list_head *list)
 }
 
 static void
-nouveau_gem_pushbuf_fence(struct list_head *list, struct nouveau_fence *fence)
+validate_fini(struct validate_op *op, struct nouveau_fence* fence)
 {
-	struct list_head *entry, *tmp;
-	struct nouveau_fence *prev_fence;
-	struct nouveau_bo *nvbo;
-
-	list_for_each_safe(entry, tmp, list) {
-		nvbo = list_entry(entry, struct nouveau_bo, entry);
-
-		spin_lock(&nvbo->bo.lock);
-		prev_fence = nvbo->bo.sync_obj;
-		nvbo->bo.sync_obj = nouveau_fence_ref(fence);
-		spin_unlock(&nvbo->bo.lock);
-
-		list_del(&nvbo->entry);
-		nvbo->reserved_by = NULL;
-		ttm_bo_unreserve(&nvbo->bo);
-		drm_gem_object_unreference(nvbo->gem);
-
-		nouveau_fence_unref((void *)&prev_fence);
-	}
+	validate_fini_list(&op->vram_list, fence);
+	validate_fini_list(&op->gart_list, fence);
+	validate_fini_list(&op->both_list, fence);
 }
 
 static int
-nouveau_gem_pushbuf_validate(struct nouveau_channel *chan,
-			     struct drm_file *file_priv,
-			     struct drm_nouveau_gem_pushbuf_bo *pbbo,
-			     uint64_t user_buffers, int nr_buffers,
-			     struct list_head *list, int *apply_relocs)
+validate_init(struct nouveau_channel *chan, struct drm_file *file_priv,
+	      struct drm_nouveau_gem_pushbuf_bo *pbbo,
+	      int nr_buffers, struct validate_op *op)
 {
-	struct drm_nouveau_private *dev_priv = chan->dev->dev_private;
 	struct drm_device *dev = chan->dev;
-	struct drm_nouveau_gem_pushbuf_bo *b;
-	struct drm_nouveau_gem_pushbuf_bo __user *user_pbbos =
-				(void __force __user *)(uintptr_t)user_buffers;
-	struct nouveau_fence *prev_fence;
-	struct nouveau_bo *nvbo;
-	struct list_head *entry, *tmp;
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	uint32_t sequence;
-	int ret = -EINVAL;
-	int i;
 	int trycnt = 0;
-
-	if (nr_buffers == 0)
-		return 0;
+	int ret, i;
 
 	sequence = atomic_add_return(1, &dev_priv->ttm.validate_sequence);
 retry:
 	if (++trycnt > 100000) {
-		ret = -EINVAL;
 		NV_ERROR(dev, "%s failed and gave up.\n", __func__);
-		goto out_unref;
+		return -EINVAL;
 	}
 
-	for (i = 0, b = pbbo; i < nr_buffers; i++, b++) {
+	for (i = 0; i < nr_buffers; i++) {
+		struct drm_nouveau_gem_pushbuf_bo *b = &pbbo[i];
 		struct drm_gem_object *gem;
+		struct nouveau_bo *nvbo;
 
 		gem = drm_gem_object_lookup(dev, file_priv, b->handle);
 		if (!gem) {
 			NV_ERROR(dev, "Unknown handle 0x%08x\n", b->handle);
-			ret = -EINVAL;
-			goto out_unref;
+			validate_fini(op, NULL);
+			return -EINVAL;
 		}
 		nvbo = gem->driver_private;
 
 		if (nvbo->reserved_by && nvbo->reserved_by == file_priv) {
-			NV_INFO(dev, "multiple instances of buffer %d on "
-				     "validation list\n", b->handle);
-			ret = -EINVAL;
-			goto out_unref;
+			NV_ERROR(dev, "multiple instances of buffer %d on "
+				      "validation list\n", b->handle);
+			validate_fini(op, NULL);
+			return -EINVAL;
 		}
 
 		ret = ttm_bo_reserve(&nvbo->bo, false, false, true, sequence);
 		if (ret) {
-			nouveau_gem_pushbuf_backoff(list);
+			validate_fini(op, NULL);
 			if (ret == -EAGAIN)
 				ret = ttm_bo_wait_unreserved(&nvbo->bo, false);
 			drm_gem_object_unreference(gem);
 			if (ret)
-				goto out_unref;
+				return ret;
 			goto retry;
 		}
 
 		nvbo->reserved_by = file_priv;
-		list_add_tail(&nvbo->entry, list);
+		nvbo->pbbo_index = i;
+		if ((b->valid_domains & NOUVEAU_GEM_DOMAIN_VRAM) &&
+		    (b->valid_domains & NOUVEAU_GEM_DOMAIN_GART))
+			list_add_tail(&nvbo->entry, &op->both_list);
+		else
+		if (b->valid_domains & NOUVEAU_GEM_DOMAIN_VRAM)
+			list_add_tail(&nvbo->entry, &op->vram_list);
+		else
+		if (b->valid_domains & NOUVEAU_GEM_DOMAIN_GART)
+			list_add_tail(&nvbo->entry, &op->gart_list);
+		else {
+			NV_ERROR(dev, "invalid valid domains: 0x%08x\n",
+				 b->valid_domains);
+			validate_fini(op, NULL);
+			return -EINVAL;
+		}
 
 		if (unlikely(atomic_read(&nvbo->bo.cpu_writers) > 0)) {
-			nouveau_gem_pushbuf_backoff(list);
+			validate_fini(op, NULL);
 
 			if (nvbo->cpu_filp == file_priv) {
 				NV_ERROR(dev, "bo %p mapped by process trying "
 					      "to validate it!\n", nvbo);
-				ret = -EINVAL;
-				goto out_unref;
+				return -EINVAL;
 			}
 
 			ret = ttm_bo_wait_cpu(&nvbo->bo, false);
 			if (ret)
-				goto out_unref;
+				return ret;
 			goto retry;
 		}
 	}
 
-	b = pbbo;
-	list_for_each_safe(entry, tmp, list) {
-		nvbo = list_entry(entry, struct nouveau_bo, entry);
+	return 0;
+}
+
+static int
+validate_list(struct nouveau_channel *chan, struct list_head *list,
+	      struct drm_nouveau_gem_pushbuf_bo *pbbo, uint64_t user_pbbo_ptr)
+{
+	struct drm_nouveau_gem_pushbuf_bo __user *upbbo =
+				(void __force __user *)(uintptr_t)user_pbbo_ptr;
+	struct nouveau_bo *nvbo;
+	int ret, relocs = 0;
+
+	list_for_each_entry(nvbo, list, entry) {
+		struct drm_nouveau_gem_pushbuf_bo *b = &pbbo[nvbo->pbbo_index];
+		struct nouveau_fence *prev_fence = nvbo->bo.sync_obj;
 
-		prev_fence = nvbo->bo.sync_obj;
 		if (prev_fence && nouveau_fence_channel(prev_fence) != chan) {
 			spin_lock(&nvbo->bo.lock);
 			ret = ttm_bo_wait(&nvbo->bo, false, false, false);
 			spin_unlock(&nvbo->bo.lock);
-			if (ret)
-				goto out_unref;
+			if (unlikely(ret))
+				return ret;
 		}
 
 		ret = nouveau_gem_set_domain(nvbo->gem, b->read_domains,
 					     b->write_domains,
 					     b->valid_domains);
-		if (ret)
-			goto out_unref;
+		if (unlikely(ret))
+			return ret;
 
 		nvbo->channel = chan;
 		ret = ttm_bo_validate(&nvbo->bo, &nvbo->placement,
 				      false, false);
 		nvbo->channel = NULL;
-		if (ret)
-			goto out_unref;
+		if (unlikely(ret))
+			return ret;
 
 		if (nvbo->bo.offset == b->presumed_offset &&
 		    ((nvbo->bo.mem.mem_type == TTM_PL_VRAM &&
 		      b->presumed_domain & NOUVEAU_GEM_DOMAIN_VRAM) ||
 		     (nvbo->bo.mem.mem_type == TTM_PL_TT &&
-		      b->presumed_domain & NOUVEAU_GEM_DOMAIN_GART))) {
-			b++;
-			user_pbbos++;
+		      b->presumed_domain & NOUVEAU_GEM_DOMAIN_GART)))
 			continue;
-		}
 
 		if (nvbo->bo.mem.mem_type == TTM_PL_TT)
 			b->presumed_domain = NOUVEAU_GEM_DOMAIN_GART;
@@ -386,22 +391,58 @@ retry:
 			b->presumed_domain = NOUVEAU_GEM_DOMAIN_VRAM;
 		b->presumed_offset = nvbo->bo.offset;
 		b->presumed_ok = 0;
-		(*apply_relocs)++;
-
-		if (DRM_COPY_TO_USER(user_pbbos, b, sizeof(*b))) {
-			ret = -EFAULT;
-			goto out_unref;
-		}
+		relocs++;
 
-		b++;
-		user_pbbos++;
+		if (DRM_COPY_TO_USER(&upbbo[nvbo->pbbo_index], b, sizeof(*b)))
+			return -EFAULT;
 	}
 
-out_unref:
+	return relocs;
+}
+
+static int
+nouveau_gem_pushbuf_validate(struct nouveau_channel *chan,
+			     struct drm_file *file_priv,
+			     struct drm_nouveau_gem_pushbuf_bo *pbbo,
+			     uint64_t user_buffers, int nr_buffers,
+			     struct validate_op *op, int *apply_relocs)
+{
+	int ret, relocs = 0;
+
+	INIT_LIST_HEAD(&op->vram_list);
+	INIT_LIST_HEAD(&op->gart_list);
+	INIT_LIST_HEAD(&op->both_list);
+
+	if (nr_buffers == 0)
+		return 0;
+
+	ret = validate_init(chan, file_priv, pbbo, nr_buffers, op);
 	if (unlikely(ret))
-		nouveau_gem_pushbuf_backoff(list);
+		return ret;
 
-	return ret;
+	ret = validate_list(chan, &op->vram_list, pbbo, user_buffers);
+	if (unlikely(ret < 0)) {
+		validate_fini(op, NULL);
+		return ret;
+	}
+	relocs += ret;
+
+	ret = validate_list(chan, &op->gart_list, pbbo, user_buffers);
+	if (unlikely(ret < 0)) {
+		validate_fini(op, NULL);
+		return ret;
+	}
+	relocs += ret;
+
+	ret = validate_list(chan, &op->both_list, pbbo, user_buffers);
+	if (unlikely(ret < 0)) {
+		validate_fini(op, NULL);
+		return ret;
+	}
+	relocs += ret;
+
+	*apply_relocs = relocs;
+	return 0;
 }
 
 static inline void *
@@ -487,9 +528,9 @@ nouveau_gem_ioctl_pushbuf(struct drm_device *dev, void *data,
 {
 	struct drm_nouveau_gem_pushbuf *req = data;
 	struct drm_nouveau_gem_pushbuf_bo *bo = NULL;
-	struct nouveau_fence *fence = NULL;
 	struct nouveau_channel *chan;
-	struct list_head list;
+	struct validate_op op;
+	struct nouveau_fence* fence = 0;
 	uint32_t *pushbuf = NULL;
 	int ret = 0, do_reloc = 0, i;
 
@@ -521,15 +562,9 @@ nouveau_gem_ioctl_pushbuf(struct drm_device *dev, void *data,
 
 	mutex_lock(&dev->struct_mutex);
 
-	INIT_LIST_HEAD(&list);
-
 	/* Validate buffer list */
-	ret = nouveau_fence_new(chan, &fence, false);
-	if (ret)
-		goto out;
-
 	ret = nouveau_gem_pushbuf_validate(chan, file_priv, bo, req->buffers,
-					   req->nr_buffers, &list, &do_reloc);
+					   req->nr_buffers, &op, &do_reloc);
 	if (ret)
 		goto out;
 
@@ -552,15 +587,13 @@ nouveau_gem_ioctl_pushbuf(struct drm_device *dev, void *data,
 
 	OUT_RINGp(chan, pushbuf, req->nr_dwords);
 
-	ret = nouveau_fence_emit(fence);
+	ret = nouveau_fence_new(chan, &fence, true);
 	if (ret) {
 		NV_ERROR(dev, "error fencing pushbuf: %d\n", ret);
 		WIND_RING(chan);
 		goto out;
 	}
 
-	nouveau_gem_pushbuf_fence(&list, fence);
-
 	if (nouveau_gem_pushbuf_sync(chan)) {
 		ret = nouveau_fence_wait(fence, NULL, false, false);
 		if (ret) {
@@ -569,13 +602,11 @@ nouveau_gem_ioctl_pushbuf(struct drm_device *dev, void *data,
 			NV_ERROR(dev, "^^ above push buffer is fail :(\n");
 		}
 	}
-out:
-	if (unlikely(ret))
-		nouveau_gem_pushbuf_backoff(&list);
-	nouveau_fence_unref((void *)&fence);
 
+out:
+	validate_fini(&op, fence);
+	nouveau_fence_unref((void**)&fence);
 	mutex_unlock(&dev->struct_mutex);
-
 	kfree(pushbuf);
 	kfree(bo);
 	return ret;
@@ -590,11 +621,11 @@ nouveau_gem_ioctl_pushbuf_call(struct drm_device *dev, void *data,
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	struct drm_nouveau_gem_pushbuf_call *req = data;
 	struct drm_nouveau_gem_pushbuf_bo *bo = NULL;
-	struct nouveau_fence *fence = NULL;
 	struct nouveau_channel *chan;
 	struct drm_gem_object *gem;
 	struct nouveau_bo *pbbo;
-	struct list_head list;
+	struct validate_op op;
+	struct nouveau_fence* fence = 0;
 	int i, ret = 0, do_reloc = 0;
 
 	NOUVEAU_CHECK_INITIALISED_WITH_RETURN;
@@ -619,17 +650,9 @@ nouveau_gem_ioctl_pushbuf_call(struct drm_device *dev, void *data,
 
 	mutex_lock(&dev->struct_mutex);
 
-	INIT_LIST_HEAD(&list);
-
 	/* Validate buffer list */
-	ret = nouveau_fence_new(chan, &fence, false);
-	if (ret) {
-		NV_ERROR(dev, "fence new\n");
-		goto out;
-	}
-
 	ret = nouveau_gem_pushbuf_validate(chan, file_priv, bo, req->buffers,
-					   req->nr_buffers, &list, &do_reloc);
+					   req->nr_buffers, &op, &do_reloc);
 	if (ret) {
 		NV_ERROR(dev, "validate: %d\n", ret);
 		goto out;
@@ -661,7 +684,7 @@ nouveau_gem_ioctl_pushbuf_call(struct drm_device *dev, void *data,
 		goto out;
 	}
 
-	list_add_tail(&pbbo->entry, &list);
+	list_add_tail(&pbbo->entry, &op.both_list);
 
 	/* If presumed return address doesn't match, we need to map the
 	 * push buffer and fix it..
@@ -741,23 +764,17 @@ nouveau_gem_ioctl_pushbuf_call(struct drm_device *dev, void *data,
 			OUT_RING(chan, 0);
 	}
 
-	ret = nouveau_fence_emit(fence);
+	ret = nouveau_fence_new(chan, &fence, true);
 	if (ret) {
 		NV_ERROR(dev, "error fencing pushbuf: %d\n", ret);
 		WIND_RING(chan);
 		goto out;
 	}
 
-	nouveau_gem_pushbuf_fence(&list, fence);
-
-	FIRE_RING(chan);
 out:
-	if (unlikely(ret))
-		nouveau_gem_pushbuf_backoff(&list);
-	nouveau_fence_unref((void *)&fence);
-
+	validate_fini(&op, fence);
+	nouveau_fence_unref((void**)&fence);
 	mutex_unlock(&dev->struct_mutex);
-
 	kfree(bo);
 
 out_next:
diff --git a/drivers/gpu/drm/nouveau/nouveau_grctx.c b/drivers/gpu/drm/nouveau/nouveau_grctx.c
new file mode 100644
index 0000000..419f4c2
--- /dev/null
+++ b/drivers/gpu/drm/nouveau/nouveau_grctx.c
@@ -0,0 +1,161 @@
+/*
+ * Copyright 2009 Red Hat Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
+ * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+ * OTHER DEALINGS IN THE SOFTWARE.
+ *
+ * Authors: Ben Skeggs
+ */
+
+#include <linux/firmware.h>
+
+#include "drmP.h"
+#include "nouveau_drv.h"
+
+struct nouveau_ctxprog {
+	uint32_t signature;
+	uint8_t  version;
+	uint16_t length;
+	uint32_t data[];
+} __attribute__ ((packed));
+
+struct nouveau_ctxvals {
+	uint32_t signature;
+	uint8_t  version;
+	uint32_t length;
+	struct {
+		uint32_t offset;
+		uint32_t value;
+	} data[];
+} __attribute__ ((packed));
+
+int
+nouveau_grctx_prog_load(struct drm_device *dev)
+{
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	struct nouveau_pgraph_engine *pgraph = &dev_priv->engine.graph;
+	const int chipset = dev_priv->chipset;
+	const struct firmware *fw;
+	const struct nouveau_ctxprog *cp;
+	const struct nouveau_ctxvals *cv;
+	char name[32];
+	int ret, i;
+
+	if (pgraph->accel_blocked)
+		return -ENODEV;
+
+	if (!pgraph->ctxprog) {
+		sprintf(name, "nouveau/nv%02x.ctxprog", chipset);
+		ret = request_firmware(&fw, name, &dev->pdev->dev);
+		if (ret) {
+			NV_ERROR(dev, "No ctxprog for NV%02x\n", chipset);
+			return ret;
+		}
+
+		pgraph->ctxprog = kmalloc(fw->size, GFP_KERNEL);
+		if (!pgraph->ctxprog) {
+			NV_ERROR(dev, "OOM copying ctxprog\n");
+			release_firmware(fw);
+			return -ENOMEM;
+		}
+		memcpy(pgraph->ctxprog, fw->data, fw->size);
+
+		cp = pgraph->ctxprog;
+		if (le32_to_cpu(cp->signature) != 0x5043564e ||
+		    cp->version != 0 ||
+		    le16_to_cpu(cp->length) != ((fw->size - 7) / 4)) {
+			NV_ERROR(dev, "ctxprog invalid\n");
+			release_firmware(fw);
+			nouveau_grctx_fini(dev);
+			return -EINVAL;
+		}
+		release_firmware(fw);
+	}
+
+	if (!pgraph->ctxvals) {
+		sprintf(name, "nouveau/nv%02x.ctxvals", chipset);
+		ret = request_firmware(&fw, name, &dev->pdev->dev);
+		if (ret) {
+			NV_ERROR(dev, "No ctxvals for NV%02x\n", chipset);
+			nouveau_grctx_fini(dev);
+			return ret;
+		}
+
+		pgraph->ctxvals = kmalloc(fw->size, GFP_KERNEL);
+		if (!pgraph->ctxprog) {
+			NV_ERROR(dev, "OOM copying ctxprog\n");
+			release_firmware(fw);
+			nouveau_grctx_fini(dev);
+			return -ENOMEM;
+		}
+		memcpy(pgraph->ctxvals, fw->data, fw->size);
+
+		cv = (void *)pgraph->ctxvals;
+		if (le32_to_cpu(cv->signature) != 0x5643564e ||
+		    cv->version != 0 ||
+		    le32_to_cpu(cv->length) != ((fw->size - 9) / 8)) {
+			NV_ERROR(dev, "ctxvals invalid\n");
+			release_firmware(fw);
+			nouveau_grctx_fini(dev);
+			return -EINVAL;
+		}
+		release_firmware(fw);
+	}
+
+	cp = pgraph->ctxprog;
+
+	nv_wr32(dev, NV40_PGRAPH_CTXCTL_UCODE_INDEX, 0);
+	for (i = 0; i < le16_to_cpu(cp->length); i++)
+		nv_wr32(dev, NV40_PGRAPH_CTXCTL_UCODE_DATA,
+			le32_to_cpu(cp->data[i]));
+
+	return 0;
+}
+
+void
+nouveau_grctx_fini(struct drm_device *dev)
+{
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	struct nouveau_pgraph_engine *pgraph = &dev_priv->engine.graph;
+
+	if (pgraph->ctxprog) {
+		kfree(pgraph->ctxprog);
+		pgraph->ctxprog = NULL;
+	}
+
+	if (pgraph->ctxvals) {
+		kfree(pgraph->ctxprog);
+		pgraph->ctxvals = NULL;
+	}
+}
+
+void
+nouveau_grctx_vals_load(struct drm_device *dev, struct nouveau_gpuobj *ctx)
+{
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	struct nouveau_pgraph_engine *pgraph = &dev_priv->engine.graph;
+	struct nouveau_ctxvals *cv = pgraph->ctxvals;
+	int i;
+
+	if (!cv)
+		return;
+
+	for (i = 0; i < le32_to_cpu(cv->length); i++)
+		nv_wo32(dev, ctx, le32_to_cpu(cv->data[i].offset),
+			le32_to_cpu(cv->data[i].value));
+}
diff --git a/drivers/gpu/drm/nouveau/nouveau_grctx.h b/drivers/gpu/drm/nouveau/nouveau_grctx.h
new file mode 100644
index 0000000..5d39c4c
--- /dev/null
+++ b/drivers/gpu/drm/nouveau/nouveau_grctx.h
@@ -0,0 +1,133 @@
+#ifndef __NOUVEAU_GRCTX_H__
+#define __NOUVEAU_GRCTX_H__
+
+struct nouveau_grctx {
+	struct drm_device *dev;
+
+	enum {
+		NOUVEAU_GRCTX_PROG,
+		NOUVEAU_GRCTX_VALS
+	} mode;
+	void *data;
+
+	uint32_t ctxprog_max;
+	uint32_t ctxprog_len;
+	uint32_t ctxprog_reg;
+	int      ctxprog_label[32];
+	uint32_t ctxvals_pos;
+	uint32_t ctxvals_base;
+};
+
+#ifdef CP_CTX
+static inline void
+cp_out(struct nouveau_grctx *ctx, uint32_t inst)
+{
+	uint32_t *ctxprog = ctx->data;
+
+	if (ctx->mode != NOUVEAU_GRCTX_PROG)
+		return;
+
+	BUG_ON(ctx->ctxprog_len == ctx->ctxprog_max);
+	ctxprog[ctx->ctxprog_len++] = inst;
+}
+
+static inline void
+cp_lsr(struct nouveau_grctx *ctx, uint32_t val)
+{
+	cp_out(ctx, CP_LOAD_SR | val);
+}
+
+static inline void
+cp_ctx(struct nouveau_grctx *ctx, uint32_t reg, uint32_t length)
+{
+	ctx->ctxprog_reg = (reg - 0x00400000) >> 2;
+
+	ctx->ctxvals_base = ctx->ctxvals_pos;
+	ctx->ctxvals_pos = ctx->ctxvals_base + length;
+
+	if (length > (CP_CTX_COUNT >> CP_CTX_COUNT_SHIFT)) {
+		cp_lsr(ctx, length);
+		length = 0;
+	}
+
+	cp_out(ctx, CP_CTX | (length << CP_CTX_COUNT_SHIFT) | ctx->ctxprog_reg);
+}
+
+static inline void
+cp_name(struct nouveau_grctx *ctx, int name)
+{
+	uint32_t *ctxprog = ctx->data;
+	int i;
+
+	if (ctx->mode != NOUVEAU_GRCTX_PROG)
+		return;
+
+	ctx->ctxprog_label[name] = ctx->ctxprog_len;
+	for (i = 0; i < ctx->ctxprog_len; i++) {
+		if ((ctxprog[i] & 0xfff00000) != 0xff400000)
+			continue;
+		if ((ctxprog[i] & CP_BRA_IP) != ((name) << CP_BRA_IP_SHIFT))
+			continue;
+		ctxprog[i] = (ctxprog[i] & 0x00ff00ff) |
+			     (ctx->ctxprog_len << CP_BRA_IP_SHIFT);
+	}
+}
+
+static inline void
+_cp_bra(struct nouveau_grctx *ctx, u32 mod, int flag, int state, int name)
+{
+	int ip = 0;
+
+	if (mod != 2) {
+		ip = ctx->ctxprog_label[name] << CP_BRA_IP_SHIFT;
+		if (ip == 0)
+			ip = 0xff000000 | (name << CP_BRA_IP_SHIFT);
+	}
+
+	cp_out(ctx, CP_BRA | (mod << 18) | ip | flag |
+		    (state ? 0 : CP_BRA_IF_CLEAR));
+}
+#define cp_bra(c,f,s,n) _cp_bra((c), 0, CP_FLAG_##f, CP_FLAG_##f##_##s, n)
+#ifdef CP_BRA_MOD
+#define cp_cal(c,f,s,n) _cp_bra((c), 1, CP_FLAG_##f, CP_FLAG_##f##_##s, n)
+#define cp_ret(c,f,s) _cp_bra((c), 2, CP_FLAG_##f, CP_FLAG_##f##_##s, 0)
+#endif
+
+static inline void
+_cp_wait(struct nouveau_grctx *ctx, int flag, int state)
+{
+	cp_out(ctx, CP_WAIT | flag | (state ? CP_WAIT_SET : 0));
+}
+#define cp_wait(c,f,s) _cp_wait((c), CP_FLAG_##f, CP_FLAG_##f##_##s)
+
+static inline void
+_cp_set(struct nouveau_grctx *ctx, int flag, int state)
+{
+	cp_out(ctx, CP_SET | flag | (state ? CP_SET_1 : 0));
+}
+#define cp_set(c,f,s) _cp_set((c), CP_FLAG_##f, CP_FLAG_##f##_##s)
+
+static inline void
+cp_pos(struct nouveau_grctx *ctx, int offset)
+{
+	ctx->ctxvals_pos = offset;
+	ctx->ctxvals_base = ctx->ctxvals_pos;
+
+	cp_lsr(ctx, ctx->ctxvals_pos);
+	cp_out(ctx, CP_SET_CONTEXT_POINTER);
+}
+
+static inline void
+gr_def(struct nouveau_grctx *ctx, uint32_t reg, uint32_t val)
+{
+	if (ctx->mode != NOUVEAU_GRCTX_VALS)
+		return;
+
+	reg = (reg - 0x00400000) / 4;
+	reg = (reg - ctx->ctxprog_reg) + ctx->ctxvals_base;
+
+	nv_wo32(ctx->dev, ctx->data, reg, val);
+}
+#endif
+
+#endif
diff --git a/drivers/gpu/drm/nouveau/nouveau_hw.c b/drivers/gpu/drm/nouveau/nouveau_hw.c
index e78ee53..dc46792 100644
--- a/drivers/gpu/drm/nouveau/nouveau_hw.c
+++ b/drivers/gpu/drm/nouveau/nouveau_hw.c
@@ -426,6 +426,7 @@ int
 nouveau_hw_get_pllvals(struct drm_device *dev, enum pll_types plltype,
 		       struct nouveau_pll_vals *pllvals)
 {
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	const uint32_t nv04_regs[MAX_PLL_TYPES] = { NV_PRAMDAC_NVPLL_COEFF,
 						    NV_PRAMDAC_MPLL_COEFF,
 						    NV_PRAMDAC_VPLL_COEFF,
@@ -438,7 +439,7 @@ nouveau_hw_get_pllvals(struct drm_device *dev, enum pll_types plltype,
 	struct pll_lims pll_lim;
 	int ret;
 
-	if (nv_arch(dev) < NV_40)
+	if (dev_priv->card_type < NV_40)
 		reg1 = nv04_regs[plltype];
 	else
 		reg1 = nv40_regs[plltype];
@@ -453,7 +454,7 @@ nouveau_hw_get_pllvals(struct drm_device *dev, enum pll_types plltype,
 		pll2 = nvReadMC(dev, reg2);
 	}
 
-	if (nv_arch(dev) == 0x40 && reg1 >= NV_PRAMDAC_VPLL_COEFF) {
+	if (dev_priv->card_type == 0x40 && reg1 >= NV_PRAMDAC_VPLL_COEFF) {
 		uint32_t ramdac580 = NVReadRAMDAC(dev, 0, NV_PRAMDAC_580);
 
 		/* check whether vpll has been forced into single stage mode */
@@ -657,7 +658,7 @@ nv_save_state_ramdac(struct drm_device *dev, int head,
 	struct nv04_crtc_reg *regp = &state->crtc_reg[head];
 	int i;
 
-	if (nv_arch(dev) >= NV_10)
+	if (dev_priv->card_type >= NV_10)
 		regp->nv10_cursync = NVReadRAMDAC(dev, head, NV_RAMDAC_NV10_CURSYNC);
 
 	nouveau_hw_get_pllvals(dev, head ? VPLL2 : VPLL1, &regp->pllvals);
@@ -710,10 +711,10 @@ nv_save_state_ramdac(struct drm_device *dev, int head,
 
 	regp->fp_margin_color = NVReadRAMDAC(dev, head, NV_PRAMDAC_FP_MARGIN_COLOR);
 
-	if (nv_arch(dev) >= NV_30)
+	if (nv_gf4_disp_arch(dev))
 		regp->ramdac_8c0 = NVReadRAMDAC(dev, head, NV_PRAMDAC_8C0);
 
-	if (nv_arch(dev) == NV_40) {
+	if (dev_priv->card_type == NV_40) {
 		regp->ramdac_a20 = NVReadRAMDAC(dev, head, NV_PRAMDAC_A20);
 		regp->ramdac_a24 = NVReadRAMDAC(dev, head, NV_PRAMDAC_A24);
 		regp->ramdac_a34 = NVReadRAMDAC(dev, head, NV_PRAMDAC_A34);
@@ -733,7 +734,7 @@ nv_load_state_ramdac(struct drm_device *dev, int head,
 	uint32_t pllreg = head ? NV_RAMDAC_VPLL2 : NV_PRAMDAC_VPLL_COEFF;
 	int i;
 
-	if (nv_arch(dev) >= NV_10)
+	if (dev_priv->card_type >= NV_10)
 		NVWriteRAMDAC(dev, head, NV_RAMDAC_NV10_CURSYNC, regp->nv10_cursync);
 
 	nouveau_hw_setpll(dev, pllreg, &regp->pllvals);
@@ -781,10 +782,10 @@ nv_load_state_ramdac(struct drm_device *dev, int head,
 
 	NVWriteRAMDAC(dev, head, NV_PRAMDAC_FP_MARGIN_COLOR, regp->fp_margin_color);
 
-	if (nv_arch(dev) >= NV_30)
+	if (nv_gf4_disp_arch(dev))
 		NVWriteRAMDAC(dev, head, NV_PRAMDAC_8C0, regp->ramdac_8c0);
 
-	if (nv_arch(dev) == NV_40) {
+	if (dev_priv->card_type == NV_40) {
 		NVWriteRAMDAC(dev, head, NV_PRAMDAC_A20, regp->ramdac_a20);
 		NVWriteRAMDAC(dev, head, NV_PRAMDAC_A24, regp->ramdac_a24);
 		NVWriteRAMDAC(dev, head, NV_PRAMDAC_A34, regp->ramdac_a34);
@@ -849,6 +850,7 @@ static void
 nv_save_state_ext(struct drm_device *dev, int head,
 		  struct nv04_mode_state *state)
 {
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	struct nv04_crtc_reg *regp = &state->crtc_reg[head];
 	int i;
 
@@ -863,7 +865,7 @@ nv_save_state_ext(struct drm_device *dev, int head,
 	rd_cio_state(dev, head, regp, NV_CIO_CRE_FF_INDEX);
 	rd_cio_state(dev, head, regp, NV_CIO_CRE_FFLWM__INDEX);
 	rd_cio_state(dev, head, regp, NV_CIO_CRE_21);
-	if (nv_arch(dev) >= NV_30)
+	if (dev_priv->card_type >= NV_30)
 		rd_cio_state(dev, head, regp, NV_CIO_CRE_47);
 	rd_cio_state(dev, head, regp, NV_CIO_CRE_49);
 	rd_cio_state(dev, head, regp, NV_CIO_CRE_HCUR_ADDR0_INDEX);
@@ -871,14 +873,14 @@ nv_save_state_ext(struct drm_device *dev, int head,
 	rd_cio_state(dev, head, regp, NV_CIO_CRE_HCUR_ADDR2_INDEX);
 	rd_cio_state(dev, head, regp, NV_CIO_CRE_ILACE__INDEX);
 
-	if (nv_arch(dev) >= NV_10) {
+	if (dev_priv->card_type >= NV_10) {
 		regp->crtc_830 = NVReadCRTC(dev, head, NV_PCRTC_830);
 		regp->crtc_834 = NVReadCRTC(dev, head, NV_PCRTC_834);
 
-		if (nv_arch(dev) >= NV_30)
+		if (dev_priv->card_type >= NV_30)
 			regp->gpio_ext = NVReadCRTC(dev, head, NV_PCRTC_GPIO_EXT);
 
-		if (nv_arch(dev) == NV_40)
+		if (dev_priv->card_type == NV_40)
 			regp->crtc_850 = NVReadCRTC(dev, head, NV_PCRTC_850);
 
 		if (nv_two_heads(dev))
@@ -890,7 +892,7 @@ nv_save_state_ext(struct drm_device *dev, int head,
 
 	rd_cio_state(dev, head, regp, NV_CIO_CRE_SCRATCH3__INDEX);
 	rd_cio_state(dev, head, regp, NV_CIO_CRE_SCRATCH4__INDEX);
-	if (nv_arch(dev) >= NV_10) {
+	if (dev_priv->card_type >= NV_10) {
 		rd_cio_state(dev, head, regp, NV_CIO_CRE_EBR_INDEX);
 		rd_cio_state(dev, head, regp, NV_CIO_CRE_CSB);
 		rd_cio_state(dev, head, regp, NV_CIO_CRE_4B);
@@ -922,7 +924,7 @@ nv_load_state_ext(struct drm_device *dev, int head,
 	uint32_t reg900;
 	int i;
 
-	if (nv_arch(dev) >= NV_10) {
+	if (dev_priv->card_type >= NV_10) {
 		if (nv_two_heads(dev))
 			/* setting ENGINE_CTRL (EC) *must* come before
 			 * CIO_CRE_LCD, as writing CRE_LCD sets bits 16 & 17 in
@@ -944,10 +946,10 @@ nv_load_state_ext(struct drm_device *dev, int head,
 		NVWriteCRTC(dev, head, NV_PCRTC_830, regp->crtc_830);
 		NVWriteCRTC(dev, head, NV_PCRTC_834, regp->crtc_834);
 
-		if (nv_arch(dev) >= NV_30)
+		if (dev_priv->card_type >= NV_30)
 			NVWriteCRTC(dev, head, NV_PCRTC_GPIO_EXT, regp->gpio_ext);
 
-		if (nv_arch(dev) == NV_40) {
+		if (dev_priv->card_type == NV_40) {
 			NVWriteCRTC(dev, head, NV_PCRTC_850, regp->crtc_850);
 
 			reg900 = NVReadRAMDAC(dev, head, NV_PRAMDAC_900);
@@ -969,20 +971,20 @@ nv_load_state_ext(struct drm_device *dev, int head,
 	wr_cio_state(dev, head, regp, NV_CIO_CRE_ENH_INDEX);
 	wr_cio_state(dev, head, regp, NV_CIO_CRE_FF_INDEX);
 	wr_cio_state(dev, head, regp, NV_CIO_CRE_FFLWM__INDEX);
-	if (nv_arch(dev) >= NV_30)
+	if (dev_priv->card_type >= NV_30)
 		wr_cio_state(dev, head, regp, NV_CIO_CRE_47);
 
 	wr_cio_state(dev, head, regp, NV_CIO_CRE_49);
 	wr_cio_state(dev, head, regp, NV_CIO_CRE_HCUR_ADDR0_INDEX);
 	wr_cio_state(dev, head, regp, NV_CIO_CRE_HCUR_ADDR1_INDEX);
 	wr_cio_state(dev, head, regp, NV_CIO_CRE_HCUR_ADDR2_INDEX);
-	if (nv_arch(dev) == NV_40)
+	if (dev_priv->card_type == NV_40)
 		nv_fix_nv40_hw_cursor(dev, head);
 	wr_cio_state(dev, head, regp, NV_CIO_CRE_ILACE__INDEX);
 
 	wr_cio_state(dev, head, regp, NV_CIO_CRE_SCRATCH3__INDEX);
 	wr_cio_state(dev, head, regp, NV_CIO_CRE_SCRATCH4__INDEX);
-	if (nv_arch(dev) >= NV_10) {
+	if (dev_priv->card_type >= NV_10) {
 		wr_cio_state(dev, head, regp, NV_CIO_CRE_EBR_INDEX);
 		wr_cio_state(dev, head, regp, NV_CIO_CRE_CSB);
 		wr_cio_state(dev, head, regp, NV_CIO_CRE_4B);
@@ -990,7 +992,7 @@ nv_load_state_ext(struct drm_device *dev, int head,
 	}
 	/* NV11 and NV20 stop at 0x52. */
 	if (nv_gf4_disp_arch(dev)) {
-		if (nv_arch(dev) == NV_10) {
+		if (dev_priv->card_type == NV_10) {
 			/* Not waiting for vertical retrace before modifying
 			   CRE_53/CRE_54 causes lockups. */
 			nouveau_wait_until(dev, 650000000, NV_PRMCIO_INP0__COLOR, 0x8, 0x8);
diff --git a/drivers/gpu/drm/nouveau/nouveau_hw.h b/drivers/gpu/drm/nouveau/nouveau_hw.h
index ff4993a..869130f 100644
--- a/drivers/gpu/drm/nouveau/nouveau_hw.h
+++ b/drivers/gpu/drm/nouveau/nouveau_hw.h
@@ -230,10 +230,12 @@ static inline uint8_t NVReadVgaCrtc5758(struct drm_device *dev, int head, uint8_
 static inline uint8_t NVReadPRMVIO(struct drm_device *dev,
 					int head, uint32_t reg)
 {
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	uint8_t val;
+
 	/* Only NV4x have two pvio ranges; other twoHeads cards MUST call
 	 * NVSetOwner for the relevant head to be programmed */
-	if (head && nv_arch(dev) == NV_40)
+	if (head && dev_priv->card_type == NV_40)
 		reg += NV_PRMVIO_SIZE;
 
 	val = nv_rd08(dev, reg);
@@ -244,9 +246,11 @@ static inline uint8_t NVReadPRMVIO(struct drm_device *dev,
 static inline void NVWritePRMVIO(struct drm_device *dev,
 					int head, uint32_t reg, uint8_t value)
 {
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+
 	/* Only NV4x have two pvio ranges; other twoHeads cards MUST call
 	 * NVSetOwner for the relevant head to be programmed */
-	if (head && nv_arch(dev) == NV_40)
+	if (head && dev_priv->card_type == NV_40)
 		reg += NV_PRMVIO_SIZE;
 
 	NV_REG_DEBUG(RMVIO, dev, "head %d reg %08x val %02x\n",
@@ -394,7 +398,9 @@ NVLockVgaCrtcs(struct drm_device *dev, bool lock)
 
 static inline int nv_cursor_width(struct drm_device *dev)
 {
-	return nv_arch(dev) >= NV_10 ? NV10_CURSOR_SIZE : NV04_CURSOR_SIZE;
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+
+	return dev_priv->card_type >= NV_10 ? NV10_CURSOR_SIZE : NV04_CURSOR_SIZE;
 }
 
 static inline void
@@ -422,13 +428,14 @@ nv_show_cursor(struct drm_device *dev, int head, bool show)
 		*curctl1 &= ~MASK(NV_CIO_CRE_HCUR_ADDR1_ENABLE);
 	NVWriteVgaCrtc(dev, head, NV_CIO_CRE_HCUR_ADDR1_INDEX, *curctl1);
 
-	if (nv_arch(dev) == NV_40)
+	if (dev_priv->card_type == NV_40)
 		nv_fix_nv40_hw_cursor(dev, head);
 }
 
 static inline uint32_t
 nv_pitch_align(struct drm_device *dev, uint32_t width, int bpp)
 {
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	int mask;
 
 	if (bpp == 15)
@@ -437,7 +444,7 @@ nv_pitch_align(struct drm_device *dev, uint32_t width, int bpp)
 		bpp = 8;
 
 	/* Alignment requirements taken from the Haiku driver */
-	if (nv_arch(dev) == NV_04)
+	if (dev_priv->card_type == NV_04)
 		mask = 128 / bpp - 1;
 	else
 		mask = 512 / bpp - 1;
diff --git a/drivers/gpu/drm/nouveau/nouveau_i2c.c b/drivers/gpu/drm/nouveau/nouveau_i2c.c
index cca2b6c..70e994d 100644
--- a/drivers/gpu/drm/nouveau/nouveau_i2c.c
+++ b/drivers/gpu/drm/nouveau/nouveau_i2c.c
@@ -172,51 +172,63 @@ nouveau_i2c_init(struct drm_device *dev, struct dcb_i2c_entry *entry, int index)
 	if (i2c == NULL)
 		return -ENOMEM;
 
-	snprintf(i2c->adapter.name, sizeof(i2c->adapter.name),
-		 "nouveau-%s-%d", pci_name(dev->pdev), index);
-	i2c->adapter.owner = THIS_MODULE;
-	i2c->adapter.algo_data = &i2c->algo;
-	i2c->adapter.dev.parent = &dev->pdev->dev;
-	i2c->dev = dev;
-
 	switch (entry->port_type) {
 	case 0:
-		i2c->algo.setsda = nv04_i2c_setsda;
-		i2c->algo.setscl = nv04_i2c_setscl;
-		i2c->algo.getsda = nv04_i2c_getsda;
-		i2c->algo.getscl = nv04_i2c_getscl;
+		i2c->algo.bit.setsda = nv04_i2c_setsda;
+		i2c->algo.bit.setscl = nv04_i2c_setscl;
+		i2c->algo.bit.getsda = nv04_i2c_getsda;
+		i2c->algo.bit.getscl = nv04_i2c_getscl;
 		i2c->rd = entry->read;
 		i2c->wr = entry->write;
 		break;
 	case 4:
-		i2c->algo.setsda = nv4e_i2c_setsda;
-		i2c->algo.setscl = nv4e_i2c_setscl;
-		i2c->algo.getsda = nv4e_i2c_getsda;
-		i2c->algo.getscl = nv4e_i2c_getscl;
+		i2c->algo.bit.setsda = nv4e_i2c_setsda;
+		i2c->algo.bit.setscl = nv4e_i2c_setscl;
+		i2c->algo.bit.getsda = nv4e_i2c_getsda;
+		i2c->algo.bit.getscl = nv4e_i2c_getscl;
 		i2c->rd = 0x600800 + entry->read;
 		i2c->wr = 0x600800 + entry->write;
 		break;
 	case 5:
-		i2c->algo.setsda = nv50_i2c_setsda;
-		i2c->algo.setscl = nv50_i2c_setscl;
-		i2c->algo.getsda = nv50_i2c_getsda;
-		i2c->algo.getscl = nv50_i2c_getscl;
+		i2c->algo.bit.setsda = nv50_i2c_setsda;
+		i2c->algo.bit.setscl = nv50_i2c_setscl;
+		i2c->algo.bit.getsda = nv50_i2c_getsda;
+		i2c->algo.bit.getscl = nv50_i2c_getscl;
 		i2c->rd = nv50_i2c_port[entry->read];
 		i2c->wr = i2c->rd;
 		break;
+	case 6:
+		i2c->rd = entry->read;
+		i2c->wr = entry->write;
+		break;
 	default:
 		NV_ERROR(dev, "DCB I2C port type %d unknown\n",
 			 entry->port_type);
 		kfree(i2c);
 		return -EINVAL;
 	}
-	i2c->algo.udelay = 40;
-	i2c->algo.timeout = usecs_to_jiffies(5000);
-	i2c->algo.data = i2c;
 
+	snprintf(i2c->adapter.name, sizeof(i2c->adapter.name),
+		 "nouveau-%s-%d", pci_name(dev->pdev), index);
+	i2c->adapter.owner = THIS_MODULE;
+	i2c->adapter.dev.parent = &dev->pdev->dev;
+	i2c->dev = dev;
 	i2c_set_adapdata(&i2c->adapter, i2c);
 
-	ret = i2c_bit_add_bus(&i2c->adapter);
+	if (entry->port_type < 6) {
+		i2c->adapter.algo_data = &i2c->algo.bit;
+		i2c->algo.bit.udelay = 40;
+		i2c->algo.bit.timeout = usecs_to_jiffies(5000);
+		i2c->algo.bit.data = i2c;
+		ret = i2c_bit_add_bus(&i2c->adapter);
+	} else {
+		i2c->adapter.algo_data = &i2c->algo.dp;
+		i2c->algo.dp.running = false;
+		i2c->algo.dp.address = 0;
+		i2c->algo.dp.aux_ch = nouveau_dp_i2c_aux_ch;
+		ret = i2c_dp_aux_add_bus(&i2c->adapter);
+	}
+
 	if (ret) {
 		NV_ERROR(dev, "Failed to register i2c %d\n", index);
 		kfree(i2c);
diff --git a/drivers/gpu/drm/nouveau/nouveau_i2c.h b/drivers/gpu/drm/nouveau/nouveau_i2c.h
index 13e099c..c8eaf7a 100644
--- a/drivers/gpu/drm/nouveau/nouveau_i2c.h
+++ b/drivers/gpu/drm/nouveau/nouveau_i2c.h
@@ -26,13 +26,17 @@
 #include <linux/i2c.h>
 #include <linux/i2c-id.h>
 #include <linux/i2c-algo-bit.h>
+#include "drm_dp_helper.h"
 
 struct dcb_i2c_entry;
 
 struct nouveau_i2c_chan {
-	struct drm_device *dev;
 	struct i2c_adapter adapter;
-	struct i2c_algo_bit_data algo;
+	struct drm_device *dev;
+	union {
+		struct i2c_algo_bit_data bit;
+		struct i2c_algo_dp_aux_data dp;
+	} algo;
 	unsigned rd;
 	unsigned wr;
 	unsigned data;
@@ -42,4 +46,7 @@ int nouveau_i2c_init(struct drm_device *, struct dcb_i2c_entry *, int index);
 void nouveau_i2c_fini(struct drm_device *, struct dcb_i2c_entry *);
 struct nouveau_i2c_chan *nouveau_i2c_find(struct drm_device *, int index);
 
+int nouveau_dp_i2c_aux_ch(struct i2c_adapter *, int mode, uint8_t write_byte,
+			  uint8_t *read_byte);
+
 #endif /* __NOUVEAU_I2C_H__ */
diff --git a/drivers/gpu/drm/nouveau/nouveau_irq.c b/drivers/gpu/drm/nouveau/nouveau_irq.c
index 597007a..919a619 100644
--- a/drivers/gpu/drm/nouveau/nouveau_irq.c
+++ b/drivers/gpu/drm/nouveau/nouveau_irq.c
@@ -35,6 +35,7 @@
 #include "nouveau_drm.h"
 #include "nouveau_drv.h"
 #include "nouveau_reg.h"
+#include <linux/ratelimit.h>
 
 /* needed for hotplug irq */
 #include "nouveau_connector.h"
@@ -462,6 +463,14 @@ nouveau_pgraph_intr_notify(struct drm_device *dev, uint32_t nsource)
 		nouveau_graph_dump_trap_info(dev, "PGRAPH_NOTIFY", &trap);
 }
 
+static DEFINE_RATELIMIT_STATE(nouveau_ratelimit_state, 3 * HZ, 20);
+
+static int nouveau_ratelimit(void)
+{
+	return __ratelimit(&nouveau_ratelimit_state);
+}
+
+
 static inline void
 nouveau_pgraph_intr_error(struct drm_device *dev, uint32_t nsource)
 {
@@ -478,7 +487,7 @@ nouveau_pgraph_intr_error(struct drm_device *dev, uint32_t nsource)
 		unhandled = 1;
 	}
 
-	if (unhandled)
+	if (unhandled && nouveau_ratelimit())
 		nouveau_graph_dump_trap_info(dev, "PGRAPH_ERROR", &trap);
 }
 
@@ -494,12 +503,9 @@ nouveau_pgraph_intr_context_switch(struct drm_device *dev)
 
 	switch (dev_priv->card_type) {
 	case NV_04:
-	case NV_05:
 		nv04_graph_context_switch(dev);
 		break;
 	case NV_10:
-	case NV_11:
-	case NV_17:
 		nv10_graph_context_switch(dev);
 		break;
 	default:
@@ -629,6 +635,7 @@ nv50_pgraph_irq_handler(struct drm_device *dev)
 
 		if ((nv_rd32(dev, 0x400500) & isb) != isb)
 			nv_wr32(dev, 0x400500, nv_rd32(dev, 0x400500) | isb);
+		nv_wr32(dev, 0x400824, nv_rd32(dev, 0x400824) & ~(1 << 31));
 	}
 
 	nv_wr32(dev, NV03_PMC_INTR_0, NV_PMC_INTR_0_PGRAPH_PENDING);
diff --git a/drivers/gpu/drm/nouveau/nouveau_mem.c b/drivers/gpu/drm/nouveau/nouveau_mem.c
index 5fabd94..fb9bdd6 100644
--- a/drivers/gpu/drm/nouveau/nouveau_mem.c
+++ b/drivers/gpu/drm/nouveau/nouveau_mem.c
@@ -192,6 +192,92 @@ void nouveau_mem_release(struct drm_file *file_priv, struct mem_block *heap)
 }
 
 /*
+ * NV10-NV40 tiling helpers
+ */
+
+static void
+nv10_mem_set_region_tiling(struct drm_device *dev, int i, uint32_t addr,
+			   uint32_t size, uint32_t pitch)
+{
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	struct nouveau_fifo_engine *pfifo = &dev_priv->engine.fifo;
+	struct nouveau_fb_engine *pfb = &dev_priv->engine.fb;
+	struct nouveau_pgraph_engine *pgraph = &dev_priv->engine.graph;
+	struct nouveau_tile_reg *tile = &dev_priv->tile.reg[i];
+
+	tile->addr = addr;
+	tile->size = size;
+	tile->used = !!pitch;
+	nouveau_fence_unref((void **)&tile->fence);
+
+	if (!pfifo->cache_flush(dev))
+		return;
+
+	pfifo->reassign(dev, false);
+	pfifo->cache_flush(dev);
+	pfifo->cache_pull(dev, false);
+
+	nouveau_wait_for_idle(dev);
+
+	pgraph->set_region_tiling(dev, i, addr, size, pitch);
+	pfb->set_region_tiling(dev, i, addr, size, pitch);
+
+	pfifo->cache_pull(dev, true);
+	pfifo->reassign(dev, true);
+}
+
+struct nouveau_tile_reg *
+nv10_mem_set_tiling(struct drm_device *dev, uint32_t addr, uint32_t size,
+		    uint32_t pitch)
+{
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	struct nouveau_fb_engine *pfb = &dev_priv->engine.fb;
+	struct nouveau_tile_reg *tile = dev_priv->tile.reg, *found = NULL;
+	int i;
+
+	spin_lock(&dev_priv->tile.lock);
+
+	for (i = 0; i < pfb->num_tiles; i++) {
+		if (tile[i].used)
+			/* Tile region in use. */
+			continue;
+
+		if (tile[i].fence &&
+		    !nouveau_fence_signalled(tile[i].fence, NULL))
+			/* Pending tile region. */
+			continue;
+
+		if (max(tile[i].addr, addr) <
+		    min(tile[i].addr + tile[i].size, addr + size))
+			/* Kill an intersecting tile region. */
+			nv10_mem_set_region_tiling(dev, i, 0, 0, 0);
+
+		if (pitch && !found) {
+			/* Free tile region. */
+			nv10_mem_set_region_tiling(dev, i, addr, size, pitch);
+			found = &tile[i];
+		}
+	}
+
+	spin_unlock(&dev_priv->tile.lock);
+
+	return found;
+}
+
+void
+nv10_mem_expire_tiling(struct drm_device *dev, struct nouveau_tile_reg *tile,
+		       struct nouveau_fence *fence)
+{
+	if (fence) {
+		/* Mark it as pending. */
+		tile->fence = fence;
+		nouveau_fence_ref(fence);
+	}
+
+	tile->used = false;
+}
+
+/*
  * NV50 VM helpers
  */
 int
@@ -364,10 +450,11 @@ nouveau_mem_fb_amount_igp(struct drm_device *dev)
 uint64_t nouveau_mem_fb_amount(struct drm_device *dev)
 {
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	uint32_t boot0;
+
 	switch (dev_priv->card_type) {
 	case NV_04:
-	case NV_05: {
-		uint32_t boot0 = nv_rd32(dev, NV03_BOOT_0);
+		boot0 = nv_rd32(dev, NV03_BOOT_0);
 		if (boot0 & 0x00000100)
 			return (((boot0 >> 12) & 0xf) * 2 + 2) * 1024 * 1024;
 
@@ -382,10 +469,7 @@ uint64_t nouveau_mem_fb_amount(struct drm_device *dev)
 			return 4 * 1024 * 1024;
 		}
 		break;
-	}
 	case NV_10:
-	case NV_11:
-	case NV_17:
 	case NV_20:
 	case NV_30:
 	case NV_40:
@@ -409,6 +493,7 @@ uint64_t nouveau_mem_fb_amount(struct drm_device *dev)
 	return 0;
 }
 
+#if __OS_HAS_AGP
 static void nouveau_mem_reset_agp(struct drm_device *dev)
 {
 	uint32_t saved_pci_nv_1, saved_pci_nv_19, pmc_enable;
@@ -434,10 +519,12 @@ static void nouveau_mem_reset_agp(struct drm_device *dev)
 	nv_wr32(dev, NV04_PBUS_PCI_NV_19, saved_pci_nv_19);
 	nv_wr32(dev, NV04_PBUS_PCI_NV_1, saved_pci_nv_1);
 }
+#endif
 
 int
 nouveau_mem_init_agp(struct drm_device *dev)
 {
+#if __OS_HAS_AGP
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	struct drm_agp_info info;
 	struct drm_agp_mode mode;
@@ -473,6 +560,7 @@ nouveau_mem_init_agp(struct drm_device *dev)
 	dev_priv->gart_info.type	= NOUVEAU_GART_AGP;
 	dev_priv->gart_info.aper_base	= info.aperture_base;
 	dev_priv->gart_info.aper_size	= info.aperture_size;
+#endif
 	return 0;
 }
 
@@ -511,6 +599,7 @@ nouveau_mem_init(struct drm_device *dev)
 
 	INIT_LIST_HEAD(&dev_priv->ttm.bo_list);
 	spin_lock_init(&dev_priv->ttm.bo_list_lock);
+	spin_lock_init(&dev_priv->tile.lock);
 
 	dev_priv->fb_available_size = nouveau_mem_fb_amount(dev);
 
diff --git a/drivers/gpu/drm/nouveau/nouveau_object.c b/drivers/gpu/drm/nouveau/nouveau_object.c
index 93379bb..6c2cf81 100644
--- a/drivers/gpu/drm/nouveau/nouveau_object.c
+++ b/drivers/gpu/drm/nouveau/nouveau_object.c
@@ -881,7 +881,7 @@ nouveau_gpuobj_gr_new(struct nouveau_channel *chan, int class,
 	return 0;
 }
 
-static int
+int
 nouveau_gpuobj_sw_new(struct nouveau_channel *chan, int class,
 		      struct nouveau_gpuobj **gpuobj_ret)
 {
diff --git a/drivers/gpu/drm/nouveau/nouveau_reg.h b/drivers/gpu/drm/nouveau/nouveau_reg.h
index 3a5f43a..251f1b3 100644
--- a/drivers/gpu/drm/nouveau/nouveau_reg.h
+++ b/drivers/gpu/drm/nouveau/nouveau_reg.h
@@ -349,19 +349,19 @@
 #define NV04_PGRAPH_BLEND                                  0x00400824
 #define NV04_PGRAPH_STORED_FMT                             0x00400830
 #define NV04_PGRAPH_PATT_COLORRAM                          0x00400900
-#define NV40_PGRAPH_TILE0(i)                               (0x00400900 + (i*16))
-#define NV40_PGRAPH_TLIMIT0(i)                             (0x00400904 + (i*16))
-#define NV40_PGRAPH_TSIZE0(i)                              (0x00400908 + (i*16))
-#define NV40_PGRAPH_TSTATUS0(i)                            (0x0040090C + (i*16))
+#define NV20_PGRAPH_TILE(i)                                (0x00400900 + (i*16))
+#define NV20_PGRAPH_TLIMIT(i)                              (0x00400904 + (i*16))
+#define NV20_PGRAPH_TSIZE(i)                               (0x00400908 + (i*16))
+#define NV20_PGRAPH_TSTATUS(i)                             (0x0040090C + (i*16))
 #define NV10_PGRAPH_TILE(i)                                (0x00400B00 + (i*16))
 #define NV10_PGRAPH_TLIMIT(i)                              (0x00400B04 + (i*16))
 #define NV10_PGRAPH_TSIZE(i)                               (0x00400B08 + (i*16))
 #define NV10_PGRAPH_TSTATUS(i)                             (0x00400B0C + (i*16))
 #define NV04_PGRAPH_U_RAM                                  0x00400D00
-#define NV47_PGRAPH_TILE0(i)                               (0x00400D00 + (i*16))
-#define NV47_PGRAPH_TLIMIT0(i)                             (0x00400D04 + (i*16))
-#define NV47_PGRAPH_TSIZE0(i)                              (0x00400D08 + (i*16))
-#define NV47_PGRAPH_TSTATUS0(i)                            (0x00400D0C + (i*16))
+#define NV47_PGRAPH_TILE(i)                                (0x00400D00 + (i*16))
+#define NV47_PGRAPH_TLIMIT(i)                              (0x00400D04 + (i*16))
+#define NV47_PGRAPH_TSIZE(i)                               (0x00400D08 + (i*16))
+#define NV47_PGRAPH_TSTATUS(i)                             (0x00400D0C + (i*16))
 #define NV04_PGRAPH_V_RAM                                  0x00400D40
 #define NV04_PGRAPH_W_RAM                                  0x00400D80
 #define NV10_PGRAPH_COMBINER0_IN_ALPHA                     0x00400E40
@@ -616,6 +616,40 @@
 #    define NV50_PCONNECTOR_I2C_PORT_4                      0x0000e240
 #    define NV50_PCONNECTOR_I2C_PORT_5                      0x0000e258
 
+#define NV50_AUXCH_DATA_OUT(i,n)             ((n) * 4 + (i) * 0x50 + 0x0000e4c0)
+#define NV50_AUXCH_DATA_OUT__SIZE                                             4
+#define NV50_AUXCH_DATA_IN(i,n)              ((n) * 4 + (i) * 0x50 + 0x0000e4d0)
+#define NV50_AUXCH_DATA_IN__SIZE                                              4
+#define NV50_AUXCH_ADDR(i)                             ((i) * 0x50 + 0x0000e4e0)
+#define NV50_AUXCH_CTRL(i)                             ((i) * 0x50 + 0x0000e4e4)
+#define NV50_AUXCH_CTRL_LINKSTAT                                     0x01000000
+#define NV50_AUXCH_CTRL_LINKSTAT_NOT_READY                           0x00000000
+#define NV50_AUXCH_CTRL_LINKSTAT_READY                               0x01000000
+#define NV50_AUXCH_CTRL_LINKEN                                       0x00100000
+#define NV50_AUXCH_CTRL_LINKEN_DISABLED                              0x00000000
+#define NV50_AUXCH_CTRL_LINKEN_ENABLED                               0x00100000
+#define NV50_AUXCH_CTRL_EXEC                                         0x00010000
+#define NV50_AUXCH_CTRL_EXEC_COMPLETE                                0x00000000
+#define NV50_AUXCH_CTRL_EXEC_IN_PROCESS                              0x00010000
+#define NV50_AUXCH_CTRL_CMD                                          0x0000f000
+#define NV50_AUXCH_CTRL_CMD_SHIFT                                            12
+#define NV50_AUXCH_CTRL_LEN                                          0x0000000f
+#define NV50_AUXCH_CTRL_LEN_SHIFT                                             0
+#define NV50_AUXCH_STAT(i)                             ((i) * 0x50 + 0x0000e4e8)
+#define NV50_AUXCH_STAT_STATE                                        0x10000000
+#define NV50_AUXCH_STAT_STATE_NOT_READY                              0x00000000
+#define NV50_AUXCH_STAT_STATE_READY                                  0x10000000
+#define NV50_AUXCH_STAT_REPLY                                        0x000f0000
+#define NV50_AUXCH_STAT_REPLY_AUX                                    0x00030000
+#define NV50_AUXCH_STAT_REPLY_AUX_ACK                                0x00000000
+#define NV50_AUXCH_STAT_REPLY_AUX_NACK                               0x00010000
+#define NV50_AUXCH_STAT_REPLY_AUX_DEFER                              0x00020000
+#define NV50_AUXCH_STAT_REPLY_I2C                                    0x000c0000
+#define NV50_AUXCH_STAT_REPLY_I2C_ACK                                0x00000000
+#define NV50_AUXCH_STAT_REPLY_I2C_NACK                               0x00040000
+#define NV50_AUXCH_STAT_REPLY_I2C_DEFER                              0x00080000
+#define NV50_AUXCH_STAT_COUNT                                        0x0000001f
+
 #define NV50_PBUS                                           0x00088000
 #define NV50_PBUS__LEN                                             0x1
 #define NV50_PBUS__ESIZE                                        0x1000
@@ -778,6 +812,20 @@
 #define NV50_PDISPLAY_SOR_BACKLIGHT                                  0x0061c084
 #define NV50_PDISPLAY_SOR_BACKLIGHT_ENABLE                           0x80000000
 #define NV50_PDISPLAY_SOR_BACKLIGHT_LEVEL                            0x00000fff
+#define NV50_SOR_DP_CTRL(i,l)            (0x0061c10c + (i) * 0x800 + (l) * 0x80)
+#define NV50_SOR_DP_CTRL_ENHANCED_FRAME_ENABLED                      0x00004000
+#define NV50_SOR_DP_CTRL_LANE_MASK                                   0x001f0000
+#define NV50_SOR_DP_CTRL_LANE_0_ENABLED                              0x00010000
+#define NV50_SOR_DP_CTRL_LANE_1_ENABLED                              0x00020000
+#define NV50_SOR_DP_CTRL_LANE_2_ENABLED                              0x00040000
+#define NV50_SOR_DP_CTRL_LANE_3_ENABLED                              0x00080000
+#define NV50_SOR_DP_CTRL_TRAINING_PATTERN                            0x0f000000
+#define NV50_SOR_DP_CTRL_TRAINING_PATTERN_DISABLED                   0x00000000
+#define NV50_SOR_DP_CTRL_TRAINING_PATTERN_1                          0x01000000
+#define NV50_SOR_DP_CTRL_TRAINING_PATTERN_2                          0x02000000
+#define NV50_SOR_DP_UNK118(i,l)          (0x0061c118 + (i) * 0x800 + (l) * 0x80)
+#define NV50_SOR_DP_UNK120(i,l)          (0x0061c120 + (i) * 0x800 + (l) * 0x80)
+#define NV50_SOR_DP_UNK130(i,l)          (0x0061c130 + (i) * 0x800 + (l) * 0x80)
 
 #define NV50_PDISPLAY_USER(i)                        ((i) * 0x1000 + 0x00640000)
 #define NV50_PDISPLAY_USER_PUT(i)                    ((i) * 0x1000 + 0x00640000)
diff --git a/drivers/gpu/drm/nouveau/nouveau_state.c b/drivers/gpu/drm/nouveau/nouveau_state.c
index 790630d..0c7c182 100644
--- a/drivers/gpu/drm/nouveau/nouveau_state.c
+++ b/drivers/gpu/drm/nouveau/nouveau_state.c
@@ -24,11 +24,12 @@
  */
 
 #include <linux/swab.h>
-
 #include "drmP.h"
 #include "drm.h"
 #include "drm_sarea.h"
 #include "drm_crtc_helper.h"
+#include <linux/vgaarb.h>
+
 #include "nouveau_drv.h"
 #include "nouveau_drm.h"
 #include "nv50_display.h"
@@ -119,6 +120,8 @@ static int nouveau_init_engine_ptrs(struct drm_device *dev)
 		engine->fifo.disable		= nv04_fifo_disable;
 		engine->fifo.enable		= nv04_fifo_enable;
 		engine->fifo.reassign		= nv04_fifo_reassign;
+		engine->fifo.cache_flush	= nv04_fifo_cache_flush;
+		engine->fifo.cache_pull		= nv04_fifo_cache_pull;
 		engine->fifo.channel_id		= nv04_fifo_channel_id;
 		engine->fifo.create_context	= nv04_fifo_create_context;
 		engine->fifo.destroy_context	= nv04_fifo_destroy_context;
@@ -143,6 +146,7 @@ static int nouveau_init_engine_ptrs(struct drm_device *dev)
 		engine->timer.takedown		= nv04_timer_takedown;
 		engine->fb.init			= nv10_fb_init;
 		engine->fb.takedown		= nv10_fb_takedown;
+		engine->fb.set_region_tiling	= nv10_fb_set_region_tiling;
 		engine->graph.grclass		= nv10_graph_grclass;
 		engine->graph.init		= nv10_graph_init;
 		engine->graph.takedown		= nv10_graph_takedown;
@@ -152,12 +156,15 @@ static int nouveau_init_engine_ptrs(struct drm_device *dev)
 		engine->graph.fifo_access	= nv04_graph_fifo_access;
 		engine->graph.load_context	= nv10_graph_load_context;
 		engine->graph.unload_context	= nv10_graph_unload_context;
+		engine->graph.set_region_tiling	= nv10_graph_set_region_tiling;
 		engine->fifo.channels		= 32;
 		engine->fifo.init		= nv10_fifo_init;
 		engine->fifo.takedown		= nouveau_stub_takedown;
 		engine->fifo.disable		= nv04_fifo_disable;
 		engine->fifo.enable		= nv04_fifo_enable;
 		engine->fifo.reassign		= nv04_fifo_reassign;
+		engine->fifo.cache_flush	= nv04_fifo_cache_flush;
+		engine->fifo.cache_pull		= nv04_fifo_cache_pull;
 		engine->fifo.channel_id		= nv10_fifo_channel_id;
 		engine->fifo.create_context	= nv10_fifo_create_context;
 		engine->fifo.destroy_context	= nv10_fifo_destroy_context;
@@ -182,6 +189,7 @@ static int nouveau_init_engine_ptrs(struct drm_device *dev)
 		engine->timer.takedown		= nv04_timer_takedown;
 		engine->fb.init			= nv10_fb_init;
 		engine->fb.takedown		= nv10_fb_takedown;
+		engine->fb.set_region_tiling	= nv10_fb_set_region_tiling;
 		engine->graph.grclass		= nv20_graph_grclass;
 		engine->graph.init		= nv20_graph_init;
 		engine->graph.takedown		= nv20_graph_takedown;
@@ -191,12 +199,15 @@ static int nouveau_init_engine_ptrs(struct drm_device *dev)
 		engine->graph.fifo_access	= nv04_graph_fifo_access;
 		engine->graph.load_context	= nv20_graph_load_context;
 		engine->graph.unload_context	= nv20_graph_unload_context;
+		engine->graph.set_region_tiling	= nv20_graph_set_region_tiling;
 		engine->fifo.channels		= 32;
 		engine->fifo.init		= nv10_fifo_init;
 		engine->fifo.takedown		= nouveau_stub_takedown;
 		engine->fifo.disable		= nv04_fifo_disable;
 		engine->fifo.enable		= nv04_fifo_enable;
 		engine->fifo.reassign		= nv04_fifo_reassign;
+		engine->fifo.cache_flush	= nv04_fifo_cache_flush;
+		engine->fifo.cache_pull		= nv04_fifo_cache_pull;
 		engine->fifo.channel_id		= nv10_fifo_channel_id;
 		engine->fifo.create_context	= nv10_fifo_create_context;
 		engine->fifo.destroy_context	= nv10_fifo_destroy_context;
@@ -221,6 +232,7 @@ static int nouveau_init_engine_ptrs(struct drm_device *dev)
 		engine->timer.takedown		= nv04_timer_takedown;
 		engine->fb.init			= nv10_fb_init;
 		engine->fb.takedown		= nv10_fb_takedown;
+		engine->fb.set_region_tiling	= nv10_fb_set_region_tiling;
 		engine->graph.grclass		= nv30_graph_grclass;
 		engine->graph.init		= nv30_graph_init;
 		engine->graph.takedown		= nv20_graph_takedown;
@@ -230,12 +242,15 @@ static int nouveau_init_engine_ptrs(struct drm_device *dev)
 		engine->graph.destroy_context	= nv20_graph_destroy_context;
 		engine->graph.load_context	= nv20_graph_load_context;
 		engine->graph.unload_context	= nv20_graph_unload_context;
+		engine->graph.set_region_tiling	= nv20_graph_set_region_tiling;
 		engine->fifo.channels		= 32;
 		engine->fifo.init		= nv10_fifo_init;
 		engine->fifo.takedown		= nouveau_stub_takedown;
 		engine->fifo.disable		= nv04_fifo_disable;
 		engine->fifo.enable		= nv04_fifo_enable;
 		engine->fifo.reassign		= nv04_fifo_reassign;
+		engine->fifo.cache_flush	= nv04_fifo_cache_flush;
+		engine->fifo.cache_pull		= nv04_fifo_cache_pull;
 		engine->fifo.channel_id		= nv10_fifo_channel_id;
 		engine->fifo.create_context	= nv10_fifo_create_context;
 		engine->fifo.destroy_context	= nv10_fifo_destroy_context;
@@ -261,6 +276,7 @@ static int nouveau_init_engine_ptrs(struct drm_device *dev)
 		engine->timer.takedown		= nv04_timer_takedown;
 		engine->fb.init			= nv40_fb_init;
 		engine->fb.takedown		= nv40_fb_takedown;
+		engine->fb.set_region_tiling	= nv40_fb_set_region_tiling;
 		engine->graph.grclass		= nv40_graph_grclass;
 		engine->graph.init		= nv40_graph_init;
 		engine->graph.takedown		= nv40_graph_takedown;
@@ -270,12 +286,15 @@ static int nouveau_init_engine_ptrs(struct drm_device *dev)
 		engine->graph.destroy_context	= nv40_graph_destroy_context;
 		engine->graph.load_context	= nv40_graph_load_context;
 		engine->graph.unload_context	= nv40_graph_unload_context;
+		engine->graph.set_region_tiling	= nv40_graph_set_region_tiling;
 		engine->fifo.channels		= 32;
 		engine->fifo.init		= nv40_fifo_init;
 		engine->fifo.takedown		= nouveau_stub_takedown;
 		engine->fifo.disable		= nv04_fifo_disable;
 		engine->fifo.enable		= nv04_fifo_enable;
 		engine->fifo.reassign		= nv04_fifo_reassign;
+		engine->fifo.cache_flush	= nv04_fifo_cache_flush;
+		engine->fifo.cache_pull		= nv04_fifo_cache_pull;
 		engine->fifo.channel_id		= nv10_fifo_channel_id;
 		engine->fifo.create_context	= nv40_fifo_create_context;
 		engine->fifo.destroy_context	= nv40_fifo_destroy_context;
@@ -332,12 +351,67 @@ static int nouveau_init_engine_ptrs(struct drm_device *dev)
 	return 0;
 }
 
+static unsigned int
+nouveau_vga_set_decode(void *priv, bool state)
+{
+	if (state)
+		return VGA_RSRC_LEGACY_IO | VGA_RSRC_LEGACY_MEM |
+		       VGA_RSRC_NORMAL_IO | VGA_RSRC_NORMAL_MEM;
+	else
+		return VGA_RSRC_NORMAL_IO | VGA_RSRC_NORMAL_MEM;
+}
+
+static int
+nouveau_card_init_channel(struct drm_device *dev)
+{
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	struct nouveau_gpuobj *gpuobj;
+	int ret;
+
+	ret = nouveau_channel_alloc(dev, &dev_priv->channel,
+				    (struct drm_file *)-2,
+				    NvDmaFB, NvDmaTT);
+	if (ret)
+		return ret;
+
+	gpuobj = NULL;
+	ret = nouveau_gpuobj_dma_new(dev_priv->channel, NV_CLASS_DMA_IN_MEMORY,
+				     0, nouveau_mem_fb_amount(dev),
+				     NV_DMA_ACCESS_RW, NV_DMA_TARGET_VIDMEM,
+				     &gpuobj);
+	if (ret)
+		goto out_err;
+
+	ret = nouveau_gpuobj_ref_add(dev, dev_priv->channel, NvDmaVRAM,
+				     gpuobj, NULL);
+	if (ret)
+		goto out_err;
+
+	gpuobj = NULL;
+	ret = nouveau_gpuobj_gart_dma_new(dev_priv->channel, 0,
+					  dev_priv->gart_info.aper_size,
+					  NV_DMA_ACCESS_RW, &gpuobj, NULL);
+	if (ret)
+		goto out_err;
+
+	ret = nouveau_gpuobj_ref_add(dev, dev_priv->channel, NvDmaGART,
+				     gpuobj, NULL);
+	if (ret)
+		goto out_err;
+
+	return 0;
+out_err:
+	nouveau_gpuobj_del(dev, &gpuobj);
+	nouveau_channel_free(dev_priv->channel);
+	dev_priv->channel = NULL;
+	return ret;
+}
+
 int
 nouveau_card_init(struct drm_device *dev)
 {
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	struct nouveau_engine *engine;
-	struct nouveau_gpuobj *gpuobj;
 	int ret;
 
 	NV_DEBUG(dev, "prev state = %d\n", dev_priv->init_state);
@@ -345,17 +419,12 @@ nouveau_card_init(struct drm_device *dev)
 	if (dev_priv->init_state == NOUVEAU_CARD_INIT_DONE)
 		return 0;
 
-	/* Determine exact chipset we're running on */
-	if (dev_priv->card_type < NV_10)
-		dev_priv->chipset = dev_priv->card_type;
-	else
-		dev_priv->chipset =
-			(nv_rd32(dev, NV03_PMC_BOOT_0) & 0x0ff00000) >> 20;
+	vga_client_register(dev->pdev, dev, NULL, nouveau_vga_set_decode);
 
 	/* Initialise internal driver API hooks */
 	ret = nouveau_init_engine_ptrs(dev);
 	if (ret)
-		return ret;
+		goto out;
 	engine = &dev_priv->engine;
 	dev_priv->init_state = NOUVEAU_CARD_INIT_FAILED;
 
@@ -363,12 +432,12 @@ nouveau_card_init(struct drm_device *dev)
 	if (drm_core_check_feature(dev, DRIVER_MODESET)) {
 		ret = nouveau_bios_init(dev);
 		if (ret)
-			return ret;
+			goto out;
 	}
 
 	ret = nouveau_gpuobj_early_init(dev);
 	if (ret)
-		return ret;
+		goto out_bios;
 
 	/* Initialise instance memory, must happen before mem_init so we
 	 * know exactly how much VRAM we're able to use for "normal"
@@ -376,100 +445,68 @@ nouveau_card_init(struct drm_device *dev)
 	 */
 	ret = engine->instmem.init(dev);
 	if (ret)
-		return ret;
+		goto out_gpuobj_early;
 
 	/* Setup the memory manager */
 	ret = nouveau_mem_init(dev);
 	if (ret)
-		return ret;
+		goto out_instmem;
 
 	ret = nouveau_gpuobj_init(dev);
 	if (ret)
-		return ret;
+		goto out_mem;
 
 	/* PMC */
 	ret = engine->mc.init(dev);
 	if (ret)
-		return ret;
+		goto out_gpuobj;
 
 	/* PTIMER */
 	ret = engine->timer.init(dev);
 	if (ret)
-		return ret;
+		goto out_mc;
 
 	/* PFB */
 	ret = engine->fb.init(dev);
 	if (ret)
-		return ret;
+		goto out_timer;
 
 	/* PGRAPH */
 	ret = engine->graph.init(dev);
 	if (ret)
-		return ret;
+		goto out_fb;
 
 	/* PFIFO */
 	ret = engine->fifo.init(dev);
 	if (ret)
-		return ret;
+		goto out_graph;
 
 	/* this call irq_preinstall, register irq handler and
 	 * call irq_postinstall
 	 */
 	ret = drm_irq_install(dev);
 	if (ret)
-		return ret;
+		goto out_fifo;
 
 	ret = drm_vblank_init(dev, 0);
 	if (ret)
-		return ret;
+		goto out_irq;
 
 	/* what about PVIDEO/PCRTC/PRAMDAC etc? */
 
-	ret = nouveau_channel_alloc(dev, &dev_priv->channel,
-				    (struct drm_file *)-2,
-				    NvDmaFB, NvDmaTT);
-	if (ret)
-		return ret;
-
-	gpuobj = NULL;
-	ret = nouveau_gpuobj_dma_new(dev_priv->channel, NV_CLASS_DMA_IN_MEMORY,
-				     0, nouveau_mem_fb_amount(dev),
-				     NV_DMA_ACCESS_RW, NV_DMA_TARGET_VIDMEM,
-				     &gpuobj);
-	if (ret)
-		return ret;
-
-	ret = nouveau_gpuobj_ref_add(dev, dev_priv->channel, NvDmaVRAM,
-				     gpuobj, NULL);
-	if (ret) {
-		nouveau_gpuobj_del(dev, &gpuobj);
-		return ret;
-	}
-
-	gpuobj = NULL;
-	ret = nouveau_gpuobj_gart_dma_new(dev_priv->channel, 0,
-					  dev_priv->gart_info.aper_size,
-					  NV_DMA_ACCESS_RW, &gpuobj, NULL);
-	if (ret)
-		return ret;
-
-	ret = nouveau_gpuobj_ref_add(dev, dev_priv->channel, NvDmaGART,
-				     gpuobj, NULL);
-	if (ret) {
-		nouveau_gpuobj_del(dev, &gpuobj);
-		return ret;
+	if (!engine->graph.accel_blocked) {
+		ret = nouveau_card_init_channel(dev);
+		if (ret)
+			goto out_irq;
 	}
 
 	if (drm_core_check_feature(dev, DRIVER_MODESET)) {
-		if (dev_priv->card_type >= NV_50) {
+		if (dev_priv->card_type >= NV_50)
 			ret = nv50_display_create(dev);
-			if (ret)
-				return ret;
-		} else {
+		else
 			ret = nv04_display_create(dev);
-			if (ret)
-				return ret;
-		}
+		if (ret)
+			goto out_irq;
 	}
 
 	ret = nouveau_backlight_init(dev);
@@ -482,6 +519,32 @@ nouveau_card_init(struct drm_device *dev)
 		drm_helper_initial_config(dev);
 
 	return 0;
+
+out_irq:
+	drm_irq_uninstall(dev);
+out_fifo:
+	engine->fifo.takedown(dev);
+out_graph:
+	engine->graph.takedown(dev);
+out_fb:
+	engine->fb.takedown(dev);
+out_timer:
+	engine->timer.takedown(dev);
+out_mc:
+	engine->mc.takedown(dev);
+out_gpuobj:
+	nouveau_gpuobj_takedown(dev);
+out_mem:
+	nouveau_mem_close(dev);
+out_instmem:
+	engine->instmem.takedown(dev);
+out_gpuobj_early:
+	nouveau_gpuobj_late_takedown(dev);
+out_bios:
+	nouveau_bios_takedown(dev);
+out:
+	vga_client_register(dev->pdev, NULL, NULL, NULL);
+	return ret;
 }
 
 static void nouveau_card_takedown(struct drm_device *dev)
@@ -520,6 +583,8 @@ static void nouveau_card_takedown(struct drm_device *dev)
 		nouveau_gpuobj_late_takedown(dev);
 		nouveau_bios_takedown(dev);
 
+		vga_client_register(dev->pdev, NULL, NULL, NULL);
+
 		dev_priv->init_state = NOUVEAU_CARD_INIT_DOWN;
 	}
 }
@@ -565,7 +630,6 @@ int nouveau_load(struct drm_device *dev, unsigned long flags)
 {
 	struct drm_nouveau_private *dev_priv;
 	uint32_t reg0;
-	uint8_t architecture = 0;
 	resource_size_t mmio_start_offs;
 
 	dev_priv = kzalloc(sizeof(*dev_priv), GFP_KERNEL);
@@ -585,6 +649,10 @@ int nouveau_load(struct drm_device *dev, unsigned long flags)
 	if (dev_priv->acpi_dsm)
 		nouveau_hybrid_setup(dev);
 
+	dev_priv->wq = create_workqueue("nouveau");
+	if (!dev_priv->wq)
+		return -EINVAL;
+
 	/* resource 0 is mmio regs */
 	/* resource 1 is linear FB */
 	/* resource 2 is RAMIN (mmio regs + 0x1000000) */
@@ -615,41 +683,41 @@ int nouveau_load(struct drm_device *dev, unsigned long flags)
 	/* We're dealing with >=NV10 */
 	if ((reg0 & 0x0f000000) > 0) {
 		/* Bit 27-20 contain the architecture in hex */
-		architecture = (reg0 & 0xff00000) >> 20;
+		dev_priv->chipset = (reg0 & 0xff00000) >> 20;
 	/* NV04 or NV05 */
 	} else if ((reg0 & 0xff00fff0) == 0x20004000) {
-		architecture = 0x04;
-	}
+		if (reg0 & 0x00f00000)
+			dev_priv->chipset = 0x05;
+		else
+			dev_priv->chipset = 0x04;
+	} else
+		dev_priv->chipset = 0xff;
 
-	if (architecture >= 0x80)
-		dev_priv->card_type = NV_50;
-	else if (architecture >= 0x60)
+	switch (dev_priv->chipset & 0xf0) {
+	case 0x00:
+	case 0x10:
+	case 0x20:
+	case 0x30:
+		dev_priv->card_type = dev_priv->chipset & 0xf0;
+		break;
+	case 0x40:
+	case 0x60:
 		dev_priv->card_type = NV_40;
-	else if (architecture >= 0x50)
+		break;
+	case 0x50:
+	case 0x80:
+	case 0x90:
+	case 0xa0:
 		dev_priv->card_type = NV_50;
-	else if (architecture >= 0x40)
-		dev_priv->card_type = NV_40;
-	else if (architecture >= 0x30)
-		dev_priv->card_type = NV_30;
-	else if (architecture >= 0x20)
-		dev_priv->card_type = NV_20;
-	else if (architecture >= 0x17)
-		dev_priv->card_type = NV_17;
-	else if (architecture >= 0x11)
-		dev_priv->card_type = NV_11;
-	else if (architecture >= 0x10)
-		dev_priv->card_type = NV_10;
-	else if (architecture >= 0x04)
-		dev_priv->card_type = NV_04;
-	else
-		dev_priv->card_type = NV_UNKNOWN;
+		break;
+	default:
+		NV_INFO(dev, "Unsupported chipset 0x%08x\n", reg0);
+		return -EINVAL;
+	}
 
-	NV_INFO(dev, "Detected an NV%d generation card (0x%08x)\n",
+	NV_INFO(dev, "Detected an NV%2x generation card (0x%08x)\n",
 		dev_priv->card_type, reg0);
 
-	if (dev_priv->card_type == NV_UNKNOWN)
-		return -EINVAL;
-
 	/* map larger RAMIN aperture on NV40 cards */
 	dev_priv->ramin  = NULL;
 	if (dev_priv->card_type >= NV_40) {
@@ -701,8 +769,8 @@ static void nouveau_close(struct drm_device *dev)
 {
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
 
-	/* In the case of an error dev_priv may not be be allocated yet */
-	if (dev_priv && dev_priv->card_type)
+	/* In the case of an error dev_priv may not be allocated yet */
+	if (dev_priv)
 		nouveau_card_takedown(dev);
 }
 
diff --git a/drivers/gpu/drm/nouveau/nouveau_ttm.c b/drivers/gpu/drm/nouveau/nouveau_ttm.c
index 7818981..c385d50 100644
--- a/drivers/gpu/drm/nouveau/nouveau_ttm.c
+++ b/drivers/gpu/drm/nouveau/nouveau_ttm.c
@@ -28,45 +28,17 @@
 
 #include "nouveau_drv.h"
 
-static struct vm_operations_struct nouveau_ttm_vm_ops;
-static struct vm_operations_struct *ttm_vm_ops;
-
-static int
-nouveau_ttm_fault(struct vm_area_struct *vma, struct vm_fault *vmf)
-{
-	struct ttm_buffer_object *bo = vma->vm_private_data;
-	int ret;
-
-	if (unlikely(bo == NULL))
-		return VM_FAULT_NOPAGE;
-
-	ret = ttm_vm_ops->fault(vma, vmf);
-	return ret;
-}
-
 int
 nouveau_ttm_mmap(struct file *filp, struct vm_area_struct *vma)
 {
 	struct drm_file *file_priv = filp->private_data;
 	struct drm_nouveau_private *dev_priv =
 		file_priv->minor->dev->dev_private;
-	int ret;
 
 	if (unlikely(vma->vm_pgoff < DRM_FILE_PAGE_OFFSET))
 		return drm_mmap(filp, vma);
 
-	ret = ttm_bo_mmap(filp, vma, &dev_priv->ttm.bdev);
-	if (unlikely(ret != 0))
-		return ret;
-
-	if (unlikely(ttm_vm_ops == NULL)) {
-		ttm_vm_ops = vma->vm_ops;
-		nouveau_ttm_vm_ops = *ttm_vm_ops;
-		nouveau_ttm_vm_ops.fault = &nouveau_ttm_fault;
-	}
-
-	vma->vm_ops = &nouveau_ttm_vm_ops;
-	return 0;
+	return ttm_bo_mmap(filp, vma, &dev_priv->ttm.bdev);
 }
 
 static int
diff --git a/drivers/gpu/drm/nouveau/nv04_crtc.c b/drivers/gpu/drm/nouveau/nv04_crtc.c
index 2ab9f30..d2f143e 100644
--- a/drivers/gpu/drm/nouveau/nv04_crtc.c
+++ b/drivers/gpu/drm/nouveau/nv04_crtc.c
@@ -106,10 +106,8 @@ static void nv_crtc_calc_state_ext(struct drm_crtc *crtc, struct drm_display_mod
 	struct nouveau_crtc *nv_crtc = nouveau_crtc(crtc);
 	struct nv04_mode_state *state = &dev_priv->mode_reg;
 	struct nv04_crtc_reg *regp = &state->crtc_reg[nv_crtc->index];
-	struct drm_framebuffer *fb = crtc->fb;
 	struct nouveau_pll_vals *pv = &regp->pllvals;
 	struct pll_lims pll_lim;
-	int vclk, arb_burst, arb_fifo_lwm;
 
 	if (get_pll_limits(dev, nv_crtc->index ? VPLL2 : VPLL1, &pll_lim))
 		return;
@@ -130,14 +128,13 @@ static void nv_crtc_calc_state_ext(struct drm_crtc *crtc, struct drm_display_mod
 	if (dev_priv->chipset > 0x40 && dot_clock <= (pll_lim.vco1.maxfreq / 2))
 		memset(&pll_lim.vco2, 0, sizeof(pll_lim.vco2));
 
-	vclk = nouveau_calc_pll_mnp(dev, &pll_lim, dot_clock, pv);
-	if (!vclk)
+	if (!nouveau_calc_pll_mnp(dev, &pll_lim, dot_clock, pv))
 		return;
 
 	state->pllsel &= PLLSEL_VPLL1_MASK | PLLSEL_VPLL2_MASK | PLLSEL_TV_MASK;
 
 	/* The blob uses this always, so let's do the same */
-	if (nv_arch(dev) == NV_40)
+	if (dev_priv->card_type == NV_40)
 		state->pllsel |= NV_PRAMDAC_PLL_COEFF_SELECT_USE_VPLL2_TRUE;
 	/* again nv40 and some nv43 act more like nv3x as described above */
 	if (dev_priv->chipset < 0x41)
@@ -146,19 +143,12 @@ static void nv_crtc_calc_state_ext(struct drm_crtc *crtc, struct drm_display_mod
 	state->pllsel |= nv_crtc->index ? PLLSEL_VPLL2_MASK : PLLSEL_VPLL1_MASK;
 
 	if (pv->NM2)
-		NV_TRACE(dev, "vpll: n1 %d n2 %d m1 %d m2 %d log2p %d\n",
+		NV_DEBUG_KMS(dev, "vpll: n1 %d n2 %d m1 %d m2 %d log2p %d\n",
 			 pv->N1, pv->N2, pv->M1, pv->M2, pv->log2P);
 	else
-		NV_TRACE(dev, "vpll: n %d m %d log2p %d\n",
+		NV_DEBUG_KMS(dev, "vpll: n %d m %d log2p %d\n",
 			 pv->N1, pv->M1, pv->log2P);
 
-	nouveau_calc_arb(dev, vclk, fb->bits_per_pixel, &arb_burst, &arb_fifo_lwm);
-
-	regp->CRTC[NV_CIO_CRE_FF_INDEX] = arb_burst;
-	regp->CRTC[NV_CIO_CRE_FFLWM__INDEX] = arb_fifo_lwm & 0xff;
-	if (nv_arch(dev) >= NV_30)
-		regp->CRTC[NV_CIO_CRE_47] = arb_fifo_lwm >> 8;
-
 	nv_crtc->cursor.set_offset(nv_crtc, nv_crtc->cursor.offset);
 }
 
@@ -170,7 +160,7 @@ nv_crtc_dpms(struct drm_crtc *crtc, int mode)
 	unsigned char seq1 = 0, crtc17 = 0;
 	unsigned char crtc1A;
 
-	NV_TRACE(dev, "Setting dpms mode %d on CRTC %d\n", mode,
+	NV_DEBUG_KMS(dev, "Setting dpms mode %d on CRTC %d\n", mode,
 							nv_crtc->index);
 
 	if (nv_crtc->last_dpms == mode) /* Don't do unnecesary mode changes. */
@@ -273,7 +263,7 @@ nv_crtc_mode_set_vga(struct drm_crtc *crtc, struct drm_display_mode *mode)
 		horizEnd = horizTotal - 2;
 		horizBlankEnd = horizTotal + 4;
 #if 0
-		if (dev->overlayAdaptor && nv_arch(dev) >= NV_10)
+		if (dev->overlayAdaptor && dev_priv->card_type >= NV_10)
 			/* This reportedly works around some video overlay bandwidth problems */
 			horizTotal += 2;
 #endif
@@ -550,17 +540,17 @@ nv_crtc_mode_set_regs(struct drm_crtc *crtc, struct drm_display_mode * mode)
 	regp->crtc_830 = mode->crtc_vdisplay - 3;
 	regp->crtc_834 = mode->crtc_vdisplay - 1;
 
-	if (nv_arch(dev) == NV_40)
+	if (dev_priv->card_type == NV_40)
 		/* This is what the blob does */
 		regp->crtc_850 = NVReadCRTC(dev, 0, NV_PCRTC_850);
 
-	if (nv_arch(dev) >= NV_30)
+	if (dev_priv->card_type >= NV_30)
 		regp->gpio_ext = NVReadCRTC(dev, 0, NV_PCRTC_GPIO_EXT);
 
 	regp->crtc_cfg = NV_PCRTC_CONFIG_START_ADDRESS_HSYNC;
 
 	/* Some misc regs */
-	if (nv_arch(dev) == NV_40) {
+	if (dev_priv->card_type == NV_40) {
 		regp->CRTC[NV_CIO_CRE_85] = 0xFF;
 		regp->CRTC[NV_CIO_CRE_86] = 0x1;
 	}
@@ -572,7 +562,7 @@ nv_crtc_mode_set_regs(struct drm_crtc *crtc, struct drm_display_mode * mode)
 
 	/* Generic PRAMDAC regs */
 
-	if (nv_arch(dev) >= NV_10)
+	if (dev_priv->card_type >= NV_10)
 		/* Only bit that bios and blob set. */
 		regp->nv10_cursync = (1 << 25);
 
@@ -613,7 +603,7 @@ nv_crtc_mode_set(struct drm_crtc *crtc, struct drm_display_mode *mode,
 	struct nouveau_crtc *nv_crtc = nouveau_crtc(crtc);
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
 
-	NV_DEBUG(dev, "CTRC mode on CRTC %d:\n", nv_crtc->index);
+	NV_DEBUG_KMS(dev, "CTRC mode on CRTC %d:\n", nv_crtc->index);
 	drm_mode_debug_printmodeline(adjusted_mode);
 
 	/* unlock must come after turning off FP_TG_CONTROL in output_prepare */
@@ -621,7 +611,7 @@ nv_crtc_mode_set(struct drm_crtc *crtc, struct drm_display_mode *mode,
 
 	nv_crtc_mode_set_vga(crtc, adjusted_mode);
 	/* calculated in nv04_dfp_prepare, nv40 needs it written before calculating PLLs */
-	if (nv_arch(dev) == NV_40)
+	if (dev_priv->card_type == NV_40)
 		NVWriteRAMDAC(dev, 0, NV_PRAMDAC_SEL_CLK, dev_priv->mode_reg.sel_clk);
 	nv_crtc_mode_set_regs(crtc, adjusted_mode);
 	nv_crtc_calc_state_ext(crtc, mode, adjusted_mode->clock);
@@ -668,6 +658,7 @@ static void nv_crtc_restore(struct drm_crtc *crtc)
 static void nv_crtc_prepare(struct drm_crtc *crtc)
 {
 	struct drm_device *dev = crtc->dev;
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	struct nouveau_crtc *nv_crtc = nouveau_crtc(crtc);
 	struct drm_crtc_helper_funcs *funcs = crtc->helper_private;
 
@@ -680,7 +671,7 @@ static void nv_crtc_prepare(struct drm_crtc *crtc)
 
 	/* Some more preperation. */
 	NVWriteCRTC(dev, nv_crtc->index, NV_PCRTC_CONFIG, NV_PCRTC_CONFIG_START_ADDRESS_NON_VGA);
-	if (nv_arch(dev) == NV_40) {
+	if (dev_priv->card_type == NV_40) {
 		uint32_t reg900 = NVReadRAMDAC(dev, nv_crtc->index, NV_PRAMDAC_900);
 		NVWriteRAMDAC(dev, nv_crtc->index, NV_PRAMDAC_900, reg900 & ~0x10000);
 	}
@@ -712,7 +703,7 @@ static void nv_crtc_destroy(struct drm_crtc *crtc)
 {
 	struct nouveau_crtc *nv_crtc = nouveau_crtc(crtc);
 
-	NV_DEBUG(crtc->dev, "\n");
+	NV_DEBUG_KMS(crtc->dev, "\n");
 
 	if (!nv_crtc)
 		return;
@@ -775,10 +766,12 @@ nv04_crtc_mode_set_base(struct drm_crtc *crtc, int x, int y,
 			struct drm_framebuffer *old_fb)
 {
 	struct nouveau_crtc *nv_crtc = nouveau_crtc(crtc);
-	struct drm_nouveau_private *dev_priv = crtc->dev->dev_private;
+	struct drm_device *dev = crtc->dev;
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	struct nv04_crtc_reg *regp = &dev_priv->mode_reg.crtc_reg[nv_crtc->index];
 	struct drm_framebuffer *drm_fb = nv_crtc->base.fb;
 	struct nouveau_framebuffer *fb = nouveau_framebuffer(drm_fb);
+	int arb_burst, arb_lwm;
 	int ret;
 
 	ret = nouveau_bo_pin(fb->nvbo, TTM_PL_FLAG_VRAM);
@@ -797,13 +790,14 @@ nv04_crtc_mode_set_base(struct drm_crtc *crtc, int x, int y,
 		nv_crtc_gamma_load(crtc);
 	}
 
+	/* Update the framebuffer format. */
 	regp->CRTC[NV_CIO_CRE_PIXEL_INDEX] &= ~3;
 	regp->CRTC[NV_CIO_CRE_PIXEL_INDEX] |= (crtc->fb->depth + 1) / 8;
 	regp->ramdac_gen_ctrl &= ~NV_PRAMDAC_GENERAL_CONTROL_ALT_MODE_SEL;
 	if (crtc->fb->depth == 16)
 		regp->ramdac_gen_ctrl |= NV_PRAMDAC_GENERAL_CONTROL_ALT_MODE_SEL;
 	crtc_wr_cio_state(crtc, regp, NV_CIO_CRE_PIXEL_INDEX);
-	NVWriteRAMDAC(crtc->dev, nv_crtc->index, NV_PRAMDAC_GENERAL_CONTROL,
+	NVWriteRAMDAC(dev, nv_crtc->index, NV_PRAMDAC_GENERAL_CONTROL,
 		      regp->ramdac_gen_ctrl);
 
 	regp->CRTC[NV_CIO_CR_OFFSET_INDEX] = drm_fb->pitch >> 3;
@@ -812,9 +806,25 @@ nv04_crtc_mode_set_base(struct drm_crtc *crtc, int x, int y,
 	crtc_wr_cio_state(crtc, regp, NV_CIO_CRE_RPC0_INDEX);
 	crtc_wr_cio_state(crtc, regp, NV_CIO_CR_OFFSET_INDEX);
 
+	/* Update the framebuffer location. */
 	regp->fb_start = nv_crtc->fb.offset & ~3;
 	regp->fb_start += (y * drm_fb->pitch) + (x * drm_fb->bits_per_pixel / 8);
-	NVWriteCRTC(crtc->dev, nv_crtc->index, NV_PCRTC_START, regp->fb_start);
+	NVWriteCRTC(dev, nv_crtc->index, NV_PCRTC_START, regp->fb_start);
+
+	/* Update the arbitration parameters. */
+	nouveau_calc_arb(dev, crtc->mode.clock, drm_fb->bits_per_pixel,
+			 &arb_burst, &arb_lwm);
+
+	regp->CRTC[NV_CIO_CRE_FF_INDEX] = arb_burst;
+	regp->CRTC[NV_CIO_CRE_FFLWM__INDEX] = arb_lwm & 0xff;
+	crtc_wr_cio_state(crtc, regp, NV_CIO_CRE_FF_INDEX);
+	crtc_wr_cio_state(crtc, regp, NV_CIO_CRE_FFLWM__INDEX);
+
+	if (dev_priv->card_type >= NV_30) {
+		regp->CRTC[NV_CIO_CRE_47] = arb_lwm >> 8;
+		crtc_wr_cio_state(crtc, regp, NV_CIO_CRE_47);
+	}
+
 	return 0;
 }
 
diff --git a/drivers/gpu/drm/nouveau/nv04_cursor.c b/drivers/gpu/drm/nouveau/nv04_cursor.c
index fc9156e..89a91b9 100644
--- a/drivers/gpu/drm/nouveau/nv04_cursor.c
+++ b/drivers/gpu/drm/nouveau/nv04_cursor.c
@@ -54,7 +54,7 @@ nv04_cursor_set_offset(struct nouveau_crtc *nv_crtc, uint32_t offset)
 	crtc_wr_cio_state(crtc, regp, NV_CIO_CRE_HCUR_ADDR0_INDEX);
 	crtc_wr_cio_state(crtc, regp, NV_CIO_CRE_HCUR_ADDR1_INDEX);
 	crtc_wr_cio_state(crtc, regp, NV_CIO_CRE_HCUR_ADDR2_INDEX);
-	if (nv_arch(dev) == NV_40)
+	if (dev_priv->card_type == NV_40)
 		nv_fix_nv40_hw_cursor(dev, nv_crtc->index);
 }
 
diff --git a/drivers/gpu/drm/nouveau/nv04_dac.c b/drivers/gpu/drm/nouveau/nv04_dac.c
index 587b6f5..d0e038d 100644
--- a/drivers/gpu/drm/nouveau/nv04_dac.c
+++ b/drivers/gpu/drm/nouveau/nv04_dac.c
@@ -205,23 +205,22 @@ out:
 	NVWriteVgaSeq(dev, 0, NV_VIO_SR_CLOCK_INDEX, saved_seq1);
 
 	if (blue == 0x18) {
-		NV_TRACE(dev, "Load detected on head A\n");
+		NV_INFO(dev, "Load detected on head A\n");
 		return connector_status_connected;
 	}
 
 	return connector_status_disconnected;
 }
 
-enum drm_connector_status nv17_dac_detect(struct drm_encoder *encoder,
-					  struct drm_connector *connector)
+uint32_t nv17_dac_sample_load(struct drm_encoder *encoder)
 {
 	struct drm_device *dev = encoder->dev;
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	struct dcb_entry *dcb = nouveau_encoder(encoder)->dcb;
-	uint32_t testval, regoffset = nv04_dac_output_offset(encoder);
+	uint32_t sample, testval, regoffset = nv04_dac_output_offset(encoder);
 	uint32_t saved_powerctrl_2 = 0, saved_powerctrl_4 = 0, saved_routput,
-		saved_rtest_ctrl, temp, saved_gpio_ext = 0, routput;
-	int head, present = 0;
+		saved_rtest_ctrl, saved_gpio0, saved_gpio1, temp, routput;
+	int head;
 
 #define RGB_TEST_DATA(r, g, b) (r << 0 | g << 10 | b << 20)
 	if (dcb->type == OUTPUT_TV) {
@@ -248,12 +247,11 @@ enum drm_connector_status nv17_dac_detect(struct drm_encoder *encoder,
 		nvWriteMC(dev, NV_PBUS_POWERCTRL_4, saved_powerctrl_4 & 0xffffffcf);
 	}
 
-	if (dev_priv->chipset >= 0x34) {
-		saved_gpio_ext = NVReadCRTC(dev, 0, NV_PCRTC_GPIO_EXT);
+	saved_gpio1 = nv17_gpio_get(dev, DCB_GPIO_TVDAC1);
+	saved_gpio0 = nv17_gpio_get(dev, DCB_GPIO_TVDAC0);
 
-		NVWriteCRTC(dev, 0, NV_PCRTC_GPIO_EXT, (saved_gpio_ext & ~(3 << 20)) |
-			    (dcb->type == OUTPUT_TV ? (1 << 20) : 0));
-	}
+	nv17_gpio_set(dev, DCB_GPIO_TVDAC1, dcb->type == OUTPUT_TV);
+	nv17_gpio_set(dev, DCB_GPIO_TVDAC0, dcb->type == OUTPUT_TV);
 
 	msleep(4);
 
@@ -268,11 +266,11 @@ enum drm_connector_status nv17_dac_detect(struct drm_encoder *encoder,
 	/* nv driver and nv31 use 0xfffffeee, nv34 and 6600 use 0xfffffece */
 	routput = (saved_routput & 0xfffffece) | head << 8;
 
-	if (nv_arch(dev) >= NV_40) {
+	if (dev_priv->card_type >= NV_40) {
 		if (dcb->type == OUTPUT_TV)
-			routput |= 1 << 20;
+			routput |= 0x1a << 16;
 		else
-			routput &= ~(1 << 20);
+			routput &= ~(0x1a << 16);
 	}
 
 	NVWriteRAMDAC(dev, 0, NV_PRAMDAC_DACCLK + regoffset, routput);
@@ -288,13 +286,7 @@ enum drm_connector_status nv17_dac_detect(struct drm_encoder *encoder,
 		      temp | NV_PRAMDAC_TEST_CONTROL_TP_INS_EN_ASSERTED);
 	msleep(5);
 
-	temp = NVReadRAMDAC(dev, 0, NV_PRAMDAC_TEST_CONTROL + regoffset);
-
-	if (dcb->type == OUTPUT_TV)
-		present = (nv17_tv_detect(encoder, connector, (temp >> 28) & 0xe)
-			   == connector_status_connected);
-	else
-		present = temp & NV_PRAMDAC_TEST_CONTROL_SENSEB_ALLHI;
+	sample = NVReadRAMDAC(dev, 0, NV_PRAMDAC_TEST_CONTROL + regoffset);
 
 	temp = NVReadRAMDAC(dev, head, NV_PRAMDAC_TEST_CONTROL);
 	NVWriteRAMDAC(dev, head, NV_PRAMDAC_TEST_CONTROL,
@@ -308,18 +300,28 @@ enum drm_connector_status nv17_dac_detect(struct drm_encoder *encoder,
 		nvWriteMC(dev, NV_PBUS_POWERCTRL_4, saved_powerctrl_4);
 	nvWriteMC(dev, NV_PBUS_POWERCTRL_2, saved_powerctrl_2);
 
-	if (dev_priv->chipset >= 0x34)
-		NVWriteRAMDAC(dev, 0, NV_PCRTC_GPIO_EXT, saved_gpio_ext);
+	nv17_gpio_set(dev, DCB_GPIO_TVDAC1, saved_gpio1);
+	nv17_gpio_set(dev, DCB_GPIO_TVDAC0, saved_gpio0);
+
+	return sample;
+}
 
-	if (present) {
-		NV_INFO(dev, "Load detected on output %c\n", '@' + ffs(dcb->or));
+static enum drm_connector_status
+nv17_dac_detect(struct drm_encoder *encoder, struct drm_connector *connector)
+{
+	struct drm_device *dev = encoder->dev;
+	struct dcb_entry *dcb = nouveau_encoder(encoder)->dcb;
+	uint32_t sample = nv17_dac_sample_load(encoder);
+
+	if (sample & NV_PRAMDAC_TEST_CONTROL_SENSEB_ALLHI) {
+		NV_INFO(dev, "Load detected on output %c\n",
+			'@' + ffs(dcb->or));
 		return connector_status_connected;
+	} else {
+		return connector_status_disconnected;
 	}
-
-	return connector_status_disconnected;
 }
 
-
 static bool nv04_dac_mode_fixup(struct drm_encoder *encoder,
 				struct drm_display_mode *mode,
 				struct drm_display_mode *adjusted_mode)
@@ -351,14 +353,10 @@ static void nv04_dac_mode_set(struct drm_encoder *encoder,
 			      struct drm_display_mode *mode,
 			      struct drm_display_mode *adjusted_mode)
 {
-	struct nouveau_encoder *nv_encoder = nouveau_encoder(encoder);
 	struct drm_device *dev = encoder->dev;
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	int head = nouveau_crtc(encoder->crtc)->index;
 
-	NV_TRACE(dev, "%s called for encoder %d\n", __func__,
-		      nv_encoder->dcb->index);
-
 	if (nv_gf4_disp_arch(dev)) {
 		struct drm_encoder *rebind;
 		uint32_t dac_offset = nv04_dac_output_offset(encoder);
@@ -467,7 +465,7 @@ static void nv04_dac_destroy(struct drm_encoder *encoder)
 {
 	struct nouveau_encoder *nv_encoder = nouveau_encoder(encoder);
 
-	NV_DEBUG(encoder->dev, "\n");
+	NV_DEBUG_KMS(encoder->dev, "\n");
 
 	drm_encoder_cleanup(encoder);
 	kfree(nv_encoder);
diff --git a/drivers/gpu/drm/nouveau/nv04_dfp.c b/drivers/gpu/drm/nouveau/nv04_dfp.c
index e5b3333..483f875 100644
--- a/drivers/gpu/drm/nouveau/nv04_dfp.c
+++ b/drivers/gpu/drm/nouveau/nv04_dfp.c
@@ -261,7 +261,7 @@ static void nv04_dfp_mode_set(struct drm_encoder *encoder,
 	struct drm_display_mode *output_mode = &nv_encoder->mode;
 	uint32_t mode_ratio, panel_ratio;
 
-	NV_DEBUG(dev, "Output mode on CRTC %d:\n", nv_crtc->index);
+	NV_DEBUG_KMS(dev, "Output mode on CRTC %d:\n", nv_crtc->index);
 	drm_mode_debug_printmodeline(output_mode);
 
 	/* Initialize the FP registers in this CRTC. */
@@ -413,7 +413,9 @@ static void nv04_dfp_commit(struct drm_encoder *encoder)
 	struct dcb_entry *dcbe = nv_encoder->dcb;
 	int head = nouveau_crtc(encoder->crtc)->index;
 
-	NV_TRACE(dev, "%s called for encoder %d\n", __func__, nv_encoder->dcb->index);
+	NV_INFO(dev, "Output %s is running on CRTC %d using output %c\n",
+		drm_get_connector_name(&nouveau_encoder_connector_get(nv_encoder)->base),
+		nv_crtc->index, '@' + ffs(nv_encoder->dcb->or));
 
 	if (dcbe->type == OUTPUT_TMDS)
 		run_tmds_table(dev, dcbe, head, nv_encoder->mode.clock);
@@ -550,7 +552,7 @@ static void nv04_dfp_destroy(struct drm_encoder *encoder)
 {
 	struct nouveau_encoder *nv_encoder = nouveau_encoder(encoder);
 
-	NV_DEBUG(encoder->dev, "\n");
+	NV_DEBUG_KMS(encoder->dev, "\n");
 
 	drm_encoder_cleanup(encoder);
 	kfree(nv_encoder);
diff --git a/drivers/gpu/drm/nouveau/nv04_display.c b/drivers/gpu/drm/nouveau/nv04_display.c
index 2db7829..dfae228 100644
--- a/drivers/gpu/drm/nouveau/nv04_display.c
+++ b/drivers/gpu/drm/nouveau/nv04_display.c
@@ -99,10 +99,11 @@ nv04_display_create(struct drm_device *dev)
 	uint16_t connector[16] = { 0 };
 	int i, ret;
 
-	NV_DEBUG(dev, "\n");
+	NV_DEBUG_KMS(dev, "\n");
 
 	if (nv_two_heads(dev))
 		nv04_display_store_initial_head_owner(dev);
+	nouveau_hw_save_vga_fonts(dev, 1);
 
 	drm_mode_config_init(dev);
 	drm_mode_create_scaling_mode_property(dev);
@@ -208,8 +209,6 @@ nv04_display_create(struct drm_device *dev)
 	/* Save previous state */
 	NVLockVgaCrtcs(dev, false);
 
-	nouveau_hw_save_vga_fonts(dev, 1);
-
 	list_for_each_entry(crtc, &dev->mode_config.crtc_list, head)
 		crtc->funcs->save(crtc);
 
@@ -228,7 +227,7 @@ nv04_display_destroy(struct drm_device *dev)
 	struct drm_encoder *encoder;
 	struct drm_crtc *crtc;
 
-	NV_DEBUG(dev, "\n");
+	NV_DEBUG_KMS(dev, "\n");
 
 	/* Turn every CRTC off. */
 	list_for_each_entry(crtc, &dev->mode_config.crtc_list, head) {
@@ -251,9 +250,9 @@ nv04_display_destroy(struct drm_device *dev)
 	list_for_each_entry(crtc, &dev->mode_config.crtc_list, head)
 		crtc->funcs->restore(crtc);
 
-	nouveau_hw_save_vga_fonts(dev, 0);
-
 	drm_mode_config_cleanup(dev);
+
+	nouveau_hw_save_vga_fonts(dev, 0);
 }
 
 void
diff --git a/drivers/gpu/drm/nouveau/nv04_fbcon.c b/drivers/gpu/drm/nouveau/nv04_fbcon.c
index 09a3107..d910873 100644
--- a/drivers/gpu/drm/nouveau/nv04_fbcon.c
+++ b/drivers/gpu/drm/nouveau/nv04_fbcon.c
@@ -39,8 +39,7 @@ nv04_fbcon_copyarea(struct fb_info *info, const struct fb_copyarea *region)
 		return;
 
 	if (!(info->flags & FBINFO_HWACCEL_DISABLED) && RING_SPACE(chan, 4)) {
-		NV_ERROR(dev, "GPU lockup - switching to software fbcon\n");
-		info->flags |= FBINFO_HWACCEL_DISABLED;
+		nouveau_fbcon_gpu_lockup(info);
 	}
 
 	if (info->flags & FBINFO_HWACCEL_DISABLED) {
@@ -62,14 +61,12 @@ nv04_fbcon_fillrect(struct fb_info *info, const struct fb_fillrect *rect)
 	struct drm_device *dev = par->dev;
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	struct nouveau_channel *chan = dev_priv->channel;
-	uint32_t color = ((uint32_t *) info->pseudo_palette)[rect->color];
 
 	if (info->state != FBINFO_STATE_RUNNING)
 		return;
 
 	if (!(info->flags & FBINFO_HWACCEL_DISABLED) && RING_SPACE(chan, 7)) {
-		NV_ERROR(dev, "GPU lockup - switching to software fbcon\n");
-		info->flags |= FBINFO_HWACCEL_DISABLED;
+		nouveau_fbcon_gpu_lockup(info);
 	}
 
 	if (info->flags & FBINFO_HWACCEL_DISABLED) {
@@ -80,7 +77,11 @@ nv04_fbcon_fillrect(struct fb_info *info, const struct fb_fillrect *rect)
 	BEGIN_RING(chan, NvSubGdiRect, 0x02fc, 1);
 	OUT_RING(chan, (rect->rop != ROP_COPY) ? 1 : 3);
 	BEGIN_RING(chan, NvSubGdiRect, 0x03fc, 1);
-	OUT_RING(chan, color);
+	if (info->fix.visual == FB_VISUAL_TRUECOLOR ||
+	    info->fix.visual == FB_VISUAL_DIRECTCOLOR)
+		OUT_RING(chan, ((uint32_t *)info->pseudo_palette)[rect->color]);
+	else
+		OUT_RING(chan, rect->color);
 	BEGIN_RING(chan, NvSubGdiRect, 0x0400, 2);
 	OUT_RING(chan, (rect->dx << 16) | rect->dy);
 	OUT_RING(chan, (rect->width << 16) | rect->height);
@@ -109,8 +110,7 @@ nv04_fbcon_imageblit(struct fb_info *info, const struct fb_image *image)
 	}
 
 	if (!(info->flags & FBINFO_HWACCEL_DISABLED) && RING_SPACE(chan, 8)) {
-		NV_ERROR(dev, "GPU lockup - switching to software fbcon\n");
-		info->flags |= FBINFO_HWACCEL_DISABLED;
+		nouveau_fbcon_gpu_lockup(info);
 	}
 
 	if (info->flags & FBINFO_HWACCEL_DISABLED) {
@@ -144,8 +144,7 @@ nv04_fbcon_imageblit(struct fb_info *info, const struct fb_image *image)
 		int iter_len = dsize > 128 ? 128 : dsize;
 
 		if (RING_SPACE(chan, iter_len + 1)) {
-			NV_ERROR(dev, "GPU lockup - switching to software fbcon\n");
-			info->flags |= FBINFO_HWACCEL_DISABLED;
+			nouveau_fbcon_gpu_lockup(info);
 			cfb_imageblit(info, image);
 			return;
 		}
@@ -184,6 +183,7 @@ nv04_fbcon_accel_init(struct fb_info *info)
 	struct drm_device *dev = par->dev;
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	struct nouveau_channel *chan = dev_priv->channel;
+	const int sub = NvSubCtxSurf2D;
 	int surface_fmt, pattern_fmt, rect_fmt;
 	int ret;
 
@@ -242,30 +242,29 @@ nv04_fbcon_accel_init(struct fb_info *info)
 		return ret;
 
 	if (RING_SPACE(chan, 49)) {
-		NV_ERROR(dev, "GPU lockup - switching to software fbcon\n");
-		info->flags |= FBINFO_HWACCEL_DISABLED;
+		nouveau_fbcon_gpu_lockup(info);
 		return 0;
 	}
 
-	BEGIN_RING(chan, 1, 0x0000, 1);
+	BEGIN_RING(chan, sub, 0x0000, 1);
 	OUT_RING(chan, NvCtxSurf2D);
-	BEGIN_RING(chan, 1, 0x0184, 2);
+	BEGIN_RING(chan, sub, 0x0184, 2);
 	OUT_RING(chan, NvDmaFB);
 	OUT_RING(chan, NvDmaFB);
-	BEGIN_RING(chan, 1, 0x0300, 4);
+	BEGIN_RING(chan, sub, 0x0300, 4);
 	OUT_RING(chan, surface_fmt);
 	OUT_RING(chan, info->fix.line_length | (info->fix.line_length << 16));
 	OUT_RING(chan, info->fix.smem_start - dev->mode_config.fb_base);
 	OUT_RING(chan, info->fix.smem_start - dev->mode_config.fb_base);
 
-	BEGIN_RING(chan, 1, 0x0000, 1);
+	BEGIN_RING(chan, sub, 0x0000, 1);
 	OUT_RING(chan, NvRop);
-	BEGIN_RING(chan, 1, 0x0300, 1);
+	BEGIN_RING(chan, sub, 0x0300, 1);
 	OUT_RING(chan, 0x55);
 
-	BEGIN_RING(chan, 1, 0x0000, 1);
+	BEGIN_RING(chan, sub, 0x0000, 1);
 	OUT_RING(chan, NvImagePatt);
-	BEGIN_RING(chan, 1, 0x0300, 8);
+	BEGIN_RING(chan, sub, 0x0300, 8);
 	OUT_RING(chan, pattern_fmt);
 #ifdef __BIG_ENDIAN
 	OUT_RING(chan, 2);
@@ -279,9 +278,9 @@ nv04_fbcon_accel_init(struct fb_info *info)
 	OUT_RING(chan, ~0);
 	OUT_RING(chan, ~0);
 
-	BEGIN_RING(chan, 1, 0x0000, 1);
+	BEGIN_RING(chan, sub, 0x0000, 1);
 	OUT_RING(chan, NvClipRect);
-	BEGIN_RING(chan, 1, 0x0300, 2);
+	BEGIN_RING(chan, sub, 0x0300, 2);
 	OUT_RING(chan, 0);
 	OUT_RING(chan, (info->var.yres_virtual << 16) | info->var.xres_virtual);
 
diff --git a/drivers/gpu/drm/nouveau/nv04_fifo.c b/drivers/gpu/drm/nouveau/nv04_fifo.c
index 0c3cd53..f31347b 100644
--- a/drivers/gpu/drm/nouveau/nv04_fifo.c
+++ b/drivers/gpu/drm/nouveau/nv04_fifo.c
@@ -71,6 +71,40 @@ nv04_fifo_reassign(struct drm_device *dev, bool enable)
 	return (reassign == 1);
 }
 
+bool
+nv04_fifo_cache_flush(struct drm_device *dev)
+{
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	struct nouveau_timer_engine *ptimer = &dev_priv->engine.timer;
+	uint64_t start = ptimer->read(dev);
+
+	do {
+		if (nv_rd32(dev, NV03_PFIFO_CACHE1_GET) ==
+		    nv_rd32(dev, NV03_PFIFO_CACHE1_PUT))
+			return true;
+
+	} while (ptimer->read(dev) - start < 100000000);
+
+	NV_ERROR(dev, "Timeout flushing the PFIFO cache.\n");
+
+	return false;
+}
+
+bool
+nv04_fifo_cache_pull(struct drm_device *dev, bool enable)
+{
+	uint32_t pull = nv_rd32(dev, NV04_PFIFO_CACHE1_PULL0);
+
+	if (enable) {
+		nv_wr32(dev, NV04_PFIFO_CACHE1_PULL0, pull | 1);
+	} else {
+		nv_wr32(dev, NV04_PFIFO_CACHE1_PULL0, pull & ~1);
+		nv_wr32(dev, NV04_PFIFO_CACHE1_HASH, 0);
+	}
+
+	return !!(pull & 1);
+}
+
 int
 nv04_fifo_channel_id(struct drm_device *dev)
 {
diff --git a/drivers/gpu/drm/nouveau/nv04_graph.c b/drivers/gpu/drm/nouveau/nv04_graph.c
index 396ee92..e260986 100644
--- a/drivers/gpu/drm/nouveau/nv04_graph.c
+++ b/drivers/gpu/drm/nouveau/nv04_graph.c
@@ -28,6 +28,10 @@
 #include "nouveau_drv.h"
 
 static uint32_t nv04_graph_ctx_regs[] = {
+	0x0040053c,
+	0x00400544,
+	0x00400540,
+	0x00400548,
 	NV04_PGRAPH_CTX_SWITCH1,
 	NV04_PGRAPH_CTX_SWITCH2,
 	NV04_PGRAPH_CTX_SWITCH3,
@@ -102,69 +106,69 @@ static uint32_t nv04_graph_ctx_regs[] = {
 	NV04_PGRAPH_PATT_COLOR0,
 	NV04_PGRAPH_PATT_COLOR1,
 	NV04_PGRAPH_PATT_COLORRAM+0x00,
-	NV04_PGRAPH_PATT_COLORRAM+0x01,
-	NV04_PGRAPH_PATT_COLORRAM+0x02,
-	NV04_PGRAPH_PATT_COLORRAM+0x03,
 	NV04_PGRAPH_PATT_COLORRAM+0x04,
-	NV04_PGRAPH_PATT_COLORRAM+0x05,
-	NV04_PGRAPH_PATT_COLORRAM+0x06,
-	NV04_PGRAPH_PATT_COLORRAM+0x07,
 	NV04_PGRAPH_PATT_COLORRAM+0x08,
-	NV04_PGRAPH_PATT_COLORRAM+0x09,
-	NV04_PGRAPH_PATT_COLORRAM+0x0A,
-	NV04_PGRAPH_PATT_COLORRAM+0x0B,
-	NV04_PGRAPH_PATT_COLORRAM+0x0C,
-	NV04_PGRAPH_PATT_COLORRAM+0x0D,
-	NV04_PGRAPH_PATT_COLORRAM+0x0E,
-	NV04_PGRAPH_PATT_COLORRAM+0x0F,
+	NV04_PGRAPH_PATT_COLORRAM+0x0c,
 	NV04_PGRAPH_PATT_COLORRAM+0x10,
-	NV04_PGRAPH_PATT_COLORRAM+0x11,
-	NV04_PGRAPH_PATT_COLORRAM+0x12,
-	NV04_PGRAPH_PATT_COLORRAM+0x13,
 	NV04_PGRAPH_PATT_COLORRAM+0x14,
-	NV04_PGRAPH_PATT_COLORRAM+0x15,
-	NV04_PGRAPH_PATT_COLORRAM+0x16,
-	NV04_PGRAPH_PATT_COLORRAM+0x17,
 	NV04_PGRAPH_PATT_COLORRAM+0x18,
-	NV04_PGRAPH_PATT_COLORRAM+0x19,
-	NV04_PGRAPH_PATT_COLORRAM+0x1A,
-	NV04_PGRAPH_PATT_COLORRAM+0x1B,
-	NV04_PGRAPH_PATT_COLORRAM+0x1C,
-	NV04_PGRAPH_PATT_COLORRAM+0x1D,
-	NV04_PGRAPH_PATT_COLORRAM+0x1E,
-	NV04_PGRAPH_PATT_COLORRAM+0x1F,
+	NV04_PGRAPH_PATT_COLORRAM+0x1c,
 	NV04_PGRAPH_PATT_COLORRAM+0x20,
-	NV04_PGRAPH_PATT_COLORRAM+0x21,
-	NV04_PGRAPH_PATT_COLORRAM+0x22,
-	NV04_PGRAPH_PATT_COLORRAM+0x23,
 	NV04_PGRAPH_PATT_COLORRAM+0x24,
-	NV04_PGRAPH_PATT_COLORRAM+0x25,
-	NV04_PGRAPH_PATT_COLORRAM+0x26,
-	NV04_PGRAPH_PATT_COLORRAM+0x27,
 	NV04_PGRAPH_PATT_COLORRAM+0x28,
-	NV04_PGRAPH_PATT_COLORRAM+0x29,
-	NV04_PGRAPH_PATT_COLORRAM+0x2A,
-	NV04_PGRAPH_PATT_COLORRAM+0x2B,
-	NV04_PGRAPH_PATT_COLORRAM+0x2C,
-	NV04_PGRAPH_PATT_COLORRAM+0x2D,
-	NV04_PGRAPH_PATT_COLORRAM+0x2E,
-	NV04_PGRAPH_PATT_COLORRAM+0x2F,
+	NV04_PGRAPH_PATT_COLORRAM+0x2c,
 	NV04_PGRAPH_PATT_COLORRAM+0x30,
-	NV04_PGRAPH_PATT_COLORRAM+0x31,
-	NV04_PGRAPH_PATT_COLORRAM+0x32,
-	NV04_PGRAPH_PATT_COLORRAM+0x33,
 	NV04_PGRAPH_PATT_COLORRAM+0x34,
-	NV04_PGRAPH_PATT_COLORRAM+0x35,
-	NV04_PGRAPH_PATT_COLORRAM+0x36,
-	NV04_PGRAPH_PATT_COLORRAM+0x37,
 	NV04_PGRAPH_PATT_COLORRAM+0x38,
-	NV04_PGRAPH_PATT_COLORRAM+0x39,
-	NV04_PGRAPH_PATT_COLORRAM+0x3A,
-	NV04_PGRAPH_PATT_COLORRAM+0x3B,
-	NV04_PGRAPH_PATT_COLORRAM+0x3C,
-	NV04_PGRAPH_PATT_COLORRAM+0x3D,
-	NV04_PGRAPH_PATT_COLORRAM+0x3E,
-	NV04_PGRAPH_PATT_COLORRAM+0x3F,
+	NV04_PGRAPH_PATT_COLORRAM+0x3c,
+	NV04_PGRAPH_PATT_COLORRAM+0x40,
+	NV04_PGRAPH_PATT_COLORRAM+0x44,
+	NV04_PGRAPH_PATT_COLORRAM+0x48,
+	NV04_PGRAPH_PATT_COLORRAM+0x4c,
+	NV04_PGRAPH_PATT_COLORRAM+0x50,
+	NV04_PGRAPH_PATT_COLORRAM+0x54,
+	NV04_PGRAPH_PATT_COLORRAM+0x58,
+	NV04_PGRAPH_PATT_COLORRAM+0x5c,
+	NV04_PGRAPH_PATT_COLORRAM+0x60,
+	NV04_PGRAPH_PATT_COLORRAM+0x64,
+	NV04_PGRAPH_PATT_COLORRAM+0x68,
+	NV04_PGRAPH_PATT_COLORRAM+0x6c,
+	NV04_PGRAPH_PATT_COLORRAM+0x70,
+	NV04_PGRAPH_PATT_COLORRAM+0x74,
+	NV04_PGRAPH_PATT_COLORRAM+0x78,
+	NV04_PGRAPH_PATT_COLORRAM+0x7c,
+	NV04_PGRAPH_PATT_COLORRAM+0x80,
+	NV04_PGRAPH_PATT_COLORRAM+0x84,
+	NV04_PGRAPH_PATT_COLORRAM+0x88,
+	NV04_PGRAPH_PATT_COLORRAM+0x8c,
+	NV04_PGRAPH_PATT_COLORRAM+0x90,
+	NV04_PGRAPH_PATT_COLORRAM+0x94,
+	NV04_PGRAPH_PATT_COLORRAM+0x98,
+	NV04_PGRAPH_PATT_COLORRAM+0x9c,
+	NV04_PGRAPH_PATT_COLORRAM+0xa0,
+	NV04_PGRAPH_PATT_COLORRAM+0xa4,
+	NV04_PGRAPH_PATT_COLORRAM+0xa8,
+	NV04_PGRAPH_PATT_COLORRAM+0xac,
+	NV04_PGRAPH_PATT_COLORRAM+0xb0,
+	NV04_PGRAPH_PATT_COLORRAM+0xb4,
+	NV04_PGRAPH_PATT_COLORRAM+0xb8,
+	NV04_PGRAPH_PATT_COLORRAM+0xbc,
+	NV04_PGRAPH_PATT_COLORRAM+0xc0,
+	NV04_PGRAPH_PATT_COLORRAM+0xc4,
+	NV04_PGRAPH_PATT_COLORRAM+0xc8,
+	NV04_PGRAPH_PATT_COLORRAM+0xcc,
+	NV04_PGRAPH_PATT_COLORRAM+0xd0,
+	NV04_PGRAPH_PATT_COLORRAM+0xd4,
+	NV04_PGRAPH_PATT_COLORRAM+0xd8,
+	NV04_PGRAPH_PATT_COLORRAM+0xdc,
+	NV04_PGRAPH_PATT_COLORRAM+0xe0,
+	NV04_PGRAPH_PATT_COLORRAM+0xe4,
+	NV04_PGRAPH_PATT_COLORRAM+0xe8,
+	NV04_PGRAPH_PATT_COLORRAM+0xec,
+	NV04_PGRAPH_PATT_COLORRAM+0xf0,
+	NV04_PGRAPH_PATT_COLORRAM+0xf4,
+	NV04_PGRAPH_PATT_COLORRAM+0xf8,
+	NV04_PGRAPH_PATT_COLORRAM+0xfc,
 	NV04_PGRAPH_PATTERN,
 	0x0040080c,
 	NV04_PGRAPH_PATTERN_SHAPE,
@@ -247,14 +251,6 @@ static uint32_t nv04_graph_ctx_regs[] = {
 	0x004004f8,
 	0x0040047c,
 	0x004004fc,
-	0x0040053c,
-	0x00400544,
-	0x00400540,
-	0x00400548,
-	0x00400560,
-	0x00400568,
-	0x00400564,
-	0x0040056c,
 	0x00400534,
 	0x00400538,
 	0x00400514,
@@ -341,9 +337,8 @@ static uint32_t nv04_graph_ctx_regs[] = {
 	0x00400500,
 	0x00400504,
 	NV04_PGRAPH_VALID1,
-	NV04_PGRAPH_VALID2
-
-
+	NV04_PGRAPH_VALID2,
+	NV04_PGRAPH_DEBUG_3
 };
 
 struct graph_state {
@@ -388,6 +383,18 @@ nv04_graph_context_switch(struct drm_device *dev)
 	pgraph->fifo_access(dev, true);
 }
 
+static uint32_t *ctx_reg(struct graph_state *ctx, uint32_t reg)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(nv04_graph_ctx_regs); i++) {
+		if (nv04_graph_ctx_regs[i] == reg)
+			return &ctx->nv04[i];
+	}
+
+	return NULL;
+}
+
 int nv04_graph_create_context(struct nouveau_channel *chan)
 {
 	struct graph_state *pgraph_ctx;
@@ -398,15 +405,8 @@ int nv04_graph_create_context(struct nouveau_channel *chan)
 	if (pgraph_ctx == NULL)
 		return -ENOMEM;
 
-	/* dev_priv->fifos[channel].pgraph_ctx_user = channel << 24; */
-	pgraph_ctx->nv04[0] = 0x0001ffff;
-	/* is it really needed ??? */
-#if 0
-	dev_priv->fifos[channel].pgraph_ctx[1] =
-					nv_rd32(dev, NV_PGRAPH_DEBUG_4);
-	dev_priv->fifos[channel].pgraph_ctx[2] =
-					nv_rd32(dev, 0x004006b0);
-#endif
+	*ctx_reg(pgraph_ctx, NV04_PGRAPH_DEBUG_3) = 0xfad4ff31;
+
 	return 0;
 }
 
@@ -429,9 +429,13 @@ int nv04_graph_load_context(struct nouveau_channel *chan)
 		nv_wr32(dev, nv04_graph_ctx_regs[i], pgraph_ctx->nv04[i]);
 
 	nv_wr32(dev, NV04_PGRAPH_CTX_CONTROL, 0x10010100);
-	nv_wr32(dev, NV04_PGRAPH_CTX_USER, chan->id << 24);
+
+	tmp  = nv_rd32(dev, NV04_PGRAPH_CTX_USER) & 0x00ffffff;
+	nv_wr32(dev, NV04_PGRAPH_CTX_USER, tmp | chan->id << 24);
+
 	tmp = nv_rd32(dev, NV04_PGRAPH_FFINTFC_ST2);
 	nv_wr32(dev, NV04_PGRAPH_FFINTFC_ST2, tmp & 0x000fffff);
+
 	return 0;
 }
 
@@ -494,7 +498,7 @@ int nv04_graph_init(struct drm_device *dev)
 	nv_wr32(dev, NV04_PGRAPH_STATE        , 0xFFFFFFFF);
 	nv_wr32(dev, NV04_PGRAPH_CTX_CONTROL  , 0x10000100);
 	tmp  = nv_rd32(dev, NV04_PGRAPH_CTX_USER) & 0x00ffffff;
-	tmp |= dev_priv->engine.fifo.channels << 24;
+	tmp |= (dev_priv->engine.fifo.channels - 1) << 24;
 	nv_wr32(dev, NV04_PGRAPH_CTX_USER, tmp);
 
 	/* These don't belong here, they're part of a per-channel context */
@@ -533,7 +537,7 @@ nv04_graph_mthd_set_operation(struct nouveau_channel *chan, int grclass,
 			      int mthd, uint32_t data)
 {
 	struct drm_device *dev = chan->dev;
-	uint32_t instance = nv_rd32(dev, NV04_PGRAPH_CTX_SWITCH4) & 0xffff;
+	uint32_t instance = (nv_rd32(dev, NV04_PGRAPH_CTX_SWITCH4) & 0xffff) << 4;
 	int subc = (nv_rd32(dev, NV04_PGRAPH_TRAPPED_ADDR) >> 13) & 0x7;
 	uint32_t tmp;
 
@@ -543,11 +547,11 @@ nv04_graph_mthd_set_operation(struct nouveau_channel *chan, int grclass,
 
 	nv_wi32(dev, instance, tmp);
 	nv_wr32(dev, NV04_PGRAPH_CTX_SWITCH1, tmp);
-	nv_wr32(dev, NV04_PGRAPH_CTX_CACHE1 + subc, tmp);
+	nv_wr32(dev, NV04_PGRAPH_CTX_CACHE1 + (subc<<2), tmp);
 	return 0;
 }
 
-static struct nouveau_pgraph_object_method nv04_graph_mthds_m2mf[] = {
+static struct nouveau_pgraph_object_method nv04_graph_mthds_sw[] = {
 	{ 0x0150, nv04_graph_mthd_set_ref },
 	{}
 };
@@ -558,7 +562,7 @@ static struct nouveau_pgraph_object_method nv04_graph_mthds_set_operation[] = {
 };
 
 struct nouveau_pgraph_object_class nv04_graph_grclass[] = {
-	{ 0x0039, false, nv04_graph_mthds_m2mf },
+	{ 0x0039, false, NULL },
 	{ 0x004a, false, nv04_graph_mthds_set_operation }, /* gdirect */
 	{ 0x005f, false, nv04_graph_mthds_set_operation }, /* imageblit */
 	{ 0x0061, false, nv04_graph_mthds_set_operation }, /* ifc */
@@ -574,6 +578,7 @@ struct nouveau_pgraph_object_class nv04_graph_grclass[] = {
 	{ 0x0053, false, NULL }, /* surf3d */
 	{ 0x0054, false, NULL }, /* tex_tri */
 	{ 0x0055, false, NULL }, /* multitex_tri */
+	{ 0x506e, true, nv04_graph_mthds_sw },
 	{}
 };
 
diff --git a/drivers/gpu/drm/nouveau/nv04_instmem.c b/drivers/gpu/drm/nouveau/nv04_instmem.c
index d87a426..a20c206 100644
--- a/drivers/gpu/drm/nouveau/nv04_instmem.c
+++ b/drivers/gpu/drm/nouveau/nv04_instmem.c
@@ -8,10 +8,10 @@ nouveau_fifo_ctx_size(struct drm_device *dev)
 {
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
 
-	if (dev_priv->card_type >= NV_40)
+	if (dev_priv->chipset >= 0x40)
 		return 128;
 	else
-	if (dev_priv->card_type >= NV_17)
+	if (dev_priv->chipset >= 0x17)
 		return 64;
 
 	return 32;
@@ -92,8 +92,6 @@ nv04_instmem_configure_fixed_tables(struct drm_device *dev)
 		break;
 	case NV_30:
 	case NV_20:
-	case NV_17:
-	case NV_11:
 	case NV_10:
 	case NV_04:
 	default:
diff --git a/drivers/gpu/drm/nouveau/nv10_fb.c b/drivers/gpu/drm/nouveau/nv10_fb.c
index 79e2d10..cc5cda4 100644
--- a/drivers/gpu/drm/nouveau/nv10_fb.c
+++ b/drivers/gpu/drm/nouveau/nv10_fb.c
@@ -3,17 +3,37 @@
 #include "nouveau_drv.h"
 #include "nouveau_drm.h"
 
+void
+nv10_fb_set_region_tiling(struct drm_device *dev, int i, uint32_t addr,
+			  uint32_t size, uint32_t pitch)
+{
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	uint32_t limit = max(1u, addr + size) - 1;
+
+	if (pitch) {
+		if (dev_priv->card_type >= NV_20)
+			addr |= 1;
+		else
+			addr |= 1 << 31;
+	}
+
+	nv_wr32(dev, NV10_PFB_TLIMIT(i), limit);
+	nv_wr32(dev, NV10_PFB_TSIZE(i), pitch);
+	nv_wr32(dev, NV10_PFB_TILE(i), addr);
+}
+
 int
 nv10_fb_init(struct drm_device *dev)
 {
-	uint32_t fb_bar_size;
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	struct nouveau_fb_engine *pfb = &dev_priv->engine.fb;
 	int i;
 
-	fb_bar_size = drm_get_resource_len(dev, 0) - 1;
-	for (i = 0; i < NV10_PFB_TILE__SIZE; i++) {
-		nv_wr32(dev, NV10_PFB_TILE(i), 0);
-		nv_wr32(dev, NV10_PFB_TLIMIT(i), fb_bar_size);
-	}
+	pfb->num_tiles = NV10_PFB_TILE__SIZE;
+
+	/* Turn all the tiling regions off. */
+	for (i = 0; i < pfb->num_tiles; i++)
+		pfb->set_region_tiling(dev, i, 0, 0, 0);
 
 	return 0;
 }
diff --git a/drivers/gpu/drm/nouveau/nv10_fifo.c b/drivers/gpu/drm/nouveau/nv10_fifo.c
index 877f00e..7aeabf2 100644
--- a/drivers/gpu/drm/nouveau/nv10_fifo.c
+++ b/drivers/gpu/drm/nouveau/nv10_fifo.c
@@ -216,12 +216,12 @@ nv10_fifo_init_ramxx(struct drm_device *dev)
 				       (dev_priv->ramht_offset >> 8));
 	nv_wr32(dev, NV03_PFIFO_RAMRO, dev_priv->ramro_offset>>8);
 
-	if (dev_priv->card_type > NV_11) {
+	if (dev_priv->chipset < 0x17) {
+		nv_wr32(dev, NV03_PFIFO_RAMFC, dev_priv->ramfc_offset >> 8);
+	} else {
 		nv_wr32(dev, NV03_PFIFO_RAMFC, (dev_priv->ramfc_offset >> 8) |
 					       (1 << 16) /* 64 Bytes entry*/);
 		/* XXX nvidia blob set bit 18, 21,23 for nv20 & nv30 */
-	} else {
-		nv_wr32(dev, NV03_PFIFO_RAMFC, dev_priv->ramfc_offset >> 8);
 	}
 }
 
diff --git a/drivers/gpu/drm/nouveau/nv10_graph.c b/drivers/gpu/drm/nouveau/nv10_graph.c
index 6bf6804..fcf2cdd 100644
--- a/drivers/gpu/drm/nouveau/nv10_graph.c
+++ b/drivers/gpu/drm/nouveau/nv10_graph.c
@@ -389,49 +389,50 @@ struct graph_state {
 	int nv10[ARRAY_SIZE(nv10_graph_ctx_regs)];
 	int nv17[ARRAY_SIZE(nv17_graph_ctx_regs)];
 	struct pipe_state pipe_state;
+	uint32_t lma_window[4];
 };
 
+#define PIPE_SAVE(dev, state, addr)					\
+	do {								\
+		int __i;						\
+		nv_wr32(dev, NV10_PGRAPH_PIPE_ADDRESS, addr);		\
+		for (__i = 0; __i < ARRAY_SIZE(state); __i++)		\
+			state[__i] = nv_rd32(dev, NV10_PGRAPH_PIPE_DATA); \
+	} while (0)
+
+#define PIPE_RESTORE(dev, state, addr)					\
+	do {								\
+		int __i;						\
+		nv_wr32(dev, NV10_PGRAPH_PIPE_ADDRESS, addr);		\
+		for (__i = 0; __i < ARRAY_SIZE(state); __i++)		\
+			nv_wr32(dev, NV10_PGRAPH_PIPE_DATA, state[__i]); \
+	} while (0)
+
 static void nv10_graph_save_pipe(struct nouveau_channel *chan)
 {
 	struct drm_device *dev = chan->dev;
 	struct graph_state *pgraph_ctx = chan->pgraph_ctx;
-	struct pipe_state *fifo_pipe_state = &pgraph_ctx->pipe_state;
-	int i;
-#define PIPE_SAVE(addr) \
-	do { \
-		nv_wr32(dev, NV10_PGRAPH_PIPE_ADDRESS, addr); \
-		for (i = 0; i < ARRAY_SIZE(fifo_pipe_state->pipe_##addr); i++) \
-			fifo_pipe_state->pipe_##addr[i] = nv_rd32(dev, NV10_PGRAPH_PIPE_DATA); \
-	} while (0)
-
-	PIPE_SAVE(0x4400);
-	PIPE_SAVE(0x0200);
-	PIPE_SAVE(0x6400);
-	PIPE_SAVE(0x6800);
-	PIPE_SAVE(0x6c00);
-	PIPE_SAVE(0x7000);
-	PIPE_SAVE(0x7400);
-	PIPE_SAVE(0x7800);
-	PIPE_SAVE(0x0040);
-	PIPE_SAVE(0x0000);
-
-#undef PIPE_SAVE
+	struct pipe_state *pipe = &pgraph_ctx->pipe_state;
+
+	PIPE_SAVE(dev, pipe->pipe_0x4400, 0x4400);
+	PIPE_SAVE(dev, pipe->pipe_0x0200, 0x0200);
+	PIPE_SAVE(dev, pipe->pipe_0x6400, 0x6400);
+	PIPE_SAVE(dev, pipe->pipe_0x6800, 0x6800);
+	PIPE_SAVE(dev, pipe->pipe_0x6c00, 0x6c00);
+	PIPE_SAVE(dev, pipe->pipe_0x7000, 0x7000);
+	PIPE_SAVE(dev, pipe->pipe_0x7400, 0x7400);
+	PIPE_SAVE(dev, pipe->pipe_0x7800, 0x7800);
+	PIPE_SAVE(dev, pipe->pipe_0x0040, 0x0040);
+	PIPE_SAVE(dev, pipe->pipe_0x0000, 0x0000);
 }
 
 static void nv10_graph_load_pipe(struct nouveau_channel *chan)
 {
 	struct drm_device *dev = chan->dev;
 	struct graph_state *pgraph_ctx = chan->pgraph_ctx;
-	struct pipe_state *fifo_pipe_state = &pgraph_ctx->pipe_state;
-	int i;
+	struct pipe_state *pipe = &pgraph_ctx->pipe_state;
 	uint32_t xfmode0, xfmode1;
-#define PIPE_RESTORE(addr) \
-	do { \
-		nv_wr32(dev, NV10_PGRAPH_PIPE_ADDRESS, addr); \
-		for (i = 0; i < ARRAY_SIZE(fifo_pipe_state->pipe_##addr); i++) \
-			nv_wr32(dev, NV10_PGRAPH_PIPE_DATA, fifo_pipe_state->pipe_##addr[i]); \
-	} while (0)
-
+	int i;
 
 	nouveau_wait_for_idle(dev);
 	/* XXX check haiku comments */
@@ -457,24 +458,22 @@ static void nv10_graph_load_pipe(struct nouveau_channel *chan)
 	nv_wr32(dev, NV10_PGRAPH_PIPE_DATA, 0x00000008);
 
 
-	PIPE_RESTORE(0x0200);
+	PIPE_RESTORE(dev, pipe->pipe_0x0200, 0x0200);
 	nouveau_wait_for_idle(dev);
 
 	/* restore XFMODE */
 	nv_wr32(dev, NV10_PGRAPH_XFMODE0, xfmode0);
 	nv_wr32(dev, NV10_PGRAPH_XFMODE1, xfmode1);
-	PIPE_RESTORE(0x6400);
-	PIPE_RESTORE(0x6800);
-	PIPE_RESTORE(0x6c00);
-	PIPE_RESTORE(0x7000);
-	PIPE_RESTORE(0x7400);
-	PIPE_RESTORE(0x7800);
-	PIPE_RESTORE(0x4400);
-	PIPE_RESTORE(0x0000);
-	PIPE_RESTORE(0x0040);
+	PIPE_RESTORE(dev, pipe->pipe_0x6400, 0x6400);
+	PIPE_RESTORE(dev, pipe->pipe_0x6800, 0x6800);
+	PIPE_RESTORE(dev, pipe->pipe_0x6c00, 0x6c00);
+	PIPE_RESTORE(dev, pipe->pipe_0x7000, 0x7000);
+	PIPE_RESTORE(dev, pipe->pipe_0x7400, 0x7400);
+	PIPE_RESTORE(dev, pipe->pipe_0x7800, 0x7800);
+	PIPE_RESTORE(dev, pipe->pipe_0x4400, 0x4400);
+	PIPE_RESTORE(dev, pipe->pipe_0x0000, 0x0000);
+	PIPE_RESTORE(dev, pipe->pipe_0x0040, 0x0040);
 	nouveau_wait_for_idle(dev);
-
-#undef PIPE_RESTORE
 }
 
 static void nv10_graph_create_pipe(struct nouveau_channel *chan)
@@ -808,6 +807,20 @@ void nv10_graph_destroy_context(struct nouveau_channel *chan)
 	chan->pgraph_ctx = NULL;
 }
 
+void
+nv10_graph_set_region_tiling(struct drm_device *dev, int i, uint32_t addr,
+			     uint32_t size, uint32_t pitch)
+{
+	uint32_t limit = max(1u, addr + size) - 1;
+
+	if (pitch)
+		addr |= 1 << 31;
+
+	nv_wr32(dev, NV10_PGRAPH_TLIMIT(i), limit);
+	nv_wr32(dev, NV10_PGRAPH_TSIZE(i), pitch);
+	nv_wr32(dev, NV10_PGRAPH_TILE(i), addr);
+}
+
 int nv10_graph_init(struct drm_device *dev)
 {
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
@@ -832,21 +845,16 @@ int nv10_graph_init(struct drm_device *dev)
 				      (1<<31));
 	if (dev_priv->chipset >= 0x17) {
 		nv_wr32(dev, NV10_PGRAPH_DEBUG_4, 0x1f000000);
+		nv_wr32(dev, 0x400a10, 0x3ff3fb6);
+		nv_wr32(dev, 0x400838, 0x2f8684);
+		nv_wr32(dev, 0x40083c, 0x115f3f);
 		nv_wr32(dev, 0x004006b0, 0x40000020);
 	} else
 		nv_wr32(dev, NV10_PGRAPH_DEBUG_4, 0x00000000);
 
-	/* copy tile info from PFB */
-	for (i = 0; i < NV10_PFB_TILE__SIZE; i++) {
-		nv_wr32(dev, NV10_PGRAPH_TILE(i),
-					nv_rd32(dev, NV10_PFB_TILE(i)));
-		nv_wr32(dev, NV10_PGRAPH_TLIMIT(i),
-					nv_rd32(dev, NV10_PFB_TLIMIT(i)));
-		nv_wr32(dev, NV10_PGRAPH_TSIZE(i),
-					nv_rd32(dev, NV10_PFB_TSIZE(i)));
-		nv_wr32(dev, NV10_PGRAPH_TSTATUS(i),
-					nv_rd32(dev, NV10_PFB_TSTATUS(i)));
-	}
+	/* Turn all the tiling regions off. */
+	for (i = 0; i < NV10_PFB_TILE__SIZE; i++)
+		nv10_graph_set_region_tiling(dev, i, 0, 0, 0);
 
 	nv_wr32(dev, NV10_PGRAPH_CTX_SWITCH1, 0x00000000);
 	nv_wr32(dev, NV10_PGRAPH_CTX_SWITCH2, 0x00000000);
@@ -867,6 +875,115 @@ void nv10_graph_takedown(struct drm_device *dev)
 {
 }
 
+static int
+nv17_graph_mthd_lma_window(struct nouveau_channel *chan, int grclass,
+			   int mthd, uint32_t data)
+{
+	struct drm_device *dev = chan->dev;
+	struct graph_state *ctx = chan->pgraph_ctx;
+	struct pipe_state *pipe = &ctx->pipe_state;
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	struct nouveau_pgraph_engine *pgraph = &dev_priv->engine.graph;
+	uint32_t pipe_0x0040[1], pipe_0x64c0[8], pipe_0x6a80[3], pipe_0x6ab0[3];
+	uint32_t xfmode0, xfmode1;
+	int i;
+
+	ctx->lma_window[(mthd - 0x1638) / 4] = data;
+
+	if (mthd != 0x1644)
+		return 0;
+
+	nouveau_wait_for_idle(dev);
+
+	PIPE_SAVE(dev, pipe_0x0040, 0x0040);
+	PIPE_SAVE(dev, pipe->pipe_0x0200, 0x0200);
+
+	PIPE_RESTORE(dev, ctx->lma_window, 0x6790);
+
+	nouveau_wait_for_idle(dev);
+
+	xfmode0 = nv_rd32(dev, NV10_PGRAPH_XFMODE0);
+	xfmode1 = nv_rd32(dev, NV10_PGRAPH_XFMODE1);
+
+	PIPE_SAVE(dev, pipe->pipe_0x4400, 0x4400);
+	PIPE_SAVE(dev, pipe_0x64c0, 0x64c0);
+	PIPE_SAVE(dev, pipe_0x6ab0, 0x6ab0);
+	PIPE_SAVE(dev, pipe_0x6a80, 0x6a80);
+
+	nouveau_wait_for_idle(dev);
+
+	nv_wr32(dev, NV10_PGRAPH_XFMODE0, 0x10000000);
+	nv_wr32(dev, NV10_PGRAPH_XFMODE1, 0x00000000);
+	nv_wr32(dev, NV10_PGRAPH_PIPE_ADDRESS, 0x000064c0);
+	for (i = 0; i < 4; i++)
+		nv_wr32(dev, NV10_PGRAPH_PIPE_DATA, 0x3f800000);
+	for (i = 0; i < 4; i++)
+		nv_wr32(dev, NV10_PGRAPH_PIPE_DATA, 0x00000000);
+
+	nv_wr32(dev, NV10_PGRAPH_PIPE_ADDRESS, 0x00006ab0);
+	for (i = 0; i < 3; i++)
+		nv_wr32(dev, NV10_PGRAPH_PIPE_DATA, 0x3f800000);
+
+	nv_wr32(dev, NV10_PGRAPH_PIPE_ADDRESS, 0x00006a80);
+	for (i = 0; i < 3; i++)
+		nv_wr32(dev, NV10_PGRAPH_PIPE_DATA, 0x00000000);
+
+	nv_wr32(dev, NV10_PGRAPH_PIPE_ADDRESS, 0x00000040);
+	nv_wr32(dev, NV10_PGRAPH_PIPE_DATA, 0x00000008);
+
+	PIPE_RESTORE(dev, pipe->pipe_0x0200, 0x0200);
+
+	nouveau_wait_for_idle(dev);
+
+	PIPE_RESTORE(dev, pipe_0x0040, 0x0040);
+
+	nv_wr32(dev, NV10_PGRAPH_XFMODE0, xfmode0);
+	nv_wr32(dev, NV10_PGRAPH_XFMODE1, xfmode1);
+
+	PIPE_RESTORE(dev, pipe_0x64c0, 0x64c0);
+	PIPE_RESTORE(dev, pipe_0x6ab0, 0x6ab0);
+	PIPE_RESTORE(dev, pipe_0x6a80, 0x6a80);
+	PIPE_RESTORE(dev, pipe->pipe_0x4400, 0x4400);
+
+	nv_wr32(dev, NV10_PGRAPH_PIPE_ADDRESS, 0x000000c0);
+	nv_wr32(dev, NV10_PGRAPH_PIPE_DATA, 0x00000000);
+
+	nouveau_wait_for_idle(dev);
+
+	pgraph->fifo_access(dev, true);
+
+	return 0;
+}
+
+static int
+nv17_graph_mthd_lma_enable(struct nouveau_channel *chan, int grclass,
+			   int mthd, uint32_t data)
+{
+	struct drm_device *dev = chan->dev;
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	struct nouveau_pgraph_engine *pgraph = &dev_priv->engine.graph;
+
+	nouveau_wait_for_idle(dev);
+
+	nv_wr32(dev, NV10_PGRAPH_DEBUG_4,
+		nv_rd32(dev, NV10_PGRAPH_DEBUG_4) | 0x1 << 8);
+	nv_wr32(dev, 0x004006b0,
+		nv_rd32(dev, 0x004006b0) | 0x8 << 24);
+
+	pgraph->fifo_access(dev, true);
+
+	return 0;
+}
+
+static struct nouveau_pgraph_object_method nv17_graph_celsius_mthds[] = {
+	{ 0x1638, nv17_graph_mthd_lma_window },
+	{ 0x163c, nv17_graph_mthd_lma_window },
+	{ 0x1640, nv17_graph_mthd_lma_window },
+	{ 0x1644, nv17_graph_mthd_lma_window },
+	{ 0x1658, nv17_graph_mthd_lma_enable },
+	{}
+};
+
 struct nouveau_pgraph_object_class nv10_graph_grclass[] = {
 	{ 0x0030, false, NULL }, /* null */
 	{ 0x0039, false, NULL }, /* m2mf */
@@ -887,6 +1004,6 @@ struct nouveau_pgraph_object_class nv10_graph_grclass[] = {
 	{ 0x0095, false, NULL }, /* multitex_tri */
 	{ 0x0056, false, NULL }, /* celcius (nv10) */
 	{ 0x0096, false, NULL }, /* celcius (nv11) */
-	{ 0x0099, false, NULL }, /* celcius (nv17) */
+	{ 0x0099, false, nv17_graph_celsius_mthds }, /* celcius (nv17) */
 	{}
 };
diff --git a/drivers/gpu/drm/nouveau/nv17_gpio.c b/drivers/gpu/drm/nouveau/nv17_gpio.c
new file mode 100644
index 0000000..2e58c33
--- /dev/null
+++ b/drivers/gpu/drm/nouveau/nv17_gpio.c
@@ -0,0 +1,92 @@
+/*
+ * Copyright (C) 2009 Francisco Jerez.
+ * All Rights Reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial
+ * portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ *
+ */
+
+#include "drmP.h"
+#include "nouveau_drv.h"
+#include "nouveau_hw.h"
+
+static bool
+get_gpio_location(struct dcb_gpio_entry *ent, uint32_t *reg, uint32_t *shift,
+		  uint32_t *mask)
+{
+	if (ent->line < 2) {
+		*reg = NV_PCRTC_GPIO;
+		*shift = ent->line * 16;
+		*mask = 0x11;
+
+	} else if (ent->line < 10) {
+		*reg = NV_PCRTC_GPIO_EXT;
+		*shift = (ent->line - 2) * 4;
+		*mask = 0x3;
+
+	} else if (ent->line < 14) {
+		*reg = NV_PCRTC_850;
+		*shift = (ent->line - 10) * 4;
+		*mask = 0x3;
+
+	} else {
+		return false;
+	}
+
+	return true;
+}
+
+int
+nv17_gpio_get(struct drm_device *dev, enum dcb_gpio_tag tag)
+{
+	struct dcb_gpio_entry *ent = nouveau_bios_gpio_entry(dev, tag);
+	uint32_t reg, shift, mask, value;
+
+	if (!ent)
+		return -ENODEV;
+
+	if (!get_gpio_location(ent, &reg, &shift, &mask))
+		return -ENODEV;
+
+	value = NVReadCRTC(dev, 0, reg) >> shift;
+
+	return (ent->invert ? 1 : 0) ^ (value & 1);
+}
+
+int
+nv17_gpio_set(struct drm_device *dev, enum dcb_gpio_tag tag, int state)
+{
+	struct dcb_gpio_entry *ent = nouveau_bios_gpio_entry(dev, tag);
+	uint32_t reg, shift, mask, value;
+
+	if (!ent)
+		return -ENODEV;
+
+	if (!get_gpio_location(ent, &reg, &shift, &mask))
+		return -ENODEV;
+
+	value = ((ent->invert ? 1 : 0) ^ (state ? 1 : 0)) << shift;
+	mask = ~(mask << shift);
+
+	NVWriteCRTC(dev, 0, reg, value | (NVReadCRTC(dev, 0, reg) & mask));
+
+	return 0;
+}
diff --git a/drivers/gpu/drm/nouveau/nv17_tv.c b/drivers/gpu/drm/nouveau/nv17_tv.c
index 34f95c7..58b917c 100644
--- a/drivers/gpu/drm/nouveau/nv17_tv.c
+++ b/drivers/gpu/drm/nouveau/nv17_tv.c
@@ -33,15 +33,105 @@
 #include "nouveau_hw.h"
 #include "nv17_tv.h"
 
-enum drm_connector_status nv17_tv_detect(struct drm_encoder *encoder,
-					 struct drm_connector *connector,
-					 uint32_t pin_mask)
+static uint32_t nv42_tv_sample_load(struct drm_encoder *encoder)
 {
+	struct drm_device *dev = encoder->dev;
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	uint32_t testval, regoffset = nv04_dac_output_offset(encoder);
+	uint32_t gpio0, gpio1, fp_htotal, fp_hsync_start, fp_hsync_end,
+		fp_control, test_ctrl, dacclk, ctv_14, ctv_1c, ctv_6c;
+	uint32_t sample = 0;
+	int head;
+
+#define RGB_TEST_DATA(r, g, b) (r << 0 | g << 10 | b << 20)
+	testval = RGB_TEST_DATA(0x82, 0xeb, 0x82);
+	if (dev_priv->vbios->tvdactestval)
+		testval = dev_priv->vbios->tvdactestval;
+
+	dacclk = NVReadRAMDAC(dev, 0, NV_PRAMDAC_DACCLK + regoffset);
+	head = (dacclk & 0x100) >> 8;
+
+	/* Save the previous state. */
+	gpio1 = nv17_gpio_get(dev, DCB_GPIO_TVDAC1);
+	gpio0 = nv17_gpio_get(dev, DCB_GPIO_TVDAC0);
+	fp_htotal = NVReadRAMDAC(dev, head, NV_PRAMDAC_FP_HTOTAL);
+	fp_hsync_start = NVReadRAMDAC(dev, head, NV_PRAMDAC_FP_HSYNC_START);
+	fp_hsync_end = NVReadRAMDAC(dev, head, NV_PRAMDAC_FP_HSYNC_END);
+	fp_control = NVReadRAMDAC(dev, head, NV_PRAMDAC_FP_TG_CONTROL);
+	test_ctrl = NVReadRAMDAC(dev, 0, NV_PRAMDAC_TEST_CONTROL + regoffset);
+	ctv_1c = NVReadRAMDAC(dev, head, 0x680c1c);
+	ctv_14 = NVReadRAMDAC(dev, head, 0x680c14);
+	ctv_6c = NVReadRAMDAC(dev, head, 0x680c6c);
+
+	/* Prepare the DAC for load detection.  */
+	nv17_gpio_set(dev, DCB_GPIO_TVDAC1, true);
+	nv17_gpio_set(dev, DCB_GPIO_TVDAC0, true);
+
+	NVWriteRAMDAC(dev, head, NV_PRAMDAC_FP_HTOTAL, 1343);
+	NVWriteRAMDAC(dev, head, NV_PRAMDAC_FP_HSYNC_START, 1047);
+	NVWriteRAMDAC(dev, head, NV_PRAMDAC_FP_HSYNC_END, 1183);
+	NVWriteRAMDAC(dev, head, NV_PRAMDAC_FP_TG_CONTROL,
+		      NV_PRAMDAC_FP_TG_CONTROL_DISPEN_POS |
+		      NV_PRAMDAC_FP_TG_CONTROL_WIDTH_12 |
+		      NV_PRAMDAC_FP_TG_CONTROL_READ_PROG |
+		      NV_PRAMDAC_FP_TG_CONTROL_HSYNC_POS |
+		      NV_PRAMDAC_FP_TG_CONTROL_VSYNC_POS);
+
+	NVWriteRAMDAC(dev, 0, NV_PRAMDAC_TEST_CONTROL + regoffset, 0);
+
+	NVWriteRAMDAC(dev, 0, NV_PRAMDAC_DACCLK + regoffset,
+		      (dacclk & ~0xff) | 0x22);
+	msleep(1);
+	NVWriteRAMDAC(dev, 0, NV_PRAMDAC_DACCLK + regoffset,
+		      (dacclk & ~0xff) | 0x21);
+
+	NVWriteRAMDAC(dev, head, 0x680c1c, 1 << 20);
+	NVWriteRAMDAC(dev, head, 0x680c14, 4 << 16);
+
+	/* Sample pin 0x4 (usually S-video luma). */
+	NVWriteRAMDAC(dev, head, 0x680c6c, testval >> 10 & 0x3ff);
+	msleep(20);
+	sample |= NVReadRAMDAC(dev, 0, NV_PRAMDAC_TEST_CONTROL + regoffset)
+		& 0x4 << 28;
+
+	/* Sample the remaining pins. */
+	NVWriteRAMDAC(dev, head, 0x680c6c, testval & 0x3ff);
+	msleep(20);
+	sample |= NVReadRAMDAC(dev, 0, NV_PRAMDAC_TEST_CONTROL + regoffset)
+		& 0xa << 28;
+
+	/* Restore the previous state. */
+	NVWriteRAMDAC(dev, head, 0x680c1c, ctv_1c);
+	NVWriteRAMDAC(dev, head, 0x680c14, ctv_14);
+	NVWriteRAMDAC(dev, head, 0x680c6c, ctv_6c);
+	NVWriteRAMDAC(dev, 0, NV_PRAMDAC_DACCLK + regoffset, dacclk);
+	NVWriteRAMDAC(dev, 0, NV_PRAMDAC_TEST_CONTROL + regoffset, test_ctrl);
+	NVWriteRAMDAC(dev, head, NV_PRAMDAC_FP_TG_CONTROL, fp_control);
+	NVWriteRAMDAC(dev, head, NV_PRAMDAC_FP_HSYNC_END, fp_hsync_end);
+	NVWriteRAMDAC(dev, head, NV_PRAMDAC_FP_HSYNC_START, fp_hsync_start);
+	NVWriteRAMDAC(dev, head, NV_PRAMDAC_FP_HTOTAL, fp_htotal);
+	nv17_gpio_set(dev, DCB_GPIO_TVDAC1, gpio1);
+	nv17_gpio_set(dev, DCB_GPIO_TVDAC0, gpio0);
+
+	return sample;
+}
+
+static enum drm_connector_status
+nv17_tv_detect(struct drm_encoder *encoder, struct drm_connector *connector)
+{
+	struct drm_device *dev = encoder->dev;
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	struct drm_mode_config *conf = &dev->mode_config;
 	struct nv17_tv_encoder *tv_enc = to_tv_enc(encoder);
+	struct dcb_entry *dcb = tv_enc->base.dcb;
 
-	tv_enc->pin_mask = pin_mask;
+	if (dev_priv->chipset == 0x42 ||
+	    dev_priv->chipset == 0x43)
+		tv_enc->pin_mask = nv42_tv_sample_load(encoder) >> 28 & 0xe;
+	else
+		tv_enc->pin_mask = nv17_dac_sample_load(encoder) >> 28 & 0xe;
 
-	switch (pin_mask) {
+	switch (tv_enc->pin_mask) {
 	case 0x2:
 	case 0x4:
 		tv_enc->subconnector = DRM_MODE_SUBCONNECTOR_Composite;
@@ -50,7 +140,7 @@ enum drm_connector_status nv17_tv_detect(struct drm_encoder *encoder,
 		tv_enc->subconnector = DRM_MODE_SUBCONNECTOR_SVIDEO;
 		break;
 	case 0xe:
-		if (nouveau_encoder(encoder)->dcb->tvconf.has_component_output)
+		if (dcb->tvconf.has_component_output)
 			tv_enc->subconnector = DRM_MODE_SUBCONNECTOR_Component;
 		else
 			tv_enc->subconnector = DRM_MODE_SUBCONNECTOR_SCART;
@@ -61,11 +151,16 @@ enum drm_connector_status nv17_tv_detect(struct drm_encoder *encoder,
 	}
 
 	drm_connector_property_set_value(connector,
-			encoder->dev->mode_config.tv_subconnector_property,
-							tv_enc->subconnector);
+					 conf->tv_subconnector_property,
+					 tv_enc->subconnector);
 
-	return tv_enc->subconnector ? connector_status_connected :
-					connector_status_disconnected;
+	if (tv_enc->subconnector) {
+		NV_INFO(dev, "Load detected on output %c\n",
+			'@' + ffs(dcb->or));
+		return connector_status_connected;
+	} else {
+		return connector_status_disconnected;
+	}
 }
 
 static const struct {
@@ -212,7 +307,6 @@ static bool nv17_tv_mode_fixup(struct drm_encoder *encoder,
 static void  nv17_tv_dpms(struct drm_encoder *encoder, int mode)
 {
 	struct drm_device *dev = encoder->dev;
-	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	struct nv17_tv_state *regs = &to_tv_enc(encoder)->state;
 	struct nv17_tv_norm_params *tv_norm = get_tv_norm(encoder);
 
@@ -220,7 +314,7 @@ static void  nv17_tv_dpms(struct drm_encoder *encoder, int mode)
 		return;
 	nouveau_encoder(encoder)->last_dpms = mode;
 
-	NV_TRACE(dev, "Setting dpms mode %d on TV encoder (output %d)\n",
+	NV_INFO(dev, "Setting dpms mode %d on TV encoder (output %d)\n",
 		 mode, nouveau_encoder(encoder)->dcb->index);
 
 	regs->ptv_200 &= ~1;
@@ -237,15 +331,8 @@ static void  nv17_tv_dpms(struct drm_encoder *encoder, int mode)
 
 	nv_load_ptv(dev, regs, 200);
 
-	if (dev_priv->chipset >= 0x34) {
-		uint32_t *gpio_ext = &dev_priv->mode_reg.crtc_reg[0].gpio_ext;
-
-		*gpio_ext &= ~(3 << 20);
-		if (mode == DRM_MODE_DPMS_ON)
-			*gpio_ext |= 1 << 20;
-
-		NVWriteCRTC(dev, 0, NV_PCRTC_GPIO_EXT, *gpio_ext);
-	}
+	nv17_gpio_set(dev, DCB_GPIO_TVDAC1, mode == DRM_MODE_DPMS_ON);
+	nv17_gpio_set(dev, DCB_GPIO_TVDAC0, mode == DRM_MODE_DPMS_ON);
 
 	nv04_dac_update_dacclk(encoder, mode == DRM_MODE_DPMS_ON);
 }
@@ -299,8 +386,8 @@ static void nv17_tv_prepare(struct drm_encoder *encoder)
 	/* Set the DACCLK register */
 	dacclk = (NVReadRAMDAC(dev, 0, dacclk_off) & ~0x30) | 0x1;
 
-	if (nv_arch(dev) == NV_40)
-		dacclk |= 1 << 20;
+	if (dev_priv->card_type == NV_40)
+		dacclk |= 0x1a << 16;
 
 	if (tv_norm->kind == CTV_ENC_MODE) {
 		dacclk |=  0x20;
@@ -356,7 +443,7 @@ static void nv17_tv_mode_set(struct drm_encoder *encoder,
 			tv_regs->ptv_614 = 0x13;
 		}
 
-		if (nv_arch(dev) >= NV_30) {
+		if (dev_priv->card_type >= NV_30) {
 			tv_regs->ptv_500 = 0xe8e0;
 			tv_regs->ptv_504 = 0x1710;
 			tv_regs->ptv_604 = 0x0;
@@ -627,7 +714,7 @@ static void nv17_tv_destroy(struct drm_encoder *encoder)
 {
 	struct nv17_tv_encoder *tv_enc = to_tv_enc(encoder);
 
-	NV_DEBUG(encoder->dev, "\n");
+	NV_DEBUG_KMS(encoder->dev, "\n");
 
 	drm_encoder_cleanup(encoder);
 	kfree(tv_enc);
@@ -641,7 +728,7 @@ static struct drm_encoder_helper_funcs nv17_tv_helper_funcs = {
 	.prepare = nv17_tv_prepare,
 	.commit = nv17_tv_commit,
 	.mode_set = nv17_tv_mode_set,
-	.detect = nv17_dac_detect,
+	.detect = nv17_tv_detect,
 };
 
 static struct drm_encoder_slave_funcs nv17_tv_slave_funcs = {
diff --git a/drivers/gpu/drm/nouveau/nv20_graph.c b/drivers/gpu/drm/nouveau/nv20_graph.c
index eeadc14..d6fc0a8 100644
--- a/drivers/gpu/drm/nouveau/nv20_graph.c
+++ b/drivers/gpu/drm/nouveau/nv20_graph.c
@@ -514,6 +514,27 @@ nv20_graph_rdi(struct drm_device *dev)
 	nouveau_wait_for_idle(dev);
 }
 
+void
+nv20_graph_set_region_tiling(struct drm_device *dev, int i, uint32_t addr,
+			     uint32_t size, uint32_t pitch)
+{
+	uint32_t limit = max(1u, addr + size) - 1;
+
+	if (pitch)
+		addr |= 1;
+
+	nv_wr32(dev, NV20_PGRAPH_TLIMIT(i), limit);
+	nv_wr32(dev, NV20_PGRAPH_TSIZE(i), pitch);
+	nv_wr32(dev, NV20_PGRAPH_TILE(i), addr);
+
+	nv_wr32(dev, NV10_PGRAPH_RDI_INDEX, 0x00EA0030 + 4 * i);
+	nv_wr32(dev, NV10_PGRAPH_RDI_DATA, limit);
+	nv_wr32(dev, NV10_PGRAPH_RDI_INDEX, 0x00EA0050 + 4 * i);
+	nv_wr32(dev, NV10_PGRAPH_RDI_DATA, pitch);
+	nv_wr32(dev, NV10_PGRAPH_RDI_INDEX, 0x00EA0010 + 4 * i);
+	nv_wr32(dev, NV10_PGRAPH_RDI_DATA, addr);
+}
+
 int
 nv20_graph_init(struct drm_device *dev)
 {
@@ -572,27 +593,10 @@ nv20_graph_init(struct drm_device *dev)
 		nv_wr32(dev, NV10_PGRAPH_RDI_DATA , 0x00000030);
 	}
 
-	/* copy tile info from PFB */
-	for (i = 0; i < NV10_PFB_TILE__SIZE; i++) {
-		nv_wr32(dev, 0x00400904 + i * 0x10,
-					nv_rd32(dev, NV10_PFB_TLIMIT(i)));
-			/* which is NV40_PGRAPH_TLIMIT0(i) ?? */
-		nv_wr32(dev, NV10_PGRAPH_RDI_INDEX, 0x00EA0030 + i * 4);
-		nv_wr32(dev, NV10_PGRAPH_RDI_DATA,
-					nv_rd32(dev, NV10_PFB_TLIMIT(i)));
-		nv_wr32(dev, 0x00400908 + i * 0x10,
-					nv_rd32(dev, NV10_PFB_TSIZE(i)));
-			/* which is NV40_PGRAPH_TSIZE0(i) ?? */
-		nv_wr32(dev, NV10_PGRAPH_RDI_INDEX, 0x00EA0050 + i * 4);
-		nv_wr32(dev, NV10_PGRAPH_RDI_DATA,
-					nv_rd32(dev, NV10_PFB_TSIZE(i)));
-		nv_wr32(dev, 0x00400900 + i * 0x10,
-					nv_rd32(dev, NV10_PFB_TILE(i)));
-			/* which is NV40_PGRAPH_TILE0(i) ?? */
-		nv_wr32(dev, NV10_PGRAPH_RDI_INDEX, 0x00EA0010 + i * 4);
-		nv_wr32(dev, NV10_PGRAPH_RDI_DATA,
-					nv_rd32(dev, NV10_PFB_TILE(i)));
-	}
+	/* Turn all the tiling regions off. */
+	for (i = 0; i < NV10_PFB_TILE__SIZE; i++)
+		nv20_graph_set_region_tiling(dev, i, 0, 0, 0);
+
 	for (i = 0; i < 8; i++) {
 		nv_wr32(dev, 0x400980 + i * 4, nv_rd32(dev, 0x100300 + i * 4));
 		nv_wr32(dev, NV10_PGRAPH_RDI_INDEX, 0x00EA0090 + i * 4);
@@ -704,18 +708,9 @@ nv30_graph_init(struct drm_device *dev)
 
 	nv_wr32(dev, 0x4000c0, 0x00000016);
 
-	/* copy tile info from PFB */
-	for (i = 0; i < NV10_PFB_TILE__SIZE; i++) {
-		nv_wr32(dev, 0x00400904 + i * 0x10,
-					nv_rd32(dev, NV10_PFB_TLIMIT(i)));
-			/* which is NV40_PGRAPH_TLIMIT0(i) ?? */
-		nv_wr32(dev, 0x00400908 + i * 0x10,
-					nv_rd32(dev, NV10_PFB_TSIZE(i)));
-			/* which is NV40_PGRAPH_TSIZE0(i) ?? */
-		nv_wr32(dev, 0x00400900 + i * 0x10,
-					nv_rd32(dev, NV10_PFB_TILE(i)));
-			/* which is NV40_PGRAPH_TILE0(i) ?? */
-	}
+	/* Turn all the tiling regions off. */
+	for (i = 0; i < NV10_PFB_TILE__SIZE; i++)
+		nv20_graph_set_region_tiling(dev, i, 0, 0, 0);
 
 	nv_wr32(dev, NV10_PGRAPH_CTX_CONTROL, 0x10000100);
 	nv_wr32(dev, NV10_PGRAPH_STATE      , 0xFFFFFFFF);
@@ -761,9 +756,11 @@ struct nouveau_pgraph_object_class nv30_graph_grclass[] = {
 	{ 0x004a, false, NULL }, /* gdirect */
 	{ 0x009f, false, NULL }, /* imageblit (nv12) */
 	{ 0x008a, false, NULL }, /* ifc */
+	{ 0x038a, false, NULL }, /* ifc (nv30) */
 	{ 0x0089, false, NULL }, /* sifm */
 	{ 0x0389, false, NULL }, /* sifm (nv30) */
 	{ 0x0062, false, NULL }, /* surf2d */
+	{ 0x0362, false, NULL }, /* surf2d (nv30) */
 	{ 0x0043, false, NULL }, /* rop */
 	{ 0x0012, false, NULL }, /* beta1 */
 	{ 0x0072, false, NULL }, /* beta4 */
diff --git a/drivers/gpu/drm/nouveau/nv40_fb.c b/drivers/gpu/drm/nouveau/nv40_fb.c
index ca1d271..3cd07d8 100644
--- a/drivers/gpu/drm/nouveau/nv40_fb.c
+++ b/drivers/gpu/drm/nouveau/nv40_fb.c
@@ -3,12 +3,37 @@
 #include "nouveau_drv.h"
 #include "nouveau_drm.h"
 
+void
+nv40_fb_set_region_tiling(struct drm_device *dev, int i, uint32_t addr,
+			  uint32_t size, uint32_t pitch)
+{
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	uint32_t limit = max(1u, addr + size) - 1;
+
+	if (pitch)
+		addr |= 1;
+
+	switch (dev_priv->chipset) {
+	case 0x40:
+		nv_wr32(dev, NV10_PFB_TLIMIT(i), limit);
+		nv_wr32(dev, NV10_PFB_TSIZE(i), pitch);
+		nv_wr32(dev, NV10_PFB_TILE(i), addr);
+		break;
+
+	default:
+		nv_wr32(dev, NV40_PFB_TLIMIT(i), limit);
+		nv_wr32(dev, NV40_PFB_TSIZE(i), pitch);
+		nv_wr32(dev, NV40_PFB_TILE(i), addr);
+		break;
+	}
+}
+
 int
 nv40_fb_init(struct drm_device *dev)
 {
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
-	uint32_t fb_bar_size, tmp;
-	int num_tiles;
+	struct nouveau_fb_engine *pfb = &dev_priv->engine.fb;
+	uint32_t tmp;
 	int i;
 
 	/* This is strictly a NV4x register (don't know about NV5x). */
@@ -23,35 +48,23 @@ nv40_fb_init(struct drm_device *dev)
 	case 0x45:
 		tmp = nv_rd32(dev, NV10_PFB_CLOSE_PAGE2);
 		nv_wr32(dev, NV10_PFB_CLOSE_PAGE2, tmp & ~(1 << 15));
-		num_tiles = NV10_PFB_TILE__SIZE;
+		pfb->num_tiles = NV10_PFB_TILE__SIZE;
 		break;
 	case 0x46: /* G72 */
 	case 0x47: /* G70 */
 	case 0x49: /* G71 */
 	case 0x4b: /* G73 */
 	case 0x4c: /* C51 (G7X version) */
-		num_tiles = NV40_PFB_TILE__SIZE_1;
+		pfb->num_tiles = NV40_PFB_TILE__SIZE_1;
 		break;
 	default:
-		num_tiles = NV40_PFB_TILE__SIZE_0;
+		pfb->num_tiles = NV40_PFB_TILE__SIZE_0;
 		break;
 	}
 
-	fb_bar_size = drm_get_resource_len(dev, 0) - 1;
-	switch (dev_priv->chipset) {
-	case 0x40:
-		for (i = 0; i < num_tiles; i++) {
-			nv_wr32(dev, NV10_PFB_TILE(i), 0);
-			nv_wr32(dev, NV10_PFB_TLIMIT(i), fb_bar_size);
-		}
-		break;
-	default:
-		for (i = 0; i < num_tiles; i++) {
-			nv_wr32(dev, NV40_PFB_TILE(i), 0);
-			nv_wr32(dev, NV40_PFB_TLIMIT(i), fb_bar_size);
-		}
-		break;
-	}
+	/* Turn all the tiling regions off. */
+	for (i = 0; i < pfb->num_tiles; i++)
+		pfb->set_region_tiling(dev, i, 0, 0, 0);
 
 	return 0;
 }
diff --git a/drivers/gpu/drm/nouveau/nv40_graph.c b/drivers/gpu/drm/nouveau/nv40_graph.c
index 9b5e03a..53e8afe 100644
--- a/drivers/gpu/drm/nouveau/nv40_graph.c
+++ b/drivers/gpu/drm/nouveau/nv40_graph.c
@@ -27,1417 +27,7 @@
 #include "drmP.h"
 #include "drm.h"
 #include "nouveau_drv.h"
-
-/*TODO: deciper what each offset in the context represents. The below
- *      contexts are taken from dumps just after the 3D object is
- *      created.
- */
-static void
-nv40_graph_context_init(struct drm_device *dev, struct nouveau_gpuobj *ctx)
-{
-	int i;
-
-	/* Always has the "instance address" of itself at offset 0 */
-	nv_wo32(dev, ctx, 0x00000/4, ctx->im_pramin->start);
-	/* unknown */
-	nv_wo32(dev, ctx, 0x00024/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00028/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00030/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x0011c/4, 0x20010001);
-	nv_wo32(dev, ctx, 0x00120/4, 0x0f73ef00);
-	nv_wo32(dev, ctx, 0x00128/4, 0x02008821);
-	nv_wo32(dev, ctx, 0x0016c/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00170/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00174/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x0017c/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x00180/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x00184/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x00188/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x0018c/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x0019c/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x001a0/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x001b0/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x001c0/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x001d0/4, 0x0b0b0b0c);
-	nv_wo32(dev, ctx, 0x00340/4, 0x00040000);
-	nv_wo32(dev, ctx, 0x00350/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00354/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00358/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x0035c/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00388/4, 0x00000008);
-	nv_wo32(dev, ctx, 0x0039c/4, 0x00000010);
-	nv_wo32(dev, ctx, 0x00480/4, 0x00000100);
-	nv_wo32(dev, ctx, 0x00494/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00498/4, 0x00080060);
-	nv_wo32(dev, ctx, 0x004b4/4, 0x00000080);
-	nv_wo32(dev, ctx, 0x004b8/4, 0xffff0000);
-	nv_wo32(dev, ctx, 0x004bc/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x004d0/4, 0x46400000);
-	nv_wo32(dev, ctx, 0x004ec/4, 0xffff0000);
-	nv_wo32(dev, ctx, 0x004f8/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x004fc/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x00504/4, 0x00011100);
-	for (i = 0x00520; i <= 0x0055c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x00568/4, 0x4b7fffff);
-	nv_wo32(dev, ctx, 0x00594/4, 0x30201000);
-	nv_wo32(dev, ctx, 0x00598/4, 0x70605040);
-	nv_wo32(dev, ctx, 0x0059c/4, 0xb8a89888);
-	nv_wo32(dev, ctx, 0x005a0/4, 0xf8e8d8c8);
-	nv_wo32(dev, ctx, 0x005b4/4, 0x40100000);
-	nv_wo32(dev, ctx, 0x005cc/4, 0x00000004);
-	nv_wo32(dev, ctx, 0x005d8/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x0060c/4, 0x435185d6);
-	nv_wo32(dev, ctx, 0x00610/4, 0x2155b699);
-	nv_wo32(dev, ctx, 0x00614/4, 0xfedcba98);
-	nv_wo32(dev, ctx, 0x00618/4, 0x00000098);
-	nv_wo32(dev, ctx, 0x00628/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x0062c/4, 0x00ff7000);
-	nv_wo32(dev, ctx, 0x00630/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00640/4, 0x00ff0000);
-	nv_wo32(dev, ctx, 0x0067c/4, 0x00ffff00);
-	/* 0x680-0x6BC - NV30_TCL_PRIMITIVE_3D_TX_ADDRESS_UNIT(0-15) */
-	/* 0x6C0-0x6FC - NV30_TCL_PRIMITIVE_3D_TX_FORMAT_UNIT(0-15) */
-	for (i = 0x006C0; i <= 0x006fc; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00018488);
-	/* 0x700-0x73C - NV30_TCL_PRIMITIVE_3D_TX_WRAP_UNIT(0-15) */
-	for (i = 0x00700; i <= 0x0073c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00028202);
-	/* 0x740-0x77C - NV30_TCL_PRIMITIVE_3D_TX_ENABLE_UNIT(0-15) */
-	/* 0x780-0x7BC - NV30_TCL_PRIMITIVE_3D_TX_SWIZZLE_UNIT(0-15) */
-	for (i = 0x00780; i <= 0x007bc; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x0000aae4);
-	/* 0x7C0-0x7FC - NV30_TCL_PRIMITIVE_3D_TX_FILTER_UNIT(0-15) */
-	for (i = 0x007c0; i <= 0x007fc; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x01012000);
-	/* 0x800-0x83C - NV30_TCL_PRIMITIVE_3D_TX_XY_DIM_UNIT(0-15) */
-	for (i = 0x00800; i <= 0x0083c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00080008);
-	/* 0x840-0x87C - NV30_TCL_PRIMITIVE_3D_TX_UNK07_UNIT(0-15) */
-	/* 0x880-0x8BC - NV30_TCL_PRIMITIVE_3D_TX_DEPTH_UNIT(0-15) */
-	for (i = 0x00880; i <= 0x008bc; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00100008);
-	/* unknown */
-	for (i = 0x00910; i <= 0x0091c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x0001bc80);
-	for (i = 0x00920; i <= 0x0092c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000202);
-	for (i = 0x00940; i <= 0x0094c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000008);
-	for (i = 0x00960; i <= 0x0096c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00080008);
-	nv_wo32(dev, ctx, 0x00980/4, 0x00000002);
-	nv_wo32(dev, ctx, 0x009b4/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x009c0/4, 0x3e020200);
-	nv_wo32(dev, ctx, 0x009c4/4, 0x00ffffff);
-	nv_wo32(dev, ctx, 0x009c8/4, 0x60103f00);
-	nv_wo32(dev, ctx, 0x009d4/4, 0x00020000);
-	nv_wo32(dev, ctx, 0x00a08/4, 0x00008100);
-	nv_wo32(dev, ctx, 0x00aac/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00af0/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00af8/4, 0x80800001);
-	nv_wo32(dev, ctx, 0x00bcc/4, 0x00000005);
-	nv_wo32(dev, ctx, 0x00bf8/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00bfc/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c00/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c04/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c08/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c0c/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c44/4, 0x00000001);
-	for (i = 0x03008; i <= 0x03080; i += 8)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x05288; i <= 0x08570; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x08628; i <= 0x08e18; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x0bd28; i <= 0x0f010; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x0f0c8; i <= 0x0f8b8; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x127c8; i <= 0x15ab0; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x15b68; i <= 0x16358; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x19268; i <= 0x1c550; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x1c608; i <= 0x1cdf8; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x1fd08; i <= 0x22ff0; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x230a8; i <= 0x23898; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x267a8; i <= 0x29a90; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x29b48; i <= 0x2a338; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-}
-
-static void
-nv41_graph_context_init(struct drm_device *dev, struct nouveau_gpuobj *ctx)
-{
-	int i;
-
-	nv_wo32(dev, ctx, 0x00000/4, ctx->im_pramin->start);
-	nv_wo32(dev, ctx, 0x00000024/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00000028/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00000030/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x0000011c/4, 0x20010001);
-	nv_wo32(dev, ctx, 0x00000120/4, 0x0f73ef00);
-	nv_wo32(dev, ctx, 0x00000128/4, 0x02008821);
-	for (i = 0x00000178; i <= 0x00000180; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00000188/4, 0x00000040);
-	for (i = 0x00000194; i <= 0x000001b0; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x000001d0/4, 0x0b0b0b0c);
-	nv_wo32(dev, ctx, 0x00000340/4, 0x00040000);
-	for (i = 0x00000350; i <= 0x0000035c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00000388/4, 0x00000008);
-	nv_wo32(dev, ctx, 0x0000039c/4, 0x00001010);
-	nv_wo32(dev, ctx, 0x000003cc/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x000003d0/4, 0x00080060);
-	nv_wo32(dev, ctx, 0x000003ec/4, 0x00000080);
-	nv_wo32(dev, ctx, 0x000003f0/4, 0xffff0000);
-	nv_wo32(dev, ctx, 0x000003f4/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00000408/4, 0x46400000);
-	nv_wo32(dev, ctx, 0x00000418/4, 0xffff0000);
-	nv_wo32(dev, ctx, 0x00000424/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x00000428/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x00000430/4, 0x00011100);
-	for (i = 0x0000044c; i <= 0x00000488; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x00000494/4, 0x4b7fffff);
-	nv_wo32(dev, ctx, 0x000004bc/4, 0x30201000);
-	nv_wo32(dev, ctx, 0x000004c0/4, 0x70605040);
-	nv_wo32(dev, ctx, 0x000004c4/4, 0xb8a89888);
-	nv_wo32(dev, ctx, 0x000004c8/4, 0xf8e8d8c8);
-	nv_wo32(dev, ctx, 0x000004dc/4, 0x40100000);
-	nv_wo32(dev, ctx, 0x000004f8/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x0000052c/4, 0x435185d6);
-	nv_wo32(dev, ctx, 0x00000530/4, 0x2155b699);
-	nv_wo32(dev, ctx, 0x00000534/4, 0xfedcba98);
-	nv_wo32(dev, ctx, 0x00000538/4, 0x00000098);
-	nv_wo32(dev, ctx, 0x00000548/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x0000054c/4, 0x00ff7000);
-	nv_wo32(dev, ctx, 0x00000550/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00000560/4, 0x00ff0000);
-	nv_wo32(dev, ctx, 0x00000598/4, 0x00ffff00);
-	for (i = 0x000005dc; i <= 0x00000618; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00018488);
-	for (i = 0x0000061c; i <= 0x00000658; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00028202);
-	for (i = 0x0000069c; i <= 0x000006d8; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x0000aae4);
-	for (i = 0x000006dc; i <= 0x00000718; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x01012000);
-	for (i = 0x0000071c; i <= 0x00000758; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00080008);
-	for (i = 0x0000079c; i <= 0x000007d8; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00100008);
-	for (i = 0x0000082c; i <= 0x00000838; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x0001bc80);
-	for (i = 0x0000083c; i <= 0x00000848; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000202);
-	for (i = 0x0000085c; i <= 0x00000868; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000008);
-	for (i = 0x0000087c; i <= 0x00000888; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00080008);
-	nv_wo32(dev, ctx, 0x0000089c/4, 0x00000002);
-	nv_wo32(dev, ctx, 0x000008d0/4, 0x00000021);
-	nv_wo32(dev, ctx, 0x000008d4/4, 0x030c30c3);
-	nv_wo32(dev, ctx, 0x000008e0/4, 0x3e020200);
-	nv_wo32(dev, ctx, 0x000008e4/4, 0x00ffffff);
-	nv_wo32(dev, ctx, 0x000008e8/4, 0x20103f00);
-	nv_wo32(dev, ctx, 0x000008f4/4, 0x00020000);
-	nv_wo32(dev, ctx, 0x0000092c/4, 0x00008100);
-	nv_wo32(dev, ctx, 0x000009b8/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x000009fc/4, 0x00001001);
-	nv_wo32(dev, ctx, 0x00000a04/4, 0x00000003);
-	nv_wo32(dev, ctx, 0x00000a08/4, 0x00888001);
-	nv_wo32(dev, ctx, 0x00000aac/4, 0x00000005);
-	nv_wo32(dev, ctx, 0x00000ab8/4, 0x0000ffff);
-	for (i = 0x00000ad4; i <= 0x00000ae4; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00000ae8/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00000b20/4, 0x00000001);
-	for (i = 0x00002ee8; i <= 0x00002f60; i += 8)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x00005168; i <= 0x00007358; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x00007368; i <= 0x00007758; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x0000a068; i <= 0x0000c258; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x0000c268; i <= 0x0000c658; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x0000ef68; i <= 0x00011158; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x00011168; i <= 0x00011558; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x00013e68; i <= 0x00016058; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x00016068; i <= 0x00016458; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-};
-
-static void
-nv43_graph_context_init(struct drm_device *dev, struct nouveau_gpuobj *ctx)
-{
-	int i;
-
-	nv_wo32(dev, ctx, 0x00000/4, ctx->im_pramin->start);
-	nv_wo32(dev, ctx, 0x00024/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00028/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00030/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x0011c/4, 0x20010001);
-	nv_wo32(dev, ctx, 0x00120/4, 0x0f73ef00);
-	nv_wo32(dev, ctx, 0x00128/4, 0x02008821);
-	nv_wo32(dev, ctx, 0x00178/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x0017c/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00180/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00188/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00194/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x00198/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x0019c/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x001a0/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x001a4/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x001a8/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x001ac/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x001b0/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x001d0/4, 0x0b0b0b0c);
-	nv_wo32(dev, ctx, 0x00340/4, 0x00040000);
-	nv_wo32(dev, ctx, 0x00350/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00354/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00358/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x0035c/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00388/4, 0x00000008);
-	nv_wo32(dev, ctx, 0x0039c/4, 0x00001010);
-	nv_wo32(dev, ctx, 0x003cc/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x003d0/4, 0x00080060);
-	nv_wo32(dev, ctx, 0x003ec/4, 0x00000080);
-	nv_wo32(dev, ctx, 0x003f0/4, 0xffff0000);
-	nv_wo32(dev, ctx, 0x003f4/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00408/4, 0x46400000);
-	nv_wo32(dev, ctx, 0x00418/4, 0xffff0000);
-	nv_wo32(dev, ctx, 0x00424/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x00428/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x00430/4, 0x00011100);
-	for (i = 0x0044c; i <= 0x00488; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x00494/4, 0x4b7fffff);
-	nv_wo32(dev, ctx, 0x004bc/4, 0x30201000);
-	nv_wo32(dev, ctx, 0x004c0/4, 0x70605040);
-	nv_wo32(dev, ctx, 0x004c4/4, 0xb8a89888);
-	nv_wo32(dev, ctx, 0x004c8/4, 0xf8e8d8c8);
-	nv_wo32(dev, ctx, 0x004dc/4, 0x40100000);
-	nv_wo32(dev, ctx, 0x004f8/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x0052c/4, 0x435185d6);
-	nv_wo32(dev, ctx, 0x00530/4, 0x2155b699);
-	nv_wo32(dev, ctx, 0x00534/4, 0xfedcba98);
-	nv_wo32(dev, ctx, 0x00538/4, 0x00000098);
-	nv_wo32(dev, ctx, 0x00548/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x0054c/4, 0x00ff7000);
-	nv_wo32(dev, ctx, 0x00550/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00560/4, 0x00ff0000);
-	nv_wo32(dev, ctx, 0x00598/4, 0x00ffff00);
-	for (i = 0x005dc; i <= 0x00618; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00018488);
-	for (i = 0x0061c; i <= 0x00658; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00028202);
-	for (i = 0x0069c; i <= 0x006d8; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x0000aae4);
-	for (i = 0x006dc; i <= 0x00718; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x01012000);
-	for (i = 0x0071c; i <= 0x00758; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00080008);
-	for (i = 0x0079c; i <= 0x007d8; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00100008);
-	for (i = 0x0082c; i <= 0x00838; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x0001bc80);
-	for (i = 0x0083c; i <= 0x00848; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000202);
-	for (i = 0x0085c; i <= 0x00868; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000008);
-	for (i = 0x0087c; i <= 0x00888; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00080008);
-	nv_wo32(dev, ctx, 0x0089c/4, 0x00000002);
-	nv_wo32(dev, ctx, 0x008d0/4, 0x00000021);
-	nv_wo32(dev, ctx, 0x008d4/4, 0x030c30c3);
-	nv_wo32(dev, ctx, 0x008e0/4, 0x3e020200);
-	nv_wo32(dev, ctx, 0x008e4/4, 0x00ffffff);
-	nv_wo32(dev, ctx, 0x008e8/4, 0x0c103f00);
-	nv_wo32(dev, ctx, 0x008f4/4, 0x00020000);
-	nv_wo32(dev, ctx, 0x0092c/4, 0x00008100);
-	nv_wo32(dev, ctx, 0x009b8/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x009fc/4, 0x00001001);
-	nv_wo32(dev, ctx, 0x00a04/4, 0x00000003);
-	nv_wo32(dev, ctx, 0x00a08/4, 0x00888001);
-	nv_wo32(dev, ctx, 0x00a8c/4, 0x00000005);
-	nv_wo32(dev, ctx, 0x00a98/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00ab4/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00ab8/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00abc/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00ac0/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00af8/4, 0x00000001);
-	for (i = 0x02ec0; i <= 0x02f38; i += 8)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x04c80; i <= 0x06e70; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x06e80; i <= 0x07270; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x096c0; i <= 0x0b8b0; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x0b8c0; i <= 0x0bcb0; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x0e100; i <= 0x102f0; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x10300; i <= 0x106f0; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-};
-
-static void
-nv46_graph_context_init(struct drm_device *dev, struct nouveau_gpuobj *ctx)
-{
-	int i;
-
-	nv_wo32(dev, ctx, 0x00000/4, ctx->im_pramin->start);
-	nv_wo32(dev, ctx, 0x00040/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00044/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x0004c/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00138/4, 0x20010001);
-	nv_wo32(dev, ctx, 0x0013c/4, 0x0f73ef00);
-	nv_wo32(dev, ctx, 0x00144/4, 0x02008821);
-	nv_wo32(dev, ctx, 0x00174/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00178/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x0017c/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00180/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00184/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00188/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x0018c/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00190/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00194/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00198/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x0019c/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x001a4/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x001ec/4, 0x0b0b0b0c);
-	nv_wo32(dev, ctx, 0x0035c/4, 0x00040000);
-	nv_wo32(dev, ctx, 0x0036c/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00370/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00374/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00378/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x003a4/4, 0x00000008);
-	nv_wo32(dev, ctx, 0x003b8/4, 0x00003010);
-	nv_wo32(dev, ctx, 0x003dc/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x003e0/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x003e4/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x003e8/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x003ec/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x003f0/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x003f4/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x003f8/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x003fc/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00400/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00404/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00408/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x0040c/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00410/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00414/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00418/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x004b0/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x004b4/4, 0x00080060);
-	nv_wo32(dev, ctx, 0x004d0/4, 0x00000080);
-	nv_wo32(dev, ctx, 0x004d4/4, 0xffff0000);
-	nv_wo32(dev, ctx, 0x004d8/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x004ec/4, 0x46400000);
-	nv_wo32(dev, ctx, 0x004fc/4, 0xffff0000);
-	nv_wo32(dev, ctx, 0x00500/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00504/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00508/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x0050c/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00510/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00514/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00518/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x0051c/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00520/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00524/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00528/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x0052c/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00530/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00534/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00538/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x0053c/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00550/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x00554/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x0055c/4, 0x00011100);
-	for (i = 0x00578; i < 0x005b4; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005c0/4, 0x4b7fffff);
-	nv_wo32(dev, ctx, 0x005e8/4, 0x30201000);
-	nv_wo32(dev, ctx, 0x005ec/4, 0x70605040);
-	nv_wo32(dev, ctx, 0x005f0/4, 0xb8a89888);
-	nv_wo32(dev, ctx, 0x005f4/4, 0xf8e8d8c8);
-	nv_wo32(dev, ctx, 0x00608/4, 0x40100000);
-	nv_wo32(dev, ctx, 0x00624/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00658/4, 0x435185d6);
-	nv_wo32(dev, ctx, 0x0065c/4, 0x2155b699);
-	nv_wo32(dev, ctx, 0x00660/4, 0xfedcba98);
-	nv_wo32(dev, ctx, 0x00664/4, 0x00000098);
-	nv_wo32(dev, ctx, 0x00674/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00678/4, 0x00ff7000);
-	nv_wo32(dev, ctx, 0x0067c/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x0068c/4, 0x00ff0000);
-	nv_wo32(dev, ctx, 0x006c8/4, 0x00ffff00);
-	for (i = 0x0070c; i <= 0x00748; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00018488);
-	for (i = 0x0074c; i <= 0x00788; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00028202);
-	for (i = 0x007cc; i <= 0x00808; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x0000aae4);
-	for (i = 0x0080c; i <= 0x00848; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x01012000);
-	for (i = 0x0084c; i <= 0x00888; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00080008);
-	for (i = 0x008cc; i <= 0x00908; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00100008);
-	for (i = 0x0095c; i <= 0x00968; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x0001bc80);
-	for (i = 0x0096c; i <= 0x00978; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000202);
-	for (i = 0x0098c; i <= 0x00998; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000008);
-	for (i = 0x009ac; i <= 0x009b8; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00080008);
-	nv_wo32(dev, ctx, 0x009cc/4, 0x00000002);
-	nv_wo32(dev, ctx, 0x00a00/4, 0x00000421);
-	nv_wo32(dev, ctx, 0x00a04/4, 0x030c30c3);
-	nv_wo32(dev, ctx, 0x00a08/4, 0x00011001);
-	nv_wo32(dev, ctx, 0x00a14/4, 0x3e020200);
-	nv_wo32(dev, ctx, 0x00a18/4, 0x00ffffff);
-	nv_wo32(dev, ctx, 0x00a1c/4, 0x0c103f00);
-	nv_wo32(dev, ctx, 0x00a28/4, 0x00040000);
-	nv_wo32(dev, ctx, 0x00a60/4, 0x00008100);
-	nv_wo32(dev, ctx, 0x00aec/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00b30/4, 0x00001001);
-	nv_wo32(dev, ctx, 0x00b38/4, 0x00000003);
-	nv_wo32(dev, ctx, 0x00b3c/4, 0x00888001);
-	nv_wo32(dev, ctx, 0x00bc0/4, 0x00000005);
-	nv_wo32(dev, ctx, 0x00bcc/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00be8/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00bec/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00bf0/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00bf4/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00c2c/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00c30/4, 0x08e00001);
-	nv_wo32(dev, ctx, 0x00c34/4, 0x000e3000);
-	for (i = 0x017f8; i <= 0x01870; i += 8)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x035b8; i <= 0x057a8; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x057b8; i <= 0x05ba8; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x07f38; i <= 0x0a128; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x0a138; i <= 0x0a528; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x0c8b8; i <= 0x0eaa8; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x0eab8; i <= 0x0eea8; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-}
-
-/* This may only work on 7800 AGP cards, will include a warning */
-static void
-nv47_graph_context_init(struct drm_device *dev, struct nouveau_gpuobj *ctx)
-{
-	int i;
-
-	nv_wo32(dev, ctx, 0x00000000/4, ctx->im_pramin->start);
-	nv_wo32(dev, ctx, 0x00000024/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00000028/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00000030/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x0000011c/4, 0x20010001);
-	nv_wo32(dev, ctx, 0x00000120/4, 0x0f73ef00);
-	nv_wo32(dev, ctx, 0x00000128/4, 0x02008821);
-	nv_wo32(dev, ctx, 0x00000178/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x0000017c/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00000180/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00000188/4, 0x00000040);
-	for (i = 0x00000194; i <= 0x000001b0; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x000001d0/4, 0x0b0b0b0c);
-	nv_wo32(dev, ctx, 0x00000340/4, 0x00040000);
-	nv_wo32(dev, ctx, 0x00000350/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00000354/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00000358/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x0000035c/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00000388/4, 0x00000008);
-	nv_wo32(dev, ctx, 0x0000039c/4, 0x00001010);
-	for (i = 0x000003c0; i <= 0x000003fc; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00000454/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00000458/4, 0x00080060);
-	nv_wo32(dev, ctx, 0x00000474/4, 0x00000080);
-	nv_wo32(dev, ctx, 0x00000478/4, 0xffff0000);
-	nv_wo32(dev, ctx, 0x0000047c/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00000490/4, 0x46400000);
-	nv_wo32(dev, ctx, 0x000004a0/4, 0xffff0000);
-	for (i = 0x000004a4; i <= 0x000004e0; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x000004f4/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x000004f8/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x00000500/4, 0x00011100);
-	for (i = 0x0000051c; i <= 0x00000558; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x00000564/4, 0x4b7fffff);
-	nv_wo32(dev, ctx, 0x0000058c/4, 0x30201000);
-	nv_wo32(dev, ctx, 0x00000590/4, 0x70605040);
-	nv_wo32(dev, ctx, 0x00000594/4, 0xb8a89888);
-	nv_wo32(dev, ctx, 0x00000598/4, 0xf8e8d8c8);
-	nv_wo32(dev, ctx, 0x000005ac/4, 0x40100000);
-	nv_wo32(dev, ctx, 0x000005c8/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x000005fc/4, 0x435185d6);
-	nv_wo32(dev, ctx, 0x00000600/4, 0x2155b699);
-	nv_wo32(dev, ctx, 0x00000604/4, 0xfedcba98);
-	nv_wo32(dev, ctx, 0x00000608/4, 0x00000098);
-	nv_wo32(dev, ctx, 0x00000618/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x0000061c/4, 0x00ff7000);
-	nv_wo32(dev, ctx, 0x00000620/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00000630/4, 0x00ff0000);
-	nv_wo32(dev, ctx, 0x0000066c/4, 0x00ffff00);
-	for (i = 0x000006b0; i <= 0x000006ec; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00018488);
-	for (i = 0x000006f0; i <= 0x0000072c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00028202);
-	for (i = 0x00000770; i <= 0x000007ac; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x0000aae4);
-	for (i = 0x000007b0; i <= 0x000007ec; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x01012000);
-	for (i = 0x000007f0; i <= 0x0000082c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00080008);
-	for (i = 0x00000870; i <= 0x000008ac; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00100008);
-	nv_wo32(dev, ctx, 0x00000900/4, 0x0001bc80);
-	nv_wo32(dev, ctx, 0x00000904/4, 0x0001bc80);
-	nv_wo32(dev, ctx, 0x00000908/4, 0x0001bc80);
-	nv_wo32(dev, ctx, 0x0000090c/4, 0x0001bc80);
-	nv_wo32(dev, ctx, 0x00000910/4, 0x00000202);
-	nv_wo32(dev, ctx, 0x00000914/4, 0x00000202);
-	nv_wo32(dev, ctx, 0x00000918/4, 0x00000202);
-	nv_wo32(dev, ctx, 0x0000091c/4, 0x00000202);
-	for (i = 0x00000930; i <= 0x0000095c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000008);
-	nv_wo32(dev, ctx, 0x00000970/4, 0x00000002);
-	nv_wo32(dev, ctx, 0x000009a4/4, 0x00000021);
-	nv_wo32(dev, ctx, 0x000009a8/4, 0x030c30c3);
-	nv_wo32(dev, ctx, 0x000009b4/4, 0x3e020200);
-	nv_wo32(dev, ctx, 0x000009b8/4, 0x00ffffff);
-	nv_wo32(dev, ctx, 0x000009bc/4, 0x40103f00);
-	nv_wo32(dev, ctx, 0x000009c8/4, 0x00040000);
-	nv_wo32(dev, ctx, 0x00000a00/4, 0x00008100);
-	nv_wo32(dev, ctx, 0x00000a8c/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00000ad0/4, 0x00001001);
-	nv_wo32(dev, ctx, 0x00000adc/4, 0x00000003);
-	nv_wo32(dev, ctx, 0x00000ae0/4, 0x00888001);
-	for (i = 0x00000b10; i <= 0x00000b8c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00000bb4/4, 0x00000005);
-	nv_wo32(dev, ctx, 0x00000bc0/4, 0x0000ffff);
-	for (i = 0x00000bdc; i <= 0x00000bf8; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00000bfc/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00000c34/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00000c38/4, 0x08e00001);
-	nv_wo32(dev, ctx, 0x00000c3c/4, 0x000e3000);
-	for (i = 0x00003000; i <= 0x00003078; i += 8)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x00004dc0; i <= 0x00006fb0; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x00006fc0; i <= 0x000073b0; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x00009800; i <= 0x0000b9f0; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x0000ba00; i <= 0x00010430; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x00010440; i <= 0x00010830; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x00012c80; i <= 0x00014e70; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x00014e80; i <= 0x00015270; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x000176c0; i <= 0x000198b0; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x000198c0; i <= 0x00019cb0; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x0001c100; i <= 0x0001e2f0; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x0001e300; i <= 0x0001e6f0; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-}
-
-static void
-nv49_graph_context_init(struct drm_device *dev, struct nouveau_gpuobj *ctx)
-{
-	int i;
-
-	nv_wo32(dev, ctx, 0x00000/4, ctx->im_pramin->start);
-	nv_wo32(dev, ctx, 0x00004/4, 0x0000c040);
-	nv_wo32(dev, ctx, 0x00008/4, 0x0000c040);
-	nv_wo32(dev, ctx, 0x0000c/4, 0x0000c040);
-	nv_wo32(dev, ctx, 0x00010/4, 0x0000c040);
-	nv_wo32(dev, ctx, 0x00014/4, 0x0000c040);
-	nv_wo32(dev, ctx, 0x00018/4, 0x0000c040);
-	nv_wo32(dev, ctx, 0x0001c/4, 0x0000c040);
-	nv_wo32(dev, ctx, 0x00020/4, 0x0000c040);
-	nv_wo32(dev, ctx, 0x000c4/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x000c8/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x000d0/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x001bc/4, 0x20010001);
-	nv_wo32(dev, ctx, 0x001c0/4, 0x0f73ef00);
-	nv_wo32(dev, ctx, 0x001c8/4, 0x02008821);
-	nv_wo32(dev, ctx, 0x00218/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x0021c/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00220/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00228/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00234/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x00238/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x0023c/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x00240/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x00244/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x00248/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x0024c/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x00250/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x00270/4, 0x0b0b0b0c);
-	nv_wo32(dev, ctx, 0x003e0/4, 0x00040000);
-	nv_wo32(dev, ctx, 0x003f0/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x003f4/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x003f8/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x003fc/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00428/4, 0x00000008);
-	nv_wo32(dev, ctx, 0x0043c/4, 0x00001010);
-	nv_wo32(dev, ctx, 0x00460/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00464/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00468/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x0046c/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00470/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00474/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00478/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x0047c/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00480/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00484/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00488/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x0048c/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00490/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00494/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00498/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x0049c/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x004f4/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x004f8/4, 0x00080060);
-	nv_wo32(dev, ctx, 0x00514/4, 0x00000080);
-	nv_wo32(dev, ctx, 0x00518/4, 0xffff0000);
-	nv_wo32(dev, ctx, 0x0051c/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00530/4, 0x46400000);
-	nv_wo32(dev, ctx, 0x00540/4, 0xffff0000);
-	nv_wo32(dev, ctx, 0x00544/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00548/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x0054c/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00550/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00554/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00558/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x0055c/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00560/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00564/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00568/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x0056c/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00570/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00574/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00578/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x0057c/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00580/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00594/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x00598/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x005a0/4, 0x00011100);
-	nv_wo32(dev, ctx, 0x005bc/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005c0/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005c4/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005c8/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005cc/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005d0/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005d4/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005d8/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005dc/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005e0/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005e4/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005e8/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005ec/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005f0/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005f4/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005f8/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x00604/4, 0x4b7fffff);
-	nv_wo32(dev, ctx, 0x0062c/4, 0x30201000);
-	nv_wo32(dev, ctx, 0x00630/4, 0x70605040);
-	nv_wo32(dev, ctx, 0x00634/4, 0xb8a89888);
-	nv_wo32(dev, ctx, 0x00638/4, 0xf8e8d8c8);
-	nv_wo32(dev, ctx, 0x0064c/4, 0x40100000);
-	nv_wo32(dev, ctx, 0x00668/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x0069c/4, 0x435185d6);
-	nv_wo32(dev, ctx, 0x006a0/4, 0x2155b699);
-	nv_wo32(dev, ctx, 0x006a4/4, 0xfedcba98);
-	nv_wo32(dev, ctx, 0x006a8/4, 0x00000098);
-	nv_wo32(dev, ctx, 0x006b8/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x006bc/4, 0x00ff7000);
-	nv_wo32(dev, ctx, 0x006c0/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x006d0/4, 0x00ff0000);
-	nv_wo32(dev, ctx, 0x0070c/4, 0x00ffff00);
-	for (i = 0x00750; i <= 0x0078c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00018488);
-	for (i = 0x00790; i <= 0x007cc; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00028202);
-	for (i = 0x00810; i <= 0x0084c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x0000aae4);
-	for (i = 0x00850; i <= 0x0088c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x01012000);
-	for (i = 0x00890; i <= 0x008cc; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00080008);
-	for (i = 0x00910; i <= 0x0094c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00100008);
-	for (i = 0x009a0; i <= 0x009ac; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x0001bc80);
-	for (i = 0x009b0; i <= 0x009bc; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000202);
-	for (i = 0x009d0; i <= 0x009dc; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000008);
-	for (i = 0x009f0; i <= 0x009fc; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00080008);
-	nv_wo32(dev, ctx, 0x00a10/4, 0x00000002);
-	nv_wo32(dev, ctx, 0x00a44/4, 0x00000421);
-	nv_wo32(dev, ctx, 0x00a48/4, 0x030c30c3);
-	nv_wo32(dev, ctx, 0x00a54/4, 0x3e020200);
-	nv_wo32(dev, ctx, 0x00a58/4, 0x00ffffff);
-	nv_wo32(dev, ctx, 0x00a5c/4, 0x20103f00);
-	nv_wo32(dev, ctx, 0x00a68/4, 0x00040000);
-	nv_wo32(dev, ctx, 0x00aa0/4, 0x00008100);
-	nv_wo32(dev, ctx, 0x00b2c/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00b70/4, 0x00001001);
-	nv_wo32(dev, ctx, 0x00b7c/4, 0x00000003);
-	nv_wo32(dev, ctx, 0x00b80/4, 0x00888001);
-	nv_wo32(dev, ctx, 0x00bb0/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bb4/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bb8/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bbc/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bc0/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bc4/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bc8/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bcc/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bd0/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bd4/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bd8/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bdc/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00be0/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00be4/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00be8/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bec/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bf0/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bf4/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bf8/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bfc/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c00/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c04/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c08/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c0c/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c10/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c14/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c18/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c1c/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c20/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c24/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c28/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c2c/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c54/4, 0x00000005);
-	nv_wo32(dev, ctx, 0x00c60/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00c7c/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c80/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c84/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c88/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c8c/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c90/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c94/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c98/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c9c/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00cd4/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00cd8/4, 0x08e00001);
-	nv_wo32(dev, ctx, 0x00cdc/4, 0x000e3000);
-	for (i = 0x030a0; i <= 0x03118; i += 8)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x098a0; i <= 0x0ba90; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x0baa0; i <= 0x0be90; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x0e2e0; i <= 0x0fff0; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x10008; i <= 0x104d0; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x104e0; i <= 0x108d0; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x12d20; i <= 0x14f10; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x14f20; i <= 0x15310; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x17760; i <= 0x19950; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x19960; i <= 0x19d50; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x1c1a0; i <= 0x1e390; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x1e3a0; i <= 0x1e790; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x20be0; i <= 0x22dd0; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x22de0; i <= 0x231d0; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-}
-
-static void
-nv4a_graph_context_init(struct drm_device *dev, struct nouveau_gpuobj *ctx)
-{
-	int i;
-
-	nv_wo32(dev, ctx, 0x00000/4, ctx->im_pramin->start);
-	nv_wo32(dev, ctx, 0x00024/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00028/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00030/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x0011c/4, 0x20010001);
-	nv_wo32(dev, ctx, 0x00120/4, 0x0f73ef00);
-	nv_wo32(dev, ctx, 0x00128/4, 0x02008821);
-	nv_wo32(dev, ctx, 0x00158/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x0015c/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00160/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00164/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00168/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x0016c/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00170/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00174/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00178/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x0017c/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00180/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00188/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x001d0/4, 0x0b0b0b0c);
-	nv_wo32(dev, ctx, 0x00340/4, 0x00040000);
-	nv_wo32(dev, ctx, 0x00350/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00354/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00358/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x0035c/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00388/4, 0x00000008);
-	nv_wo32(dev, ctx, 0x0039c/4, 0x00003010);
-	nv_wo32(dev, ctx, 0x003cc/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x003d0/4, 0x00080060);
-	nv_wo32(dev, ctx, 0x003ec/4, 0x00000080);
-	nv_wo32(dev, ctx, 0x003f0/4, 0xffff0000);
-	nv_wo32(dev, ctx, 0x003f4/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00408/4, 0x46400000);
-	nv_wo32(dev, ctx, 0x00418/4, 0xffff0000);
-	nv_wo32(dev, ctx, 0x00424/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x00428/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x00430/4, 0x00011100);
-	for (i = 0x0044c; i <= 0x00488; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x00494/4, 0x4b7fffff);
-	nv_wo32(dev, ctx, 0x004bc/4, 0x30201000);
-	nv_wo32(dev, ctx, 0x004c0/4, 0x70605040);
-	nv_wo32(dev, ctx, 0x004c4/4, 0xb8a89888);
-	nv_wo32(dev, ctx, 0x004c8/4, 0xf8e8d8c8);
-	nv_wo32(dev, ctx, 0x004dc/4, 0x40100000);
-	nv_wo32(dev, ctx, 0x004f8/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x0052c/4, 0x435185d6);
-	nv_wo32(dev, ctx, 0x00530/4, 0x2155b699);
-	nv_wo32(dev, ctx, 0x00534/4, 0xfedcba98);
-	nv_wo32(dev, ctx, 0x00538/4, 0x00000098);
-	nv_wo32(dev, ctx, 0x00548/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x0054c/4, 0x00ff7000);
-	nv_wo32(dev, ctx, 0x00550/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x0055c/4, 0x00ff0000);
-	nv_wo32(dev, ctx, 0x00594/4, 0x00ffff00);
-	for (i = 0x005d8; i <= 0x00614; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00018488);
-	for (i = 0x00618; i <= 0x00654; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00028202);
-	for (i = 0x00698; i <= 0x006d4; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x0000aae4);
-	for (i = 0x006d8; i <= 0x00714; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x01012000);
-	for (i = 0x00718; i <= 0x00754; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00080008);
-	for (i = 0x00798; i <= 0x007d4; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00100008);
-	for (i = 0x00828; i <= 0x00834; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x0001bc80);
-	for (i = 0x00838; i <= 0x00844; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000202);
-	for (i = 0x00858; i <= 0x00864; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000008);
-	for (i = 0x00878; i <= 0x00884; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00080008);
-	nv_wo32(dev, ctx, 0x00898/4, 0x00000002);
-	nv_wo32(dev, ctx, 0x008cc/4, 0x00000021);
-	nv_wo32(dev, ctx, 0x008d0/4, 0x030c30c3);
-	nv_wo32(dev, ctx, 0x008d4/4, 0x00011001);
-	nv_wo32(dev, ctx, 0x008e0/4, 0x3e020200);
-	nv_wo32(dev, ctx, 0x008e4/4, 0x00ffffff);
-	nv_wo32(dev, ctx, 0x008e8/4, 0x0c103f00);
-	nv_wo32(dev, ctx, 0x008f4/4, 0x00040000);
-	nv_wo32(dev, ctx, 0x0092c/4, 0x00008100);
-	nv_wo32(dev, ctx, 0x009b8/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x009fc/4, 0x00001001);
-	nv_wo32(dev, ctx, 0x00a04/4, 0x00000003);
-	nv_wo32(dev, ctx, 0x00a08/4, 0x00888001);
-	nv_wo32(dev, ctx, 0x00a8c/4, 0x00000005);
-	nv_wo32(dev, ctx, 0x00a98/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00ab4/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00ab8/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00abc/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00ac0/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00af8/4, 0x00000001);
-	for (i = 0x016c0; i <= 0x01738; i += 8)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x03840; i <= 0x05670; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x05680; i <= 0x05a70; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x07e00; i <= 0x09ff0; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x0a000; i <= 0x0a3f0; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x0c780; i <= 0x0e970; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x0e980; i <= 0x0ed70; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-}
-
-static void
-nv4b_graph_context_init(struct drm_device *dev, struct nouveau_gpuobj *ctx)
-{
-	int i;
-
-	nv_wo32(dev, ctx, 0x00000/4, ctx->im_pramin->start);
-	nv_wo32(dev, ctx, 0x00004/4, 0x0000c040);
-	nv_wo32(dev, ctx, 0x00008/4, 0x0000c040);
-	nv_wo32(dev, ctx, 0x0000c/4, 0x0000c040);
-	nv_wo32(dev, ctx, 0x00010/4, 0x0000c040);
-	nv_wo32(dev, ctx, 0x00014/4, 0x0000c040);
-	nv_wo32(dev, ctx, 0x00018/4, 0x0000c040);
-	nv_wo32(dev, ctx, 0x0001c/4, 0x0000c040);
-	nv_wo32(dev, ctx, 0x00020/4, 0x0000c040);
-	nv_wo32(dev, ctx, 0x000c4/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x000c8/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x000d0/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x001bc/4, 0x20010001);
-	nv_wo32(dev, ctx, 0x001c0/4, 0x0f73ef00);
-	nv_wo32(dev, ctx, 0x001c8/4, 0x02008821);
-	nv_wo32(dev, ctx, 0x00218/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x0021c/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00220/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00228/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00234/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x00238/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x0023c/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x00240/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x00244/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x00248/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x0024c/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x00250/4, 0x80000000);
-	nv_wo32(dev, ctx, 0x00270/4, 0x0b0b0b0c);
-	nv_wo32(dev, ctx, 0x003e0/4, 0x00040000);
-	nv_wo32(dev, ctx, 0x003f0/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x003f4/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x003f8/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x003fc/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00428/4, 0x00000008);
-	nv_wo32(dev, ctx, 0x0043c/4, 0x00001010);
-	nv_wo32(dev, ctx, 0x00460/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00464/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00468/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x0046c/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00470/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00474/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00478/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x0047c/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00480/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00484/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00488/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x0048c/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00490/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00494/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x00498/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x0049c/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x004f4/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x004f8/4, 0x00080060);
-	nv_wo32(dev, ctx, 0x00514/4, 0x00000080);
-	nv_wo32(dev, ctx, 0x00518/4, 0xffff0000);
-	nv_wo32(dev, ctx, 0x0051c/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00530/4, 0x46400000);
-	nv_wo32(dev, ctx, 0x00540/4, 0xffff0000);
-	nv_wo32(dev, ctx, 0x00544/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00548/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x0054c/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00550/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00554/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00558/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x0055c/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00560/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00564/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00568/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x0056c/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00570/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00574/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00578/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x0057c/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00580/4, 0x88888888);
-	nv_wo32(dev, ctx, 0x00594/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x00598/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x005a0/4, 0x00011100);
-	nv_wo32(dev, ctx, 0x005bc/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005c0/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005c4/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005c8/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005cc/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005d0/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005d4/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005d8/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005dc/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005e0/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005e4/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005e8/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005ec/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005f0/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005f4/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x005f8/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x00604/4, 0x4b7fffff);
-	nv_wo32(dev, ctx, 0x0062c/4, 0x30201000);
-	nv_wo32(dev, ctx, 0x00630/4, 0x70605040);
-	nv_wo32(dev, ctx, 0x00634/4, 0xb8a89888);
-	nv_wo32(dev, ctx, 0x00638/4, 0xf8e8d8c8);
-	nv_wo32(dev, ctx, 0x0064c/4, 0x40100000);
-	nv_wo32(dev, ctx, 0x00668/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x0069c/4, 0x435185d6);
-	nv_wo32(dev, ctx, 0x006a0/4, 0x2155b699);
-	nv_wo32(dev, ctx, 0x006a4/4, 0xfedcba98);
-	nv_wo32(dev, ctx, 0x006a8/4, 0x00000098);
-	nv_wo32(dev, ctx, 0x006b8/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x006bc/4, 0x00ff7000);
-	nv_wo32(dev, ctx, 0x006c0/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x006d0/4, 0x00ff0000);
-	nv_wo32(dev, ctx, 0x0070c/4, 0x00ffff00);
-	for (i = 0x00750; i <= 0x0078c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00018488);
-	for (i = 0x00790; i <= 0x007cc; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00028202);
-	for (i = 0x00810; i <= 0x0084c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x0000aae4);
-	for (i = 0x00850; i <= 0x0088c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x01012000);
-	for (i = 0x00890; i <= 0x008cc; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00080008);
-	for (i = 0x00910; i <= 0x0094c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00100008);
-	for (i = 0x009a0; i <= 0x009ac; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x0001bc80);
-	for (i = 0x009b0; i <= 0x009bc; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000202);
-	for (i = 0x009d0; i <= 0x009dc; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000008);
-	for (i = 0x009f0; i <= 0x009fc; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00080008);
-	nv_wo32(dev, ctx, 0x00a10/4, 0x00000002);
-	nv_wo32(dev, ctx, 0x00a44/4, 0x00000421);
-	nv_wo32(dev, ctx, 0x00a48/4, 0x030c30c3);
-	nv_wo32(dev, ctx, 0x00a54/4, 0x3e020200);
-	nv_wo32(dev, ctx, 0x00a58/4, 0x00ffffff);
-	nv_wo32(dev, ctx, 0x00a5c/4, 0x20103f00);
-	nv_wo32(dev, ctx, 0x00a68/4, 0x00040000);
-	nv_wo32(dev, ctx, 0x00aa0/4, 0x00008100);
-	nv_wo32(dev, ctx, 0x00b2c/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00b70/4, 0x00001001);
-	nv_wo32(dev, ctx, 0x00b7c/4, 0x00000003);
-	nv_wo32(dev, ctx, 0x00b80/4, 0x00888001);
-	nv_wo32(dev, ctx, 0x00bb0/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bb4/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bb8/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bbc/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bc0/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bc4/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bc8/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bcc/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bd0/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bd4/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bd8/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bdc/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00be0/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00be4/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00be8/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bec/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bf0/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bf4/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bf8/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00bfc/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c00/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c04/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c08/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c0c/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c10/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c14/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c18/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c1c/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c20/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c24/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c28/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c2c/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00c54/4, 0x00000005);
-	nv_wo32(dev, ctx, 0x00c60/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00c7c/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c80/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c84/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c88/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c8c/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c90/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c94/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c98/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00c9c/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00cd4/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00cd8/4, 0x08e00001);
-	nv_wo32(dev, ctx, 0x00cdc/4, 0x000e3000);
-	for (i = 0x030a0; i <= 0x03118; i += 8)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x098a0; i <= 0x0ba90; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x0baa0; i <= 0x0be90; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x0e2e0; i <= 0x0fff0; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x10008; i <= 0x104d0; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x104e0; i <= 0x108d0; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x12d20; i <= 0x14f10; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x14f20; i <= 0x15310; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x17760; i <= 0x19950; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x19960; i <= 0x19d50; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-}
-
-static void
-nv4c_graph_context_init(struct drm_device *dev, struct nouveau_gpuobj *ctx)
-{
-	int i;
-
-	nv_wo32(dev, ctx, 0x00000/4, ctx->im_pramin->start);
-	nv_wo32(dev, ctx, 0x00024/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00028/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00030/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x0011c/4, 0x20010001);
-	nv_wo32(dev, ctx, 0x00120/4, 0x0f73ef00);
-	nv_wo32(dev, ctx, 0x00128/4, 0x02008821);
-	nv_wo32(dev, ctx, 0x00158/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x0015c/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00160/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00164/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00168/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x0016c/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00170/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00174/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00178/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x0017c/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00180/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00188/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x001d0/4, 0x0b0b0b0c);
-	nv_wo32(dev, ctx, 0x00340/4, 0x00040000);
-	nv_wo32(dev, ctx, 0x00350/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00354/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00358/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x0035c/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00388/4, 0x00000008);
-	nv_wo32(dev, ctx, 0x0039c/4, 0x00001010);
-	nv_wo32(dev, ctx, 0x003d0/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x003d4/4, 0x00080060);
-	nv_wo32(dev, ctx, 0x003f0/4, 0x00000080);
-	nv_wo32(dev, ctx, 0x003f4/4, 0xffff0000);
-	nv_wo32(dev, ctx, 0x003f8/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x0040c/4, 0x46400000);
-	nv_wo32(dev, ctx, 0x0041c/4, 0xffff0000);
-	nv_wo32(dev, ctx, 0x00428/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x0042c/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x00434/4, 0x00011100);
-	for (i = 0x00450; i < 0x0048c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x00498/4, 0x4b7fffff);
-	nv_wo32(dev, ctx, 0x004c0/4, 0x30201000);
-	nv_wo32(dev, ctx, 0x004c4/4, 0x70605040);
-	nv_wo32(dev, ctx, 0x004c8/4, 0xb8a89888);
-	nv_wo32(dev, ctx, 0x004cc/4, 0xf8e8d8c8);
-	nv_wo32(dev, ctx, 0x004e0/4, 0x40100000);
-	nv_wo32(dev, ctx, 0x004fc/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00530/4, 0x435185d6);
-	nv_wo32(dev, ctx, 0x00534/4, 0x2155b699);
-	nv_wo32(dev, ctx, 0x00538/4, 0xfedcba98);
-	nv_wo32(dev, ctx, 0x0053c/4, 0x00000098);
-	nv_wo32(dev, ctx, 0x0054c/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x00550/4, 0x00ff7000);
-	nv_wo32(dev, ctx, 0x00554/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00564/4, 0x00ff0000);
-	nv_wo32(dev, ctx, 0x0059c/4, 0x00ffff00);
-	for (i = 0x005e0; i <= 0x0061c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00018488);
-	for (i = 0x00620; i <= 0x0065c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00028202);
-	for (i = 0x006a0; i <= 0x006dc; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x0000aae4);
-	for (i = 0x006e0; i <= 0x0071c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x01012000);
-	for (i = 0x00720; i <= 0x0075c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00080008);
-	for (i = 0x007a0; i <= 0x007dc; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00100008);
-	for (i = 0x00830; i <= 0x0083c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x0001bc80);
-	for (i = 0x00840; i <= 0x0084c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000202);
-	for (i = 0x00860; i <= 0x0086c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000008);
-	for (i = 0x00880; i <= 0x0088c; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00080008);
-	nv_wo32(dev, ctx, 0x008a0/4, 0x00000002);
-	nv_wo32(dev, ctx, 0x008d4/4, 0x00000020);
-	nv_wo32(dev, ctx, 0x008d8/4, 0x030c30c3);
-	nv_wo32(dev, ctx, 0x008dc/4, 0x00011001);
-	nv_wo32(dev, ctx, 0x008e8/4, 0x3e020200);
-	nv_wo32(dev, ctx, 0x008ec/4, 0x00ffffff);
-	nv_wo32(dev, ctx, 0x008f0/4, 0x0c103f00);
-	nv_wo32(dev, ctx, 0x008fc/4, 0x00040000);
-	nv_wo32(dev, ctx, 0x00934/4, 0x00008100);
-	nv_wo32(dev, ctx, 0x009c0/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00a04/4, 0x00001001);
-	nv_wo32(dev, ctx, 0x00a0c/4, 0x00000003);
-	nv_wo32(dev, ctx, 0x00a10/4, 0x00888001);
-	nv_wo32(dev, ctx, 0x00a74/4, 0x00000005);
-	nv_wo32(dev, ctx, 0x00a80/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00a9c/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00aa0/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00ad8/4, 0x00000001);
-	for (i = 0x016a0; i < 0x01718; i += 8)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x03460; i < 0x05650; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x05660; i < 0x05a50; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-}
-
-static void
-nv4e_graph_context_init(struct drm_device *dev, struct nouveau_gpuobj *ctx)
-{
-	int i;
-
-	nv_wo32(dev, ctx, 0x00000/4, ctx->im_pramin->start);
-	nv_wo32(dev, ctx, 0x00024/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00028/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00030/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x0011c/4, 0x20010001);
-	nv_wo32(dev, ctx, 0x00120/4, 0x0f73ef00);
-	nv_wo32(dev, ctx, 0x00128/4, 0x02008821);
-	nv_wo32(dev, ctx, 0x00158/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x0015c/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00160/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00164/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00168/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x0016c/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00170/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00174/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00178/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x0017c/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00180/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x00188/4, 0x00000040);
-	nv_wo32(dev, ctx, 0x001d0/4, 0x0b0b0b0c);
-	nv_wo32(dev, ctx, 0x00340/4, 0x00040000);
-	nv_wo32(dev, ctx, 0x00350/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00354/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00358/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x0035c/4, 0x55555555);
-	nv_wo32(dev, ctx, 0x00388/4, 0x00000008);
-	nv_wo32(dev, ctx, 0x0039c/4, 0x00001010);
-	nv_wo32(dev, ctx, 0x003cc/4, 0x00000111);
-	nv_wo32(dev, ctx, 0x003d0/4, 0x00080060);
-	nv_wo32(dev, ctx, 0x003ec/4, 0x00000080);
-	nv_wo32(dev, ctx, 0x003f0/4, 0xffff0000);
-	nv_wo32(dev, ctx, 0x003f4/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00408/4, 0x46400000);
-	nv_wo32(dev, ctx, 0x00418/4, 0xffff0000);
-	nv_wo32(dev, ctx, 0x00424/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x00428/4, 0x0fff0000);
-	nv_wo32(dev, ctx, 0x00430/4, 0x00011100);
-	for (i = 0x0044c; i <= 0x00488; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x07ff0000);
-	nv_wo32(dev, ctx, 0x00494/4, 0x4b7fffff);
-	nv_wo32(dev, ctx, 0x004bc/4, 0x30201000);
-	nv_wo32(dev, ctx, 0x004c0/4, 0x70605040);
-	nv_wo32(dev, ctx, 0x004c4/4, 0xb8a89888);
-	nv_wo32(dev, ctx, 0x004c8/4, 0xf8e8d8c8);
-	nv_wo32(dev, ctx, 0x004dc/4, 0x40100000);
-	nv_wo32(dev, ctx, 0x004f8/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x0052c/4, 0x435185d6);
-	nv_wo32(dev, ctx, 0x00530/4, 0x2155b699);
-	nv_wo32(dev, ctx, 0x00534/4, 0xfedcba98);
-	nv_wo32(dev, ctx, 0x00538/4, 0x00000098);
-	nv_wo32(dev, ctx, 0x00548/4, 0xffffffff);
-	nv_wo32(dev, ctx, 0x0054c/4, 0x00ff7000);
-	nv_wo32(dev, ctx, 0x00550/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x0055c/4, 0x00ff0000);
-	nv_wo32(dev, ctx, 0x00594/4, 0x00ffff00);
-	for (i = 0x005d8; i <= 0x00614; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00018488);
-	for (i = 0x00618; i <= 0x00654; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00028202);
-	for (i = 0x00698; i <= 0x006d4; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x0000aae4);
-	for (i = 0x006d8; i <= 0x00714; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x01012000);
-	for (i = 0x00718; i <= 0x00754; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00080008);
-	for (i = 0x00798; i <= 0x007d4; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00100008);
-	for (i = 0x00828; i <= 0x00834; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x0001bc80);
-	for (i = 0x00838; i <= 0x00844; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000202);
-	for (i = 0x00858; i <= 0x00864; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00000008);
-	for (i = 0x00878; i <= 0x00884; i += 4)
-		nv_wo32(dev, ctx, i/4, 0x00080008);
-	nv_wo32(dev, ctx, 0x00898/4, 0x00000002);
-	nv_wo32(dev, ctx, 0x008cc/4, 0x00000020);
-	nv_wo32(dev, ctx, 0x008d0/4, 0x030c30c3);
-	nv_wo32(dev, ctx, 0x008d4/4, 0x00011001);
-	nv_wo32(dev, ctx, 0x008e0/4, 0x3e020200);
-	nv_wo32(dev, ctx, 0x008e4/4, 0x00ffffff);
-	nv_wo32(dev, ctx, 0x008e8/4, 0x0c103f00);
-	nv_wo32(dev, ctx, 0x008f4/4, 0x00040000);
-	nv_wo32(dev, ctx, 0x0092c/4, 0x00008100);
-	nv_wo32(dev, ctx, 0x009b8/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x009fc/4, 0x00001001);
-	nv_wo32(dev, ctx, 0x00a04/4, 0x00000003);
-	nv_wo32(dev, ctx, 0x00a08/4, 0x00888001);
-	nv_wo32(dev, ctx, 0x00a6c/4, 0x00000005);
-	nv_wo32(dev, ctx, 0x00a78/4, 0x0000ffff);
-	nv_wo32(dev, ctx, 0x00a94/4, 0x00005555);
-	nv_wo32(dev, ctx, 0x00a98/4, 0x00000001);
-	nv_wo32(dev, ctx, 0x00aa4/4, 0x00000001);
-	for (i = 0x01668; i <= 0x016e0; i += 8)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-	for (i = 0x03428; i <= 0x05618; i += 24)
-		nv_wo32(dev, ctx, i/4, 0x00000001);
-	for (i = 0x05628; i <= 0x05a18; i += 16)
-		nv_wo32(dev, ctx, i/4, 0x3f800000);
-}
+#include "nouveau_grctx.h"
 
 struct nouveau_channel *
 nv40_graph_channel(struct drm_device *dev)
@@ -1467,71 +57,30 @@ nv40_graph_create_context(struct nouveau_channel *chan)
 {
 	struct drm_device *dev = chan->dev;
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
-	void (*ctx_init)(struct drm_device *, struct nouveau_gpuobj *);
+	struct nouveau_pgraph_engine *pgraph = &dev_priv->engine.graph;
 	int ret;
 
-	/* These functions populate the graphics context with a whole heap
-	 * of default state.  All these functions are very similar, with
-	 * a minimal amount of chipset-specific changes.  However, as we're
-	 * currently dependant on the context programs used by the NVIDIA
-	 * binary driver these functions must match the layout expected by
-	 * them.  Hopefully at some point this will all change.
-	 */
-	switch (dev_priv->chipset) {
-	case 0x40:
-		ctx_init = nv40_graph_context_init;
-		break;
-	case 0x41:
-	case 0x42:
-		ctx_init = nv41_graph_context_init;
-		break;
-	case 0x43:
-		ctx_init = nv43_graph_context_init;
-		break;
-	case 0x46:
-		ctx_init = nv46_graph_context_init;
-		break;
-	case 0x47:
-		ctx_init = nv47_graph_context_init;
-		break;
-	case 0x49:
-		ctx_init = nv49_graph_context_init;
-		break;
-	case 0x44:
-	case 0x4a:
-		ctx_init = nv4a_graph_context_init;
-		break;
-	case 0x4b:
-		ctx_init = nv4b_graph_context_init;
-		break;
-	case 0x4c:
-	case 0x67:
-		ctx_init = nv4c_graph_context_init;
-		break;
-	case 0x4e:
-		ctx_init = nv4e_graph_context_init;
-		break;
-	default:
-		ctx_init = nv40_graph_context_init;
-		break;
-	}
-
-	/* Allocate a 175KiB block of PRAMIN to store the context.  This
-	 * is massive overkill for a lot of chipsets, but it should be safe
-	 * until we're able to implement this properly (will happen at more
-	 * or less the same time we're able to write our own context programs.
-	 */
-	ret = nouveau_gpuobj_new_ref(dev, chan, NULL, 0, 175*1024, 16,
-					  NVOBJ_FLAG_ZERO_ALLOC,
-					  &chan->ramin_grctx);
+	ret = nouveau_gpuobj_new_ref(dev, chan, NULL, 0, pgraph->grctx_size,
+				     16, NVOBJ_FLAG_ZERO_ALLOC,
+				     &chan->ramin_grctx);
 	if (ret)
 		return ret;
 
 	/* Initialise default context values */
 	dev_priv->engine.instmem.prepare_access(dev, true);
-	ctx_init(dev, chan->ramin_grctx->gpuobj);
-	dev_priv->engine.instmem.finish_access(dev);
+	if (!pgraph->ctxprog) {
+		struct nouveau_grctx ctx = {};
 
+		ctx.dev = chan->dev;
+		ctx.mode = NOUVEAU_GRCTX_VALS;
+		ctx.data = chan->ramin_grctx->gpuobj;
+		nv40_grctx_init(&ctx);
+	} else {
+		nouveau_grctx_vals_load(dev, chan->ramin_grctx->gpuobj);
+	}
+	nv_wo32(dev, chan->ramin_grctx->gpuobj, 0,
+		     chan->ramin_grctx->gpuobj->im_pramin->start);
+	dev_priv->engine.instmem.finish_access(dev);
 	return 0;
 }
 
@@ -1632,332 +181,47 @@ nv40_graph_unload_context(struct drm_device *dev)
 	return ret;
 }
 
-/* These blocks of "magic numbers" are actually a microcode that the GPU uses
- * to control how graphics contexts get saved and restored between PRAMIN
- * and PGRAPH during a context switch.  We're currently using values seen
- * in mmio-traces of the binary driver.
- */
-static uint32_t nv40_ctxprog[] = {
-	0x00400889, 0x00200000, 0x0060000a, 0x00200000, 0x00300000, 0x00800001,
-	0x00700009, 0x0060000e, 0x00400d64, 0x00400d05, 0x00408f65, 0x00409406,
-	0x0040a268, 0x00200000, 0x0060000a, 0x00700000, 0x00106000, 0x00700080,
-	0x004014e6, 0x007000a0, 0x00401a84, 0x00700082, 0x00600001, 0x00500061,
-	0x00600002, 0x00401b68, 0x00500060, 0x00200001, 0x0060000a, 0x0011814d,
-	0x00110158, 0x00105401, 0x0020003a, 0x00100051, 0x001040c5, 0x0010c1c4,
-	0x001041c9, 0x0010c1dc, 0x00110205, 0x0011420a, 0x00114210, 0x00110216,
-	0x0012421b, 0x00120270, 0x001242c0, 0x00200040, 0x00100280, 0x00128100,
-	0x00128120, 0x00128143, 0x0011415f, 0x0010815c, 0x0010c140, 0x00104029,
-	0x00110400, 0x00104d10, 0x00500060, 0x00403b87, 0x0060000d, 0x004076e6,
-	0x002000f0, 0x0060000a, 0x00200045, 0x00100620, 0x00108668, 0x0011466b,
-	0x00120682, 0x0011068b, 0x00168691, 0x0010c6ae, 0x001206b4, 0x0020002a,
-	0x001006c4, 0x001246f0, 0x002000c0, 0x00100700, 0x0010c3d7, 0x001043e1,
-	0x00500060, 0x00405600, 0x00405684, 0x00600003, 0x00500067, 0x00600008,
-	0x00500060, 0x00700082, 0x0020026c, 0x0060000a, 0x00104800, 0x00104901,
-	0x00120920, 0x00200035, 0x00100940, 0x00148a00, 0x00104a14, 0x00200038,
-	0x00100b00, 0x00138d00, 0x00104e00, 0x0012d600, 0x00105c00, 0x00104f06,
-	0x0020031a, 0x0060000a, 0x00300000, 0x00200680, 0x00406c00, 0x00200684,
-	0x00800001, 0x00200b62, 0x0060000a, 0x0020a0b0, 0x0040728a, 0x00201b68,
-	0x00800041, 0x00407684, 0x00203e60, 0x00800002, 0x00408700, 0x00600006,
-	0x00700003, 0x004080e6, 0x00700080, 0x0020031a, 0x0060000a, 0x00200004,
-	0x00800001, 0x00700000, 0x00200000, 0x0060000a, 0x00106002, 0x0040a284,
-	0x00700002, 0x00600004, 0x0040a268, 0x00700000, 0x00200000, 0x0060000a,
-	0x00106002, 0x00700080, 0x00400a84, 0x00700002, 0x00400a68, 0x00500060,
-	0x00600007, 0x00409388, 0x0060000f, 0x00000000, 0x00500060, 0x00200000,
-	0x0060000a, 0x00700000, 0x00106001, 0x00700083, 0x00910880, 0x00901ffe,
-	0x00940400, 0x00200020, 0x0060000b, 0x00500069, 0x0060000c, 0x00401b68,
-	0x0040a406, 0x0040a505, 0x00600009, 0x00700005, 0x00700006, 0x0060000e,
-	~0
-};
-
-static uint32_t nv41_ctxprog[] = {
-	0x00400889, 0x00200000, 0x0060000a, 0x00200000, 0x00300000, 0x00800001,
-	0x00700009, 0x0060000e, 0x00400d64, 0x00400d05, 0x00408f65, 0x00409306,
-	0x0040a068, 0x0040198f, 0x00200001, 0x0060000a, 0x00700080, 0x00104042,
-	0x00200001, 0x0060000a, 0x00700000, 0x001040c5, 0x00401826, 0x00401968,
-	0x0060000d, 0x00200000, 0x0060000a, 0x00700000, 0x00106000, 0x00700080,
-	0x004020e6, 0x007000a0, 0x00500060, 0x00200001, 0x0060000a, 0x0011814d,
-	0x00110158, 0x00105401, 0x0020003a, 0x00100051, 0x001040c5, 0x0010c1c4,
-	0x001041c9, 0x0010c1dc, 0x00150210, 0x0012c225, 0x00108238, 0x0010823e,
-	0x001242c0, 0x00200040, 0x00100280, 0x00128100, 0x00128120, 0x00128143,
-	0x0011415f, 0x0010815c, 0x0010c140, 0x00104029, 0x00110400, 0x00104d10,
-	0x001046ec, 0x00500060, 0x00404087, 0x0060000d, 0x004079e6, 0x002000f1,
-	0x0060000a, 0x00148653, 0x00104668, 0x0010c66d, 0x00120682, 0x0011068b,
-	0x00168691, 0x001046ae, 0x001046b0, 0x001206b4, 0x001046c4, 0x001146c6,
-	0x00200020, 0x001006cc, 0x001046ed, 0x001246f0, 0x002000c0, 0x00100700,
-	0x0010c3d7, 0x001043e1, 0x00500060, 0x00200233, 0x0060000a, 0x00104800,
-	0x00108901, 0x00124920, 0x0020001f, 0x00100940, 0x00140965, 0x00148a00,
-	0x00108a14, 0x00200020, 0x00100b00, 0x00134b2c, 0x0010cd00, 0x0010cd04,
-	0x00114d08, 0x00104d80, 0x00104e00, 0x0012d600, 0x00105c00, 0x00104f06,
-	0x002002d2, 0x0060000a, 0x00300000, 0x00200680, 0x00407200, 0x00200684,
-	0x00800001, 0x00200b1a, 0x0060000a, 0x00206380, 0x0040788a, 0x00201480,
-	0x00800041, 0x00408900, 0x00600006, 0x004085e6, 0x00700080, 0x0020007a,
-	0x0060000a, 0x00104280, 0x002002d2, 0x0060000a, 0x00200004, 0x00800001,
-	0x00700000, 0x00200000, 0x0060000a, 0x00106002, 0x0040a068, 0x00700000,
-	0x00200000, 0x0060000a, 0x00106002, 0x00700080, 0x00400a68, 0x00500060,
-	0x00600007, 0x00409388, 0x0060000f, 0x00500060, 0x00200000, 0x0060000a,
-	0x00700000, 0x00106001, 0x00910880, 0x00901ffe, 0x00940400, 0x00200020,
-	0x0060000b, 0x00500069, 0x0060000c, 0x00402168, 0x0040a206, 0x0040a305,
-	0x00600009, 0x00700005, 0x00700006, 0x0060000e, ~0
-};
-
-static uint32_t nv43_ctxprog[] = {
-	0x00400889, 0x00200000, 0x0060000a, 0x00200000, 0x00300000, 0x00800001,
-	0x00700009, 0x0060000e, 0x00400d64, 0x00400d05, 0x00409565, 0x00409a06,
-	0x0040a868, 0x00200000, 0x0060000a, 0x00700000, 0x00106000, 0x00700080,
-	0x004014e6, 0x007000a0, 0x00401a84, 0x00700082, 0x00600001, 0x00500061,
-	0x00600002, 0x00401b68, 0x00500060, 0x00200001, 0x0060000a, 0x0011814d,
-	0x00110158, 0x00105401, 0x0020003a, 0x00100051, 0x001040c5, 0x0010c1c4,
-	0x001041c9, 0x0010c1dc, 0x00150210, 0x0012c225, 0x00108238, 0x0010823e,
-	0x001242c0, 0x00200040, 0x00100280, 0x00128100, 0x00128120, 0x00128143,
-	0x0011415f, 0x0010815c, 0x0010c140, 0x00104029, 0x00110400, 0x00104d10,
-	0x001046ec, 0x00500060, 0x00403a87, 0x0060000d, 0x00407ce6, 0x002000f1,
-	0x0060000a, 0x00148653, 0x00104668, 0x0010c66d, 0x00120682, 0x0011068b,
-	0x00168691, 0x001046ae, 0x001046b0, 0x001206b4, 0x001046c4, 0x001146c6,
-	0x00200020, 0x001006cc, 0x001046ed, 0x001246f0, 0x002000c0, 0x00100700,
-	0x0010c3d7, 0x001043e1, 0x00500060, 0x00405800, 0x00405884, 0x00600003,
-	0x00500067, 0x00600008, 0x00500060, 0x00700082, 0x00200233, 0x0060000a,
-	0x00104800, 0x00108901, 0x00124920, 0x0020001f, 0x00100940, 0x00140965,
-	0x00148a00, 0x00108a14, 0x00160b00, 0x00134b2c, 0x0010cd00, 0x0010cd04,
-	0x0010cd08, 0x00104d80, 0x00104e00, 0x0012d600, 0x00105c00, 0x00104f06,
-	0x002002c8, 0x0060000a, 0x00300000, 0x00200680, 0x00407200, 0x00200684,
-	0x00800001, 0x00200b10, 0x0060000a, 0x00203870, 0x0040788a, 0x00201350,
-	0x00800041, 0x00407c84, 0x00201560, 0x00800002, 0x00408d00, 0x00600006,
-	0x00700003, 0x004086e6, 0x00700080, 0x002002c8, 0x0060000a, 0x00200004,
-	0x00800001, 0x00700000, 0x00200000, 0x0060000a, 0x00106002, 0x0040a884,
-	0x00700002, 0x00600004, 0x0040a868, 0x00700000, 0x00200000, 0x0060000a,
-	0x00106002, 0x00700080, 0x00400a84, 0x00700002, 0x00400a68, 0x00500060,
-	0x00600007, 0x00409988, 0x0060000f, 0x00000000, 0x00500060, 0x00200000,
-	0x0060000a, 0x00700000, 0x00106001, 0x00700083, 0x00910880, 0x00901ffe,
-	0x00940400, 0x00200020, 0x0060000b, 0x00500069, 0x0060000c, 0x00401b68,
-	0x0040aa06, 0x0040ab05, 0x00600009, 0x00700005, 0x00700006, 0x0060000e,
-	~0
-};
-
-static uint32_t nv44_ctxprog[] = {
-	0x00400889, 0x00200000, 0x0060000a, 0x00200000, 0x00300000, 0x00800001,
-	0x00700009, 0x0060000e, 0x00400d64, 0x00400d05, 0x00409a65, 0x00409f06,
-	0x0040ac68, 0x0040248f, 0x00200001, 0x0060000a, 0x00700080, 0x00104042,
-	0x001041c6, 0x00104040, 0x00200001, 0x0060000a, 0x00700000, 0x001040c5,
-	0x00402320, 0x00402321, 0x00402322, 0x00402324, 0x00402326, 0x0040232b,
-	0x001040c5, 0x00402328, 0x001040c5, 0x00402320, 0x00402468, 0x0060000d,
-	0x00200000, 0x0060000a, 0x00700000, 0x00106000, 0x00700080, 0x00402be6,
-	0x007000a0, 0x00500060, 0x00200001, 0x0060000a, 0x0011814d, 0x00110158,
-	0x00105401, 0x0020003a, 0x00100051, 0x001040c5, 0x0010c1c4, 0x001041c9,
-	0x0010c1dc, 0x00150210, 0x0012c225, 0x00108238, 0x0010823e, 0x001242c0,
-	0x00200040, 0x00100280, 0x00128100, 0x00128120, 0x00128143, 0x0011415f,
-	0x0010815c, 0x0010c140, 0x00104029, 0x00110400, 0x00104d10, 0x001046ec,
-	0x00500060, 0x00404b87, 0x0060000d, 0x004084e6, 0x002000f1, 0x0060000a,
-	0x00148653, 0x00104668, 0x0010c66d, 0x00120682, 0x0011068b, 0x00168691,
-	0x001046ae, 0x001046b0, 0x001206b4, 0x001046c4, 0x001146c6, 0x001646cc,
-	0x001186e6, 0x001046ed, 0x001246f0, 0x002000c0, 0x00100700, 0x0010c3d7,
-	0x001043e1, 0x00500060, 0x00200232, 0x0060000a, 0x00104800, 0x00108901,
-	0x00104910, 0x00124920, 0x0020001f, 0x00100940, 0x00140965, 0x00148a00,
-	0x00108a14, 0x00160b00, 0x00134b2c, 0x0010cd00, 0x0010cd04, 0x0010cd08,
-	0x00104d80, 0x00104e00, 0x0012d600, 0x00105c00, 0x00104f06, 0x002002c8,
-	0x0060000a, 0x00300000, 0x00200080, 0x00407d00, 0x00200084, 0x00800001,
-	0x00200510, 0x0060000a, 0x002037e0, 0x0040838a, 0x00201320, 0x00800029,
-	0x00409400, 0x00600006, 0x004090e6, 0x00700080, 0x0020007a, 0x0060000a,
-	0x00104280, 0x002002c8, 0x0060000a, 0x00200004, 0x00800001, 0x00700000,
-	0x00200000, 0x0060000a, 0x00106002, 0x0040ac68, 0x00700000, 0x00200000,
-	0x0060000a, 0x00106002, 0x00700080, 0x00400a68, 0x00500060, 0x00600007,
-	0x00409e88, 0x0060000f, 0x00000000, 0x00500060, 0x00200000, 0x0060000a,
-	0x00700000, 0x00106001, 0x00910880, 0x00901ffe, 0x01940000, 0x00200020,
-	0x0060000b, 0x00500069, 0x0060000c, 0x00402c68, 0x0040ae06, 0x0040af05,
-	0x00600009, 0x00700005, 0x00700006, 0x0060000e, ~0
-};
-
-static uint32_t nv46_ctxprog[] = {
-	0x00400889, 0x00200000, 0x0060000a, 0x00200000, 0x00300000, 0x00800001,
-	0x00700009, 0x0060000e, 0x00400d64, 0x00400d05, 0x00408f65, 0x00409306,
-	0x0040a068, 0x0040198f, 0x00200001, 0x0060000a, 0x00700080, 0x00104042,
-	0x00200001, 0x0060000a, 0x00700000, 0x001040c5, 0x00401826, 0x00401968,
-	0x0060000d, 0x00200000, 0x0060000a, 0x00700000, 0x00106000, 0x00700080,
-	0x004020e6, 0x007000a0, 0x00500060, 0x00200008, 0x0060000a, 0x0011814d,
-	0x00110158, 0x00105401, 0x0020003a, 0x00100051, 0x001040c5, 0x0010c1c4,
-	0x001041c9, 0x0010c1dc, 0x00150210, 0x0012c225, 0x00108238, 0x0010823e,
-	0x001242c0, 0x00200040, 0x00100280, 0x00128100, 0x00128120, 0x00128143,
-	0x0011415f, 0x0010815c, 0x0010c140, 0x00104029, 0x00110400, 0x00104d10,
-	0x00500060, 0x00403f87, 0x0060000d, 0x004079e6, 0x002000f7, 0x0060000a,
-	0x00200045, 0x00100620, 0x00104668, 0x0017466d, 0x0011068b, 0x00168691,
-	0x001046ae, 0x001046b0, 0x001206b4, 0x001046c4, 0x001146c6, 0x00200022,
-	0x001006cc, 0x001246f0, 0x002000c0, 0x00100700, 0x0010c3d7, 0x001043e1,
-	0x00500060, 0x0020027f, 0x0060000a, 0x00104800, 0x00108901, 0x00104910,
-	0x00124920, 0x0020001f, 0x00100940, 0x00140965, 0x00148a00, 0x00108a14,
-	0x00160b00, 0x00134b2c, 0x0010cd00, 0x0010cd04, 0x0010cd08, 0x00104d80,
-	0x00104e00, 0x0012d600, 0x00105c00, 0x00104f06, 0x00105406, 0x00105709,
-	0x00200316, 0x0060000a, 0x00300000, 0x00200080, 0x00407200, 0x00200084,
-	0x00800001, 0x0020055e, 0x0060000a, 0x002037e0, 0x0040788a, 0x00201320,
-	0x00800029, 0x00408900, 0x00600006, 0x004085e6, 0x00700080, 0x00200081,
-	0x0060000a, 0x00104280, 0x00200316, 0x0060000a, 0x00200004, 0x00800001,
-	0x00700000, 0x00200000, 0x0060000a, 0x00106002, 0x0040a068, 0x00700000,
-	0x00200000, 0x0060000a, 0x00106002, 0x00700080, 0x00400a68, 0x00500060,
-	0x00600007, 0x00409388, 0x0060000f, 0x00500060, 0x00200000, 0x0060000a,
-	0x00700000, 0x00106001, 0x00910880, 0x00901ffe, 0x01940000, 0x00200020,
-	0x0060000b, 0x00500069, 0x0060000c, 0x00402168, 0x0040a206, 0x0040a305,
-	0x00600009, 0x00700005, 0x00700006, 0x0060000e, ~0
-};
-
-static uint32_t nv47_ctxprog[] = {
-	0x00400889, 0x00200000, 0x0060000a, 0x00200000, 0x00300000, 0x00800001,
-	0x00700009, 0x0060000e, 0x00400d64, 0x00400d05, 0x00409265, 0x00409606,
-	0x0040a368, 0x0040198f, 0x00200001, 0x0060000a, 0x00700080, 0x00104042,
-	0x00200001, 0x0060000a, 0x00700000, 0x001040c5, 0x00401826, 0x00401968,
-	0x0060000d, 0x00200000, 0x0060000a, 0x00700000, 0x00106000, 0x00700080,
-	0x004020e6, 0x007000a0, 0x00500060, 0x00200001, 0x0060000a, 0x0011814d,
-	0x00110158, 0x00105401, 0x0020003a, 0x00100051, 0x001040c5, 0x0010c1c4,
-	0x001041c9, 0x0010c1dc, 0x00150210, 0x0012c225, 0x00108238, 0x0010823e,
-	0x001242c0, 0x00200040, 0x00100280, 0x00128100, 0x00128120, 0x00128143,
-	0x0011415f, 0x0010815c, 0x0010c140, 0x00104029, 0x00110400, 0x00104d12,
-	0x00500060, 0x00403f87, 0x0060000d, 0x00407ce6, 0x002000f0, 0x0060000a,
-	0x00200020, 0x00100620, 0x00154650, 0x00104668, 0x0017466d, 0x0011068b,
-	0x00168691, 0x001046ae, 0x001046b0, 0x001206b4, 0x001046c4, 0x001146c6,
-	0x00200022, 0x001006cc, 0x001246f0, 0x002000c0, 0x00100700, 0x0010c3d7,
-	0x001043e1, 0x00500060, 0x00200268, 0x0060000a, 0x00104800, 0x00108901,
-	0x00124920, 0x0020001f, 0x00100940, 0x00140965, 0x00144a00, 0x00104a19,
-	0x0010ca1c, 0x00110b00, 0x00200028, 0x00100b08, 0x00134c2e, 0x0010cd00,
-	0x0010cd04, 0x00120d08, 0x00104d80, 0x00104e00, 0x0012d600, 0x00105c00,
-	0x00104f06, 0x00105406, 0x00105709, 0x00200318, 0x0060000a, 0x00300000,
-	0x00200680, 0x00407500, 0x00200684, 0x00800001, 0x00200b60, 0x0060000a,
-	0x00209540, 0x00407b8a, 0x00201350, 0x00800041, 0x00408c00, 0x00600006,
-	0x004088e6, 0x00700080, 0x0020007a, 0x0060000a, 0x00104280, 0x00200318,
-	0x0060000a, 0x00200004, 0x00800001, 0x00700000, 0x00200000, 0x0060000a,
-	0x00106002, 0x0040a368, 0x00700000, 0x00200000, 0x0060000a, 0x00106002,
-	0x00700080, 0x00400a68, 0x00500060, 0x00600007, 0x00409688, 0x0060000f,
-	0x00500060, 0x00200000, 0x0060000a, 0x00700000, 0x00106001, 0x0091a880,
-	0x00901ffe, 0x10940000, 0x00200020, 0x0060000b, 0x00500069, 0x0060000c,
-	0x00402168, 0x0040a506, 0x0040a605, 0x00600009, 0x00700005, 0x00700006,
-	0x0060000e, ~0
-};
-
-/* this is used for nv49 and nv4b */
-static uint32_t nv49_4b_ctxprog[] = {
-	0x00400564, 0x00400505, 0x00408165, 0x00408206, 0x00409e68, 0x00200020,
-	0x0060000a, 0x00700080, 0x00104042, 0x00200020, 0x0060000a, 0x00700000,
-	0x001040c5, 0x00400f26, 0x00401068, 0x0060000d, 0x0070008f, 0x0070000e,
-	0x00408d68, 0x004015e6, 0x007000a0, 0x00700080, 0x0040180f, 0x00700000,
-	0x00200029, 0x0060000a, 0x0011814d, 0x00110158, 0x00105401, 0x0020003a,
-	0x00100051, 0x001040c5, 0x0010c1c4, 0x001041c9, 0x0010c1dc, 0x00150210,
-	0x0012c225, 0x00108238, 0x0010823e, 0x001242c0, 0x00200040, 0x00100280,
-	0x00128100, 0x00128120, 0x00128143, 0x0011415f, 0x0010815c, 0x0010c140,
-	0x00104029, 0x00110400, 0x00104d12, 0x00500060, 0x004071e6, 0x00200118,
-	0x0060000a, 0x00200020, 0x00100620, 0x00154650, 0x00104668, 0x0017466d,
-	0x0011068b, 0x00168691, 0x001046ae, 0x001046b0, 0x001206b4, 0x001046c4,
-	0x001146c6, 0x00200022, 0x001006cc, 0x001246f0, 0x002000c0, 0x00100700,
-	0x0010c3d7, 0x001043e1, 0x00500060, 0x00200290, 0x0060000a, 0x00104800,
-	0x00108901, 0x00124920, 0x0020001f, 0x00100940, 0x00140965, 0x00144a00,
-	0x00104a19, 0x0010ca1c, 0x00110b00, 0x00200028, 0x00100b08, 0x00134c2e,
-	0x0010cd00, 0x0010cd04, 0x00120d08, 0x00104d80, 0x00104e00, 0x0012d600,
-	0x00105c00, 0x00104f06, 0x00105406, 0x00105709, 0x00200340, 0x0060000a,
-	0x00300000, 0x00200680, 0x00406a0f, 0x00200684, 0x00800001, 0x00200b88,
-	0x0060000a, 0x00209540, 0x0040708a, 0x00201350, 0x00800041, 0x00407c0f,
-	0x00600006, 0x00407ce6, 0x00700080, 0x002000a2, 0x0060000a, 0x00104280,
-	0x00200340, 0x0060000a, 0x00200004, 0x00800001, 0x0070008e, 0x00408d68,
-	0x0040020f, 0x00600006, 0x00409e68, 0x00600007, 0x0070000f, 0x0070000e,
-	0x00408d68, 0x0091a880, 0x00901ffe, 0x10940000, 0x00200020, 0x0060000b,
-	0x00500069, 0x0060000c, 0x00401568, 0x00700000, 0x00200001, 0x0040910e,
-	0x00200021, 0x0060000a, 0x00409b0d, 0x00104a40, 0x00104a50, 0x00104a60,
-	0x00104a70, 0x00104a80, 0x00104a90, 0x00104aa0, 0x00104ab0, 0x00407e0e,
-	0x0040130f, 0x00408568, 0x0040a006, 0x0040a105, 0x00600009, 0x00700005,
-	0x00700006, 0x0060000e, ~0
-};
+void
+nv40_graph_set_region_tiling(struct drm_device *dev, int i, uint32_t addr,
+			     uint32_t size, uint32_t pitch)
+{
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	uint32_t limit = max(1u, addr + size) - 1;
 
+	if (pitch)
+		addr |= 1;
 
-static uint32_t nv4a_ctxprog[] = {
-	0x00400889, 0x00200000, 0x0060000a, 0x00200000, 0x00300000, 0x00800001,
-	0x00700009, 0x0060000e, 0x00400d64, 0x00400d05, 0x00409965, 0x00409e06,
-	0x0040ac68, 0x00200000, 0x0060000a, 0x00700000, 0x00106000, 0x00700080,
-	0x004014e6, 0x007000a0, 0x00401a84, 0x00700082, 0x00600001, 0x00500061,
-	0x00600002, 0x00401b68, 0x00500060, 0x00200001, 0x0060000a, 0x0011814d,
-	0x00110158, 0x00105401, 0x0020003a, 0x00100051, 0x001040c5, 0x0010c1c4,
-	0x001041c9, 0x0010c1dc, 0x00150210, 0x0012c225, 0x00108238, 0x0010823e,
-	0x001242c0, 0x00200040, 0x00100280, 0x00128100, 0x00128120, 0x00128143,
-	0x0011415f, 0x0010815c, 0x0010c140, 0x00104029, 0x00110400, 0x00104d10,
-	0x001046ec, 0x00500060, 0x00403a87, 0x0060000d, 0x00407de6, 0x002000f1,
-	0x0060000a, 0x00148653, 0x00104668, 0x0010c66d, 0x00120682, 0x0011068b,
-	0x00168691, 0x001046ae, 0x001046b0, 0x001206b4, 0x001046c4, 0x001146c6,
-	0x001646cc, 0x001186e6, 0x001046ed, 0x001246f0, 0x002000c0, 0x00100700,
-	0x0010c3d7, 0x001043e1, 0x00500060, 0x00405800, 0x00405884, 0x00600003,
-	0x00500067, 0x00600008, 0x00500060, 0x00700082, 0x00200232, 0x0060000a,
-	0x00104800, 0x00108901, 0x00104910, 0x00124920, 0x0020001f, 0x00100940,
-	0x00140965, 0x00148a00, 0x00108a14, 0x00160b00, 0x00134b2c, 0x0010cd00,
-	0x0010cd04, 0x0010cd08, 0x00104d80, 0x00104e00, 0x0012d600, 0x00105c00,
-	0x00104f06, 0x002002c8, 0x0060000a, 0x00300000, 0x00200080, 0x00407300,
-	0x00200084, 0x00800001, 0x00200510, 0x0060000a, 0x002037e0, 0x0040798a,
-	0x00201320, 0x00800029, 0x00407d84, 0x00201560, 0x00800002, 0x00409100,
-	0x00600006, 0x00700003, 0x00408ae6, 0x00700080, 0x0020007a, 0x0060000a,
-	0x00104280, 0x002002c8, 0x0060000a, 0x00200004, 0x00800001, 0x00700000,
-	0x00200000, 0x0060000a, 0x00106002, 0x0040ac84, 0x00700002, 0x00600004,
-	0x0040ac68, 0x00700000, 0x00200000, 0x0060000a, 0x00106002, 0x00700080,
-	0x00400a84, 0x00700002, 0x00400a68, 0x00500060, 0x00600007, 0x00409d88,
-	0x0060000f, 0x00000000, 0x00500060, 0x00200000, 0x0060000a, 0x00700000,
-	0x00106001, 0x00700083, 0x00910880, 0x00901ffe, 0x01940000, 0x00200020,
-	0x0060000b, 0x00500069, 0x0060000c, 0x00401b68, 0x0040ae06, 0x0040af05,
-	0x00600009, 0x00700005, 0x00700006, 0x0060000e, ~0
-};
+	switch (dev_priv->chipset) {
+	case 0x44:
+	case 0x4a:
+	case 0x4e:
+		nv_wr32(dev, NV20_PGRAPH_TSIZE(i), pitch);
+		nv_wr32(dev, NV20_PGRAPH_TLIMIT(i), limit);
+		nv_wr32(dev, NV20_PGRAPH_TILE(i), addr);
+		break;
 
-static uint32_t nv4c_ctxprog[] = {
-	0x00400889, 0x00200000, 0x0060000a, 0x00200000, 0x00300000, 0x00800001,
-	0x00700009, 0x0060000e, 0x00400d64, 0x00400d05, 0x00409065, 0x00409406,
-	0x0040a168, 0x0040198f, 0x00200001, 0x0060000a, 0x00700080, 0x00104042,
-	0x00200001, 0x0060000a, 0x00700000, 0x001040c5, 0x00401826, 0x00401968,
-	0x0060000d, 0x00200000, 0x0060000a, 0x00700000, 0x00106000, 0x00700080,
-	0x004020e6, 0x007000a0, 0x00500060, 0x00200001, 0x0060000a, 0x0011814d,
-	0x00110158, 0x00105401, 0x0020003a, 0x00100051, 0x001040c5, 0x0010c1c4,
-	0x001041c9, 0x0010c1dc, 0x00150210, 0x0012c225, 0x00108238, 0x0010823e,
-	0x001242c0, 0x00200040, 0x00100280, 0x00128100, 0x00128120, 0x00128143,
-	0x0011415f, 0x0010815c, 0x0010c140, 0x00104029, 0x00110400, 0x00104d10,
-	0x0010427e, 0x001046ec, 0x00500060, 0x00404187, 0x0060000d, 0x00407ae6,
-	0x002000f2, 0x0060000a, 0x00148653, 0x00104668, 0x0010c66d, 0x00120682,
-	0x0011068b, 0x00168691, 0x001046ae, 0x001046b0, 0x001206b4, 0x001046c4,
-	0x001146c6, 0x00200020, 0x001006cc, 0x001046ed, 0x001246f0, 0x002000c0,
-	0x00100700, 0x0010c3d7, 0x001043e1, 0x00500060, 0x00200234, 0x0060000a,
-	0x00104800, 0x00108901, 0x00104910, 0x00124920, 0x0020001f, 0x00100940,
-	0x00140965, 0x00148a00, 0x00108a14, 0x00140b00, 0x00134b2c, 0x0010cd00,
-	0x0010cd04, 0x00104d08, 0x00104d80, 0x00104e00, 0x0012d600, 0x00105c00,
-	0x00104f06, 0x002002c0, 0x0060000a, 0x00300000, 0x00200080, 0x00407300,
-	0x00200084, 0x00800001, 0x00200508, 0x0060000a, 0x00201320, 0x0040798a,
-	0xfffffaf8, 0x00800029, 0x00408a00, 0x00600006, 0x004086e6, 0x00700080,
-	0x0020007a, 0x0060000a, 0x00104280, 0x002002c0, 0x0060000a, 0x00200004,
-	0x00800001, 0x00700000, 0x00200000, 0x0060000a, 0x00106002, 0x0040a168,
-	0x00700000, 0x00200000, 0x0060000a, 0x00106002, 0x00700080, 0x00400a68,
-	0x00500060, 0x00600007, 0x00409488, 0x0060000f, 0x00500060, 0x00200000,
-	0x0060000a, 0x00700000, 0x00106001, 0x00910880, 0x00901ffe, 0x01940000,
-	0x00200020, 0x0060000b, 0x00500069, 0x0060000c, 0x00402168, 0x0040a306,
-	0x0040a405, 0x00600009, 0x00700005, 0x00700006, 0x0060000e, ~0
-};
+	case 0x46:
+	case 0x47:
+	case 0x49:
+	case 0x4b:
+		nv_wr32(dev, NV47_PGRAPH_TSIZE(i), pitch);
+		nv_wr32(dev, NV47_PGRAPH_TLIMIT(i), limit);
+		nv_wr32(dev, NV47_PGRAPH_TILE(i), addr);
+		nv_wr32(dev, NV40_PGRAPH_TSIZE1(i), pitch);
+		nv_wr32(dev, NV40_PGRAPH_TLIMIT1(i), limit);
+		nv_wr32(dev, NV40_PGRAPH_TILE1(i), addr);
+		break;
 
-static uint32_t nv4e_ctxprog[] = {
-	0x00400889, 0x00200000, 0x0060000a, 0x00200000, 0x00300000, 0x00800001,
-	0x00700009, 0x0060000e, 0x00400d64, 0x00400d05, 0x00409565, 0x00409a06,
-	0x0040a868, 0x00200000, 0x0060000a, 0x00700000, 0x00106000, 0x00700080,
-	0x004014e6, 0x007000a0, 0x00401a84, 0x00700082, 0x00600001, 0x00500061,
-	0x00600002, 0x00401b68, 0x00500060, 0x00200001, 0x0060000a, 0x0011814d,
-	0x00110158, 0x00105401, 0x0020003a, 0x00100051, 0x001040c5, 0x0010c1c4,
-	0x001041c9, 0x0010c1dc, 0x00150210, 0x0012c225, 0x00108238, 0x0010823e,
-	0x001242c0, 0x00200040, 0x00100280, 0x00128100, 0x00128120, 0x00128143,
-	0x0011415f, 0x0010815c, 0x0010c140, 0x00104029, 0x00110400, 0x00104d10,
-	0x001046ec, 0x00500060, 0x00403a87, 0x0060000d, 0x00407ce6, 0x002000f1,
-	0x0060000a, 0x00148653, 0x00104668, 0x0010c66d, 0x00120682, 0x0011068b,
-	0x00168691, 0x001046ae, 0x001046b0, 0x001206b4, 0x001046c4, 0x001146c6,
-	0x001646cc, 0x001186e6, 0x001046ed, 0x001246f0, 0x002000c0, 0x00100700,
-	0x0010c3d7, 0x001043e1, 0x00500060, 0x00405800, 0x00405884, 0x00600003,
-	0x00500067, 0x00600008, 0x00500060, 0x00700082, 0x00200232, 0x0060000a,
-	0x00104800, 0x00108901, 0x00104910, 0x00124920, 0x0020001f, 0x00100940,
-	0x00140965, 0x00148a00, 0x00108a14, 0x00140b00, 0x00134b2c, 0x0010cd00,
-	0x0010cd04, 0x00104d08, 0x00104d80, 0x00104e00, 0x00105c00, 0x00104f06,
-	0x002002b2, 0x0060000a, 0x00300000, 0x00200080, 0x00407200, 0x00200084,
-	0x00800001, 0x002004fa, 0x0060000a, 0x00201320, 0x0040788a, 0xfffffb06,
-	0x00800029, 0x00407c84, 0x00200b20, 0x00800002, 0x00408d00, 0x00600006,
-	0x00700003, 0x004086e6, 0x00700080, 0x002002b2, 0x0060000a, 0x00200004,
-	0x00800001, 0x00700000, 0x00200000, 0x0060000a, 0x00106002, 0x0040a884,
-	0x00700002, 0x00600004, 0x0040a868, 0x00700000, 0x00200000, 0x0060000a,
-	0x00106002, 0x00700080, 0x00400a84, 0x00700002, 0x00400a68, 0x00500060,
-	0x00600007, 0x00409988, 0x0060000f, 0x00000000, 0x00500060, 0x00200000,
-	0x0060000a, 0x00700000, 0x00106001, 0x00700083, 0x00910880, 0x00901ffe,
-	0x01940000, 0x00200020, 0x0060000b, 0x00500069, 0x0060000c, 0x00401b68,
-	0x0040aa06, 0x0040ab05, 0x00600009, 0x00700005, 0x00700006, 0x0060000e,
-	~0
-};
+	default:
+		nv_wr32(dev, NV20_PGRAPH_TSIZE(i), pitch);
+		nv_wr32(dev, NV20_PGRAPH_TLIMIT(i), limit);
+		nv_wr32(dev, NV20_PGRAPH_TILE(i), addr);
+		nv_wr32(dev, NV40_PGRAPH_TSIZE1(i), pitch);
+		nv_wr32(dev, NV40_PGRAPH_TLIMIT1(i), limit);
+		nv_wr32(dev, NV40_PGRAPH_TILE1(i), addr);
+		break;
+	}
+}
 
 /*
  * G70		0x47
@@ -1973,8 +237,8 @@ nv40_graph_init(struct drm_device *dev)
 {
 	struct drm_nouveau_private *dev_priv =
 		(struct drm_nouveau_private *)dev->dev_private;
-	uint32_t *ctxprog = NULL;
-	uint32_t vramsz, tmp;
+	struct nouveau_fb_engine *pfb = &dev_priv->engine.fb;
+	uint32_t vramsz;
 	int i, j;
 
 	nv_wr32(dev, NV03_PMC_ENABLE, nv_rd32(dev, NV03_PMC_ENABLE) &
@@ -1982,59 +246,25 @@ nv40_graph_init(struct drm_device *dev)
 	nv_wr32(dev, NV03_PMC_ENABLE, nv_rd32(dev, NV03_PMC_ENABLE) |
 			 NV_PMC_ENABLE_PGRAPH);
 
-	switch (dev_priv->chipset) {
-	case 0x40:
-		ctxprog = nv40_ctxprog;
-		break;
-	case 0x41:
-	case 0x42:
-		ctxprog = nv41_ctxprog;
-		break;
-	case 0x43:
-		ctxprog = nv43_ctxprog;
-		break;
-	case 0x44:
-		ctxprog = nv44_ctxprog;
-		break;
-	case 0x46:
-		ctxprog = nv46_ctxprog;
-		break;
-	case 0x47:
-		ctxprog = nv47_ctxprog;
-		break;
-	case 0x49:
-		ctxprog = nv49_4b_ctxprog;
-		break;
-	case 0x4a:
-		ctxprog = nv4a_ctxprog;
-		break;
-	case 0x4b:
-		ctxprog = nv49_4b_ctxprog;
-		break;
-	case 0x4c:
-	case 0x67:
-		ctxprog = nv4c_ctxprog;
-		break;
-	case 0x4e:
-		ctxprog = nv4e_ctxprog;
-		break;
-	default:
-		NV_ERROR(dev, "Context program for 0x%02x unavailable\n",
-			 dev_priv->chipset);
-		dev_priv->engine.graph.accel_blocked = true;
-		break;
+	if (nouveau_ctxfw) {
+		nouveau_grctx_prog_load(dev);
+		dev_priv->engine.graph.grctx_size = 175 * 1024;
 	}
 
-	/* Load the context program onto the card */
-	if (ctxprog) {
-		NV_DEBUG(dev, "Loading context program\n");
+	if (!dev_priv->engine.graph.ctxprog) {
+		struct nouveau_grctx ctx = {};
+		uint32_t cp[256];
+
+		ctx.dev = dev;
+		ctx.mode = NOUVEAU_GRCTX_PROG;
+		ctx.data = cp;
+		ctx.ctxprog_max = 256;
+		nv40_grctx_init(&ctx);
+		dev_priv->engine.graph.grctx_size = ctx.ctxvals_pos * 4;
 
-		i = 0;
 		nv_wr32(dev, NV40_PGRAPH_CTXCTL_UCODE_INDEX, 0);
-		while (ctxprog[i] != ~0) {
-			nv_wr32(dev, NV40_PGRAPH_CTXCTL_UCODE_DATA, ctxprog[i]);
-			i++;
-		}
+		for (i = 0; i < ctx.ctxprog_len; i++)
+			nv_wr32(dev, NV40_PGRAPH_CTXCTL_UCODE_DATA, cp[i]);
 	}
 
 	/* No context present currently */
@@ -2105,74 +335,9 @@ nv40_graph_init(struct drm_device *dev)
 	nv_wr32(dev, 0x400b38, 0x2ffff800);
 	nv_wr32(dev, 0x400b3c, 0x00006000);
 
-	/* copy tile info from PFB */
-	switch (dev_priv->chipset) {
-	case 0x40: /* vanilla NV40 */
-		for (i = 0; i < NV10_PFB_TILE__SIZE; i++) {
-			tmp = nv_rd32(dev, NV10_PFB_TILE(i));
-			nv_wr32(dev, NV40_PGRAPH_TILE0(i), tmp);
-			nv_wr32(dev, NV40_PGRAPH_TILE1(i), tmp);
-			tmp = nv_rd32(dev, NV10_PFB_TLIMIT(i));
-			nv_wr32(dev, NV40_PGRAPH_TLIMIT0(i), tmp);
-			nv_wr32(dev, NV40_PGRAPH_TLIMIT1(i), tmp);
-			tmp = nv_rd32(dev, NV10_PFB_TSIZE(i));
-			nv_wr32(dev, NV40_PGRAPH_TSIZE0(i), tmp);
-			nv_wr32(dev, NV40_PGRAPH_TSIZE1(i), tmp);
-			tmp = nv_rd32(dev, NV10_PFB_TSTATUS(i));
-			nv_wr32(dev, NV40_PGRAPH_TSTATUS0(i), tmp);
-			nv_wr32(dev, NV40_PGRAPH_TSTATUS1(i), tmp);
-		}
-		break;
-	case 0x44:
-	case 0x4a:
-	case 0x4e: /* NV44-based cores don't have 0x406900? */
-		for (i = 0; i < NV40_PFB_TILE__SIZE_0; i++) {
-			tmp = nv_rd32(dev, NV40_PFB_TILE(i));
-			nv_wr32(dev, NV40_PGRAPH_TILE0(i), tmp);
-			tmp = nv_rd32(dev, NV40_PFB_TLIMIT(i));
-			nv_wr32(dev, NV40_PGRAPH_TLIMIT0(i), tmp);
-			tmp = nv_rd32(dev, NV40_PFB_TSIZE(i));
-			nv_wr32(dev, NV40_PGRAPH_TSIZE0(i), tmp);
-			tmp = nv_rd32(dev, NV40_PFB_TSTATUS(i));
-			nv_wr32(dev, NV40_PGRAPH_TSTATUS0(i), tmp);
-		}
-		break;
-	case 0x46:
-	case 0x47:
-	case 0x49:
-	case 0x4b: /* G7X-based cores */
-		for (i = 0; i < NV40_PFB_TILE__SIZE_1; i++) {
-			tmp = nv_rd32(dev, NV40_PFB_TILE(i));
-			nv_wr32(dev, NV47_PGRAPH_TILE0(i), tmp);
-			nv_wr32(dev, NV40_PGRAPH_TILE1(i), tmp);
-			tmp = nv_rd32(dev, NV40_PFB_TLIMIT(i));
-			nv_wr32(dev, NV47_PGRAPH_TLIMIT0(i), tmp);
-			nv_wr32(dev, NV40_PGRAPH_TLIMIT1(i), tmp);
-			tmp = nv_rd32(dev, NV40_PFB_TSIZE(i));
-			nv_wr32(dev, NV47_PGRAPH_TSIZE0(i), tmp);
-			nv_wr32(dev, NV40_PGRAPH_TSIZE1(i), tmp);
-			tmp = nv_rd32(dev, NV40_PFB_TSTATUS(i));
-			nv_wr32(dev, NV47_PGRAPH_TSTATUS0(i), tmp);
-			nv_wr32(dev, NV40_PGRAPH_TSTATUS1(i), tmp);
-		}
-		break;
-	default: /* everything else */
-		for (i = 0; i < NV40_PFB_TILE__SIZE_0; i++) {
-			tmp = nv_rd32(dev, NV40_PFB_TILE(i));
-			nv_wr32(dev, NV40_PGRAPH_TILE0(i), tmp);
-			nv_wr32(dev, NV40_PGRAPH_TILE1(i), tmp);
-			tmp = nv_rd32(dev, NV40_PFB_TLIMIT(i));
-			nv_wr32(dev, NV40_PGRAPH_TLIMIT0(i), tmp);
-			nv_wr32(dev, NV40_PGRAPH_TLIMIT1(i), tmp);
-			tmp = nv_rd32(dev, NV40_PFB_TSIZE(i));
-			nv_wr32(dev, NV40_PGRAPH_TSIZE0(i), tmp);
-			nv_wr32(dev, NV40_PGRAPH_TSIZE1(i), tmp);
-			tmp = nv_rd32(dev, NV40_PFB_TSTATUS(i));
-			nv_wr32(dev, NV40_PGRAPH_TSTATUS0(i), tmp);
-			nv_wr32(dev, NV40_PGRAPH_TSTATUS1(i), tmp);
-		}
-		break;
-	}
+	/* Turn all the tiling regions off. */
+	for (i = 0; i < pfb->num_tiles; i++)
+		nv40_graph_set_region_tiling(dev, i, 0, 0, 0);
 
 	/* begin RAM config */
 	vramsz = drm_get_resource_len(dev, 0) - 1;
@@ -2215,6 +380,7 @@ nv40_graph_init(struct drm_device *dev)
 
 void nv40_graph_takedown(struct drm_device *dev)
 {
+	nouveau_grctx_fini(dev);
 }
 
 struct nouveau_pgraph_object_class nv40_graph_grclass[] = {
@@ -2226,6 +392,7 @@ struct nouveau_pgraph_object_class nv40_graph_grclass[] = {
 	{ 0x0089, false, NULL }, /* sifm */
 	{ 0x3089, false, NULL }, /* sifm (nv40) */
 	{ 0x0062, false, NULL }, /* surf2d */
+	{ 0x3062, false, NULL }, /* surf2d (nv40) */
 	{ 0x0043, false, NULL }, /* rop */
 	{ 0x0012, false, NULL }, /* beta1 */
 	{ 0x0072, false, NULL }, /* beta4 */
diff --git a/drivers/gpu/drm/nouveau/nv40_grctx.c b/drivers/gpu/drm/nouveau/nv40_grctx.c
new file mode 100644
index 0000000..11b11c3
--- /dev/null
+++ b/drivers/gpu/drm/nouveau/nv40_grctx.c
@@ -0,0 +1,678 @@
+/*
+ * Copyright 2009 Red Hat Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
+ * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+ * OTHER DEALINGS IN THE SOFTWARE.
+ *
+ * Authors: Ben Skeggs
+ */
+
+/* NVIDIA context programs handle a number of other conditions which are
+ * not implemented in our versions.  It's not clear why NVIDIA context
+ * programs have this code, nor whether it's strictly necessary for
+ * correct operation.  We'll implement additional handling if/when we
+ * discover it's necessary.
+ *
+ * - On context save, NVIDIA set 0x400314 bit 0 to 1 if the "3D state"
+ *   flag is set, this gets saved into the context.
+ * - On context save, the context program for all cards load nsource
+ *   into a flag register and check for ILLEGAL_MTHD.  If it's set,
+ *   opcode 0x60000d is called before resuming normal operation.
+ * - Some context programs check more conditions than the above.  NV44
+ *   checks: ((nsource & 0x0857) || (0x400718 & 0x0100) || (intr & 0x0001))
+ *   and calls 0x60000d before resuming normal operation.
+ * - At the very beginning of NVIDIA's context programs, flag 9 is checked
+ *   and if true 0x800001 is called with count=0, pos=0, the flag is cleared
+ *   and then the ctxprog is aborted.  It looks like a complicated NOP,
+ *   its purpose is unknown.
+ * - In the section of code that loads the per-vs state, NVIDIA check
+ *   flag 10.  If it's set, they only transfer the small 0x300 byte block
+ *   of state + the state for a single vs as opposed to the state for
+ *   all vs units.  It doesn't seem likely that it'll occur in normal
+ *   operation, especially seeing as it appears NVIDIA may have screwed
+ *   up the ctxprogs for some cards and have an invalid instruction
+ *   rather than a cp_lsr(ctx, dwords_for_1_vs_unit) instruction.
+ * - There's a number of places where context offset 0 (where we place
+ *   the PRAMIN offset of the context) is loaded into either 0x408000,
+ *   0x408004 or 0x408008.  Not sure what's up there either.
+ * - The ctxprogs for some cards save 0x400a00 again during the cleanup
+ *   path for auto-loadctx.
+ */
+
+#define CP_FLAG_CLEAR                 0
+#define CP_FLAG_SET                   1
+#define CP_FLAG_SWAP_DIRECTION        ((0 * 32) + 0)
+#define CP_FLAG_SWAP_DIRECTION_LOAD   0
+#define CP_FLAG_SWAP_DIRECTION_SAVE   1
+#define CP_FLAG_USER_SAVE             ((0 * 32) + 5)
+#define CP_FLAG_USER_SAVE_NOT_PENDING 0
+#define CP_FLAG_USER_SAVE_PENDING     1
+#define CP_FLAG_USER_LOAD             ((0 * 32) + 6)
+#define CP_FLAG_USER_LOAD_NOT_PENDING 0
+#define CP_FLAG_USER_LOAD_PENDING     1
+#define CP_FLAG_STATUS                ((3 * 32) + 0)
+#define CP_FLAG_STATUS_IDLE           0
+#define CP_FLAG_STATUS_BUSY           1
+#define CP_FLAG_AUTO_SAVE             ((3 * 32) + 4)
+#define CP_FLAG_AUTO_SAVE_NOT_PENDING 0
+#define CP_FLAG_AUTO_SAVE_PENDING     1
+#define CP_FLAG_AUTO_LOAD             ((3 * 32) + 5)
+#define CP_FLAG_AUTO_LOAD_NOT_PENDING 0
+#define CP_FLAG_AUTO_LOAD_PENDING     1
+#define CP_FLAG_UNK54                 ((3 * 32) + 6)
+#define CP_FLAG_UNK54_CLEAR           0
+#define CP_FLAG_UNK54_SET             1
+#define CP_FLAG_ALWAYS                ((3 * 32) + 8)
+#define CP_FLAG_ALWAYS_FALSE          0
+#define CP_FLAG_ALWAYS_TRUE           1
+#define CP_FLAG_UNK57                 ((3 * 32) + 9)
+#define CP_FLAG_UNK57_CLEAR           0
+#define CP_FLAG_UNK57_SET             1
+
+#define CP_CTX                   0x00100000
+#define CP_CTX_COUNT             0x000fc000
+#define CP_CTX_COUNT_SHIFT               14
+#define CP_CTX_REG               0x00003fff
+#define CP_LOAD_SR               0x00200000
+#define CP_LOAD_SR_VALUE         0x000fffff
+#define CP_BRA                   0x00400000
+#define CP_BRA_IP                0x0000ff00
+#define CP_BRA_IP_SHIFT                   8
+#define CP_BRA_IF_CLEAR          0x00000080
+#define CP_BRA_FLAG              0x0000007f
+#define CP_WAIT                  0x00500000
+#define CP_WAIT_SET              0x00000080
+#define CP_WAIT_FLAG             0x0000007f
+#define CP_SET                   0x00700000
+#define CP_SET_1                 0x00000080
+#define CP_SET_FLAG              0x0000007f
+#define CP_NEXT_TO_SWAP          0x00600007
+#define CP_NEXT_TO_CURRENT       0x00600009
+#define CP_SET_CONTEXT_POINTER   0x0060000a
+#define CP_END                   0x0060000e
+#define CP_LOAD_MAGIC_UNK01      0x00800001 /* unknown */
+#define CP_LOAD_MAGIC_NV44TCL    0x00800029 /* per-vs state (0x4497) */
+#define CP_LOAD_MAGIC_NV40TCL    0x00800041 /* per-vs state (0x4097) */
+
+#include "drmP.h"
+#include "nouveau_drv.h"
+#include "nouveau_grctx.h"
+
+/* TODO:
+ *  - get vs count from 0x1540
+ *  - document unimplemented bits compared to nvidia
+ *    - nsource handling
+ *    - R0 & 0x0200 handling
+ *    - single-vs handling
+ *    - 400314 bit 0
+ */
+
+static int
+nv40_graph_4097(struct drm_device *dev)
+{
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+
+	if ((dev_priv->chipset & 0xf0) == 0x60)
+		return 0;
+
+	return !!(0x0baf & (1 << dev_priv->chipset));
+}
+
+static int
+nv40_graph_vs_count(struct drm_device *dev)
+{
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+
+	switch (dev_priv->chipset) {
+	case 0x47:
+	case 0x49:
+	case 0x4b:
+		return 8;
+	case 0x40:
+		return 6;
+	case 0x41:
+	case 0x42:
+		return 5;
+	case 0x43:
+	case 0x44:
+	case 0x46:
+	case 0x4a:
+		return 3;
+	case 0x4c:
+	case 0x4e:
+	case 0x67:
+	default:
+		return 1;
+	}
+}
+
+
+enum cp_label {
+	cp_check_load = 1,
+	cp_setup_auto_load,
+	cp_setup_load,
+	cp_setup_save,
+	cp_swap_state,
+	cp_swap_state3d_3_is_save,
+	cp_prepare_exit,
+	cp_exit,
+};
+
+static void
+nv40_graph_construct_general(struct nouveau_grctx *ctx)
+{
+	struct drm_nouveau_private *dev_priv = ctx->dev->dev_private;
+	int i;
+
+	cp_ctx(ctx, 0x4000a4, 1);
+	gr_def(ctx, 0x4000a4, 0x00000008);
+	cp_ctx(ctx, 0x400144, 58);
+	gr_def(ctx, 0x400144, 0x00000001);
+	cp_ctx(ctx, 0x400314, 1);
+	gr_def(ctx, 0x400314, 0x00000000);
+	cp_ctx(ctx, 0x400400, 10);
+	cp_ctx(ctx, 0x400480, 10);
+	cp_ctx(ctx, 0x400500, 19);
+	gr_def(ctx, 0x400514, 0x00040000);
+	gr_def(ctx, 0x400524, 0x55555555);
+	gr_def(ctx, 0x400528, 0x55555555);
+	gr_def(ctx, 0x40052c, 0x55555555);
+	gr_def(ctx, 0x400530, 0x55555555);
+	cp_ctx(ctx, 0x400560, 6);
+	gr_def(ctx, 0x400568, 0x0000ffff);
+	gr_def(ctx, 0x40056c, 0x0000ffff);
+	cp_ctx(ctx, 0x40057c, 5);
+	cp_ctx(ctx, 0x400710, 3);
+	gr_def(ctx, 0x400710, 0x20010001);
+	gr_def(ctx, 0x400714, 0x0f73ef00);
+	cp_ctx(ctx, 0x400724, 1);
+	gr_def(ctx, 0x400724, 0x02008821);
+	cp_ctx(ctx, 0x400770, 3);
+	if (dev_priv->chipset == 0x40) {
+		cp_ctx(ctx, 0x400814, 4);
+		cp_ctx(ctx, 0x400828, 5);
+		cp_ctx(ctx, 0x400840, 5);
+		gr_def(ctx, 0x400850, 0x00000040);
+		cp_ctx(ctx, 0x400858, 4);
+		gr_def(ctx, 0x400858, 0x00000040);
+		gr_def(ctx, 0x40085c, 0x00000040);
+		gr_def(ctx, 0x400864, 0x80000000);
+		cp_ctx(ctx, 0x40086c, 9);
+		gr_def(ctx, 0x40086c, 0x80000000);
+		gr_def(ctx, 0x400870, 0x80000000);
+		gr_def(ctx, 0x400874, 0x80000000);
+		gr_def(ctx, 0x400878, 0x80000000);
+		gr_def(ctx, 0x400888, 0x00000040);
+		gr_def(ctx, 0x40088c, 0x80000000);
+		cp_ctx(ctx, 0x4009c0, 8);
+		gr_def(ctx, 0x4009cc, 0x80000000);
+		gr_def(ctx, 0x4009dc, 0x80000000);
+	} else {
+		cp_ctx(ctx, 0x400840, 20);
+		if (!nv40_graph_4097(ctx->dev)) {
+			for (i = 0; i < 8; i++)
+				gr_def(ctx, 0x400860 + (i * 4), 0x00000001);
+		}
+		gr_def(ctx, 0x400880, 0x00000040);
+		gr_def(ctx, 0x400884, 0x00000040);
+		gr_def(ctx, 0x400888, 0x00000040);
+		cp_ctx(ctx, 0x400894, 11);
+		gr_def(ctx, 0x400894, 0x00000040);
+		if (nv40_graph_4097(ctx->dev)) {
+			for (i = 0; i < 8; i++)
+				gr_def(ctx, 0x4008a0 + (i * 4), 0x80000000);
+		}
+		cp_ctx(ctx, 0x4008e0, 2);
+		cp_ctx(ctx, 0x4008f8, 2);
+		if (dev_priv->chipset == 0x4c ||
+		    (dev_priv->chipset & 0xf0) == 0x60)
+			cp_ctx(ctx, 0x4009f8, 1);
+	}
+	cp_ctx(ctx, 0x400a00, 73);
+	gr_def(ctx, 0x400b0c, 0x0b0b0b0c);
+	cp_ctx(ctx, 0x401000, 4);
+	cp_ctx(ctx, 0x405004, 1);
+	switch (dev_priv->chipset) {
+	case 0x47:
+	case 0x49:
+	case 0x4b:
+		cp_ctx(ctx, 0x403448, 1);
+		gr_def(ctx, 0x403448, 0x00001010);
+		break;
+	default:
+		cp_ctx(ctx, 0x403440, 1);
+		switch (dev_priv->chipset) {
+		case 0x40:
+			gr_def(ctx, 0x403440, 0x00000010);
+			break;
+		case 0x44:
+		case 0x46:
+		case 0x4a:
+			gr_def(ctx, 0x403440, 0x00003010);
+			break;
+		case 0x41:
+		case 0x42:
+		case 0x43:
+		case 0x4c:
+		case 0x4e:
+		case 0x67:
+		default:
+			gr_def(ctx, 0x403440, 0x00001010);
+			break;
+		}
+		break;
+	}
+}
+
+static void
+nv40_graph_construct_state3d(struct nouveau_grctx *ctx)
+{
+	struct drm_nouveau_private *dev_priv = ctx->dev->dev_private;
+	int i;
+
+	if (dev_priv->chipset == 0x40) {
+		cp_ctx(ctx, 0x401880, 51);
+		gr_def(ctx, 0x401940, 0x00000100);
+	} else
+	if (dev_priv->chipset == 0x46 || dev_priv->chipset == 0x47 ||
+	    dev_priv->chipset == 0x49 || dev_priv->chipset == 0x4b) {
+		cp_ctx(ctx, 0x401880, 32);
+		for (i = 0; i < 16; i++)
+			gr_def(ctx, 0x401880 + (i * 4), 0x00000111);
+		if (dev_priv->chipset == 0x46)
+			cp_ctx(ctx, 0x401900, 16);
+		cp_ctx(ctx, 0x401940, 3);
+	}
+	cp_ctx(ctx, 0x40194c, 18);
+	gr_def(ctx, 0x401954, 0x00000111);
+	gr_def(ctx, 0x401958, 0x00080060);
+	gr_def(ctx, 0x401974, 0x00000080);
+	gr_def(ctx, 0x401978, 0xffff0000);
+	gr_def(ctx, 0x40197c, 0x00000001);
+	gr_def(ctx, 0x401990, 0x46400000);
+	if (dev_priv->chipset == 0x40) {
+		cp_ctx(ctx, 0x4019a0, 2);
+		cp_ctx(ctx, 0x4019ac, 5);
+	} else {
+		cp_ctx(ctx, 0x4019a0, 1);
+		cp_ctx(ctx, 0x4019b4, 3);
+	}
+	gr_def(ctx, 0x4019bc, 0xffff0000);
+	switch (dev_priv->chipset) {
+	case 0x46:
+	case 0x47:
+	case 0x49:
+	case 0x4b:
+		cp_ctx(ctx, 0x4019c0, 18);
+		for (i = 0; i < 16; i++)
+			gr_def(ctx, 0x4019c0 + (i * 4), 0x88888888);
+		break;
+	}
+	cp_ctx(ctx, 0x401a08, 8);
+	gr_def(ctx, 0x401a10, 0x0fff0000);
+	gr_def(ctx, 0x401a14, 0x0fff0000);
+	gr_def(ctx, 0x401a1c, 0x00011100);
+	cp_ctx(ctx, 0x401a2c, 4);
+	cp_ctx(ctx, 0x401a44, 26);
+	for (i = 0; i < 16; i++)
+		gr_def(ctx, 0x401a44 + (i * 4), 0x07ff0000);
+	gr_def(ctx, 0x401a8c, 0x4b7fffff);
+	if (dev_priv->chipset == 0x40) {
+		cp_ctx(ctx, 0x401ab8, 3);
+	} else {
+		cp_ctx(ctx, 0x401ab8, 1);
+		cp_ctx(ctx, 0x401ac0, 1);
+	}
+	cp_ctx(ctx, 0x401ad0, 8);
+	gr_def(ctx, 0x401ad0, 0x30201000);
+	gr_def(ctx, 0x401ad4, 0x70605040);
+	gr_def(ctx, 0x401ad8, 0xb8a89888);
+	gr_def(ctx, 0x401adc, 0xf8e8d8c8);
+	cp_ctx(ctx, 0x401b10, dev_priv->chipset == 0x40 ? 2 : 1);
+	gr_def(ctx, 0x401b10, 0x40100000);
+	cp_ctx(ctx, 0x401b18, dev_priv->chipset == 0x40 ? 6 : 5);
+	gr_def(ctx, 0x401b28, dev_priv->chipset == 0x40 ?
+			      0x00000004 : 0x00000000);
+	cp_ctx(ctx, 0x401b30, 25);
+	gr_def(ctx, 0x401b34, 0x0000ffff);
+	gr_def(ctx, 0x401b68, 0x435185d6);
+	gr_def(ctx, 0x401b6c, 0x2155b699);
+	gr_def(ctx, 0x401b70, 0xfedcba98);
+	gr_def(ctx, 0x401b74, 0x00000098);
+	gr_def(ctx, 0x401b84, 0xffffffff);
+	gr_def(ctx, 0x401b88, 0x00ff7000);
+	gr_def(ctx, 0x401b8c, 0x0000ffff);
+	if (dev_priv->chipset != 0x44 && dev_priv->chipset != 0x4a &&
+	    dev_priv->chipset != 0x4e)
+		cp_ctx(ctx, 0x401b94, 1);
+	cp_ctx(ctx, 0x401b98, 8);
+	gr_def(ctx, 0x401b9c, 0x00ff0000);
+	cp_ctx(ctx, 0x401bc0, 9);
+	gr_def(ctx, 0x401be0, 0x00ffff00);
+	cp_ctx(ctx, 0x401c00, 192);
+	for (i = 0; i < 16; i++) { /* fragment texture units */
+		gr_def(ctx, 0x401c40 + (i * 4), 0x00018488);
+		gr_def(ctx, 0x401c80 + (i * 4), 0x00028202);
+		gr_def(ctx, 0x401d00 + (i * 4), 0x0000aae4);
+		gr_def(ctx, 0x401d40 + (i * 4), 0x01012000);
+		gr_def(ctx, 0x401d80 + (i * 4), 0x00080008);
+		gr_def(ctx, 0x401e00 + (i * 4), 0x00100008);
+	}
+	for (i = 0; i < 4; i++) { /* vertex texture units */
+		gr_def(ctx, 0x401e90 + (i * 4), 0x0001bc80);
+		gr_def(ctx, 0x401ea0 + (i * 4), 0x00000202);
+		gr_def(ctx, 0x401ec0 + (i * 4), 0x00000008);
+		gr_def(ctx, 0x401ee0 + (i * 4), 0x00080008);
+	}
+	cp_ctx(ctx, 0x400f5c, 3);
+	gr_def(ctx, 0x400f5c, 0x00000002);
+	cp_ctx(ctx, 0x400f84, 1);
+}
+
+static void
+nv40_graph_construct_state3d_2(struct nouveau_grctx *ctx)
+{
+	struct drm_nouveau_private *dev_priv = ctx->dev->dev_private;
+	int i;
+
+	cp_ctx(ctx, 0x402000, 1);
+	cp_ctx(ctx, 0x402404, dev_priv->chipset == 0x40 ? 1 : 2);
+	switch (dev_priv->chipset) {
+	case 0x40:
+		gr_def(ctx, 0x402404, 0x00000001);
+		break;
+	case 0x4c:
+	case 0x4e:
+	case 0x67:
+		gr_def(ctx, 0x402404, 0x00000020);
+		break;
+	case 0x46:
+	case 0x49:
+	case 0x4b:
+		gr_def(ctx, 0x402404, 0x00000421);
+		break;
+	default:
+		gr_def(ctx, 0x402404, 0x00000021);
+	}
+	if (dev_priv->chipset != 0x40)
+		gr_def(ctx, 0x402408, 0x030c30c3);
+	switch (dev_priv->chipset) {
+	case 0x44:
+	case 0x46:
+	case 0x4a:
+	case 0x4c:
+	case 0x4e:
+	case 0x67:
+		cp_ctx(ctx, 0x402440, 1);
+		gr_def(ctx, 0x402440, 0x00011001);
+		break;
+	default:
+		break;
+	}
+	cp_ctx(ctx, 0x402480, dev_priv->chipset == 0x40 ? 8 : 9);
+	gr_def(ctx, 0x402488, 0x3e020200);
+	gr_def(ctx, 0x40248c, 0x00ffffff);
+	switch (dev_priv->chipset) {
+	case 0x40:
+		gr_def(ctx, 0x402490, 0x60103f00);
+		break;
+	case 0x47:
+		gr_def(ctx, 0x402490, 0x40103f00);
+		break;
+	case 0x41:
+	case 0x42:
+	case 0x49:
+	case 0x4b:
+		gr_def(ctx, 0x402490, 0x20103f00);
+		break;
+	default:
+		gr_def(ctx, 0x402490, 0x0c103f00);
+		break;
+	}
+	gr_def(ctx, 0x40249c, dev_priv->chipset <= 0x43 ?
+			      0x00020000 : 0x00040000);
+	cp_ctx(ctx, 0x402500, 31);
+	gr_def(ctx, 0x402530, 0x00008100);
+	if (dev_priv->chipset == 0x40)
+		cp_ctx(ctx, 0x40257c, 6);
+	cp_ctx(ctx, 0x402594, 16);
+	cp_ctx(ctx, 0x402800, 17);
+	gr_def(ctx, 0x402800, 0x00000001);
+	switch (dev_priv->chipset) {
+	case 0x47:
+	case 0x49:
+	case 0x4b:
+		cp_ctx(ctx, 0x402864, 1);
+		gr_def(ctx, 0x402864, 0x00001001);
+		cp_ctx(ctx, 0x402870, 3);
+		gr_def(ctx, 0x402878, 0x00000003);
+		if (dev_priv->chipset != 0x47) { /* belong at end!! */
+			cp_ctx(ctx, 0x402900, 1);
+			cp_ctx(ctx, 0x402940, 1);
+			cp_ctx(ctx, 0x402980, 1);
+			cp_ctx(ctx, 0x4029c0, 1);
+			cp_ctx(ctx, 0x402a00, 1);
+			cp_ctx(ctx, 0x402a40, 1);
+			cp_ctx(ctx, 0x402a80, 1);
+			cp_ctx(ctx, 0x402ac0, 1);
+		}
+		break;
+	case 0x40:
+		cp_ctx(ctx, 0x402844, 1);
+		gr_def(ctx, 0x402844, 0x00000001);
+		cp_ctx(ctx, 0x402850, 1);
+		break;
+	default:
+		cp_ctx(ctx, 0x402844, 1);
+		gr_def(ctx, 0x402844, 0x00001001);
+		cp_ctx(ctx, 0x402850, 2);
+		gr_def(ctx, 0x402854, 0x00000003);
+		break;
+	}
+
+	cp_ctx(ctx, 0x402c00, 4);
+	gr_def(ctx, 0x402c00, dev_priv->chipset == 0x40 ?
+			      0x80800001 : 0x00888001);
+	switch (dev_priv->chipset) {
+	case 0x47:
+	case 0x49:
+	case 0x4b:
+		cp_ctx(ctx, 0x402c20, 40);
+		for (i = 0; i < 32; i++)
+			gr_def(ctx, 0x402c40 + (i * 4), 0xffffffff);
+		cp_ctx(ctx, 0x4030b8, 13);
+		gr_def(ctx, 0x4030dc, 0x00000005);
+		gr_def(ctx, 0x4030e8, 0x0000ffff);
+		break;
+	default:
+		cp_ctx(ctx, 0x402c10, 4);
+		if (dev_priv->chipset == 0x40)
+			cp_ctx(ctx, 0x402c20, 36);
+		else
+		if (dev_priv->chipset <= 0x42)
+			cp_ctx(ctx, 0x402c20, 24);
+		else
+		if (dev_priv->chipset <= 0x4a)
+			cp_ctx(ctx, 0x402c20, 16);
+		else
+			cp_ctx(ctx, 0x402c20, 8);
+		cp_ctx(ctx, 0x402cb0, dev_priv->chipset == 0x40 ? 12 : 13);
+		gr_def(ctx, 0x402cd4, 0x00000005);
+		if (dev_priv->chipset != 0x40)
+			gr_def(ctx, 0x402ce0, 0x0000ffff);
+		break;
+	}
+
+	cp_ctx(ctx, 0x403400, dev_priv->chipset == 0x40 ? 4 : 3);
+	cp_ctx(ctx, 0x403410, dev_priv->chipset == 0x40 ? 4 : 3);
+	cp_ctx(ctx, 0x403420, nv40_graph_vs_count(ctx->dev));
+	for (i = 0; i < nv40_graph_vs_count(ctx->dev); i++)
+		gr_def(ctx, 0x403420 + (i * 4), 0x00005555);
+
+	if (dev_priv->chipset != 0x40) {
+		cp_ctx(ctx, 0x403600, 1);
+		gr_def(ctx, 0x403600, 0x00000001);
+	}
+	cp_ctx(ctx, 0x403800, 1);
+
+	cp_ctx(ctx, 0x403c18, 1);
+	gr_def(ctx, 0x403c18, 0x00000001);
+	switch (dev_priv->chipset) {
+	case 0x46:
+	case 0x47:
+	case 0x49:
+	case 0x4b:
+		cp_ctx(ctx, 0x405018, 1);
+		gr_def(ctx, 0x405018, 0x08e00001);
+		cp_ctx(ctx, 0x405c24, 1);
+		gr_def(ctx, 0x405c24, 0x000e3000);
+		break;
+	}
+	if (dev_priv->chipset != 0x4e)
+		cp_ctx(ctx, 0x405800, 11);
+	cp_ctx(ctx, 0x407000, 1);
+}
+
+static void
+nv40_graph_construct_state3d_3(struct nouveau_grctx *ctx)
+{
+	int len = nv40_graph_4097(ctx->dev) ? 0x0684 : 0x0084;
+
+	cp_out (ctx, 0x300000);
+	cp_lsr (ctx, len - 4);
+	cp_bra (ctx, SWAP_DIRECTION, SAVE, cp_swap_state3d_3_is_save);
+	cp_lsr (ctx, len);
+	cp_name(ctx, cp_swap_state3d_3_is_save);
+	cp_out (ctx, 0x800001);
+
+	ctx->ctxvals_pos += len;
+}
+
+static void
+nv40_graph_construct_shader(struct nouveau_grctx *ctx)
+{
+	struct drm_device *dev = ctx->dev;
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	struct nouveau_gpuobj *obj = ctx->data;
+	int vs, vs_nr, vs_len, vs_nr_b0, vs_nr_b1, b0_offset, b1_offset;
+	int offset, i;
+
+	vs_nr    = nv40_graph_vs_count(ctx->dev);
+	vs_nr_b0 = 363;
+	vs_nr_b1 = dev_priv->chipset == 0x40 ? 128 : 64;
+	if (dev_priv->chipset == 0x40) {
+		b0_offset = 0x2200/4; /* 33a0 */
+		b1_offset = 0x55a0/4; /* 1500 */
+		vs_len = 0x6aa0/4;
+	} else
+	if (dev_priv->chipset == 0x41 || dev_priv->chipset == 0x42) {
+		b0_offset = 0x2200/4; /* 2200 */
+		b1_offset = 0x4400/4; /* 0b00 */
+		vs_len = 0x4f00/4;
+	} else {
+		b0_offset = 0x1d40/4; /* 2200 */
+		b1_offset = 0x3f40/4; /* 0b00 : 0a40 */
+		vs_len = nv40_graph_4097(dev) ? 0x4a40/4 : 0x4980/4;
+	}
+
+	cp_lsr(ctx, vs_len * vs_nr + 0x300/4);
+	cp_out(ctx, nv40_graph_4097(dev) ? 0x800041 : 0x800029);
+
+	offset = ctx->ctxvals_pos;
+	ctx->ctxvals_pos += (0x0300/4 + (vs_nr * vs_len));
+
+	if (ctx->mode != NOUVEAU_GRCTX_VALS)
+		return;
+
+	offset += 0x0280/4;
+	for (i = 0; i < 16; i++, offset += 2)
+		nv_wo32(dev, obj, offset, 0x3f800000);
+
+	for (vs = 0; vs < vs_nr; vs++, offset += vs_len) {
+		for (i = 0; i < vs_nr_b0 * 6; i += 6)
+			nv_wo32(dev, obj, offset + b0_offset + i, 0x00000001);
+		for (i = 0; i < vs_nr_b1 * 4; i += 4)
+			nv_wo32(dev, obj, offset + b1_offset + i, 0x3f800000);
+	}
+}
+
+void
+nv40_grctx_init(struct nouveau_grctx *ctx)
+{
+	/* decide whether we're loading/unloading the context */
+	cp_bra (ctx, AUTO_SAVE, PENDING, cp_setup_save);
+	cp_bra (ctx, USER_SAVE, PENDING, cp_setup_save);
+
+	cp_name(ctx, cp_check_load);
+	cp_bra (ctx, AUTO_LOAD, PENDING, cp_setup_auto_load);
+	cp_bra (ctx, USER_LOAD, PENDING, cp_setup_load);
+	cp_bra (ctx, ALWAYS, TRUE, cp_exit);
+
+	/* setup for context load */
+	cp_name(ctx, cp_setup_auto_load);
+	cp_wait(ctx, STATUS, IDLE);
+	cp_out (ctx, CP_NEXT_TO_SWAP);
+	cp_name(ctx, cp_setup_load);
+	cp_wait(ctx, STATUS, IDLE);
+	cp_set (ctx, SWAP_DIRECTION, LOAD);
+	cp_out (ctx, 0x00910880); /* ?? */
+	cp_out (ctx, 0x00901ffe); /* ?? */
+	cp_out (ctx, 0x01940000); /* ?? */
+	cp_lsr (ctx, 0x20);
+	cp_out (ctx, 0x0060000b); /* ?? */
+	cp_wait(ctx, UNK57, CLEAR);
+	cp_out (ctx, 0x0060000c); /* ?? */
+	cp_bra (ctx, ALWAYS, TRUE, cp_swap_state);
+
+	/* setup for context save */
+	cp_name(ctx, cp_setup_save);
+	cp_set (ctx, SWAP_DIRECTION, SAVE);
+
+	/* general PGRAPH state */
+	cp_name(ctx, cp_swap_state);
+	cp_pos (ctx, 0x00020/4);
+	nv40_graph_construct_general(ctx);
+	cp_wait(ctx, STATUS, IDLE);
+
+	/* 3D state, block 1 */
+	cp_bra (ctx, UNK54, CLEAR, cp_prepare_exit);
+	nv40_graph_construct_state3d(ctx);
+	cp_wait(ctx, STATUS, IDLE);
+
+	/* 3D state, block 2 */
+	nv40_graph_construct_state3d_2(ctx);
+
+	/* Some other block of "random" state */
+	nv40_graph_construct_state3d_3(ctx);
+
+	/* Per-vertex shader state */
+	cp_pos (ctx, ctx->ctxvals_pos);
+	nv40_graph_construct_shader(ctx);
+
+	/* pre-exit state updates */
+	cp_name(ctx, cp_prepare_exit);
+	cp_bra (ctx, SWAP_DIRECTION, SAVE, cp_check_load);
+	cp_bra (ctx, USER_SAVE, PENDING, cp_exit);
+	cp_out (ctx, CP_NEXT_TO_CURRENT);
+
+	cp_name(ctx, cp_exit);
+	cp_set (ctx, USER_SAVE, NOT_PENDING);
+	cp_set (ctx, USER_LOAD, NOT_PENDING);
+	cp_out (ctx, CP_END);
+}
+
diff --git a/drivers/gpu/drm/nouveau/nv50_crtc.c b/drivers/gpu/drm/nouveau/nv50_crtc.c
index 768fb4f..118d328 100644
--- a/drivers/gpu/drm/nouveau/nv50_crtc.c
+++ b/drivers/gpu/drm/nouveau/nv50_crtc.c
@@ -45,7 +45,7 @@ nv50_crtc_lut_load(struct drm_crtc *crtc)
 	void __iomem *lut = nvbo_kmap_obj_iovirtual(nv_crtc->lut.nvbo);
 	int i;
 
-	NV_DEBUG(crtc->dev, "\n");
+	NV_DEBUG_KMS(crtc->dev, "\n");
 
 	for (i = 0; i < 256; i++) {
 		writew(nv_crtc->lut.r[i] >> 2, lut + 8*i + 0);
@@ -68,8 +68,8 @@ nv50_crtc_blank(struct nouveau_crtc *nv_crtc, bool blanked)
 	struct nouveau_channel *evo = dev_priv->evo;
 	int index = nv_crtc->index, ret;
 
-	NV_DEBUG(dev, "index %d\n", nv_crtc->index);
-	NV_DEBUG(dev, "%s\n", blanked ? "blanked" : "unblanked");
+	NV_DEBUG_KMS(dev, "index %d\n", nv_crtc->index);
+	NV_DEBUG_KMS(dev, "%s\n", blanked ? "blanked" : "unblanked");
 
 	if (blanked) {
 		nv_crtc->cursor.hide(nv_crtc, false);
@@ -90,7 +90,6 @@ nv50_crtc_blank(struct nouveau_crtc *nv_crtc, bool blanked)
 		BEGIN_RING(evo, 0, NV50_EVO_CRTC(index, FB_DMA), 1);
 		OUT_RING(evo, NV50_EVO_CRTC_FB_DMA_HANDLE_NONE);
 	} else {
-		nv_crtc->cursor.set_offset(nv_crtc, nv_crtc->cursor.offset);
 		if (nv_crtc->cursor.visible)
 			nv_crtc->cursor.show(nv_crtc, false);
 		else
@@ -140,7 +139,7 @@ nv50_crtc_set_dither(struct nouveau_crtc *nv_crtc, bool on, bool update)
 	struct nouveau_channel *evo = dev_priv->evo;
 	int ret;
 
-	NV_DEBUG(dev, "\n");
+	NV_DEBUG_KMS(dev, "\n");
 
 	ret = RING_SPACE(evo, 2 + (update ? 2 : 0));
 	if (ret) {
@@ -194,7 +193,7 @@ nv50_crtc_set_scale(struct nouveau_crtc *nv_crtc, int scaling_mode, bool update)
 	uint32_t outX, outY, horiz, vert;
 	int ret;
 
-	NV_DEBUG(dev, "\n");
+	NV_DEBUG_KMS(dev, "\n");
 
 	switch (scaling_mode) {
 	case DRM_MODE_SCALE_NONE:
@@ -275,23 +274,6 @@ nv50_crtc_set_clock(struct drm_device *dev, int head, int pclk)
 	if (ret)
 		return ret;
 
-	/*XXX: need a vbios image from one of these cards to look at
-	 *     rather than just guessing.  P isn't log2P on these
-	 *     cards, it's uncertain at this stage what the PLL
-	 *     limits tables have to say about these chips.
-	 *
-	 *     getPLL_single will need some modifications to calculate
-	 *     this properly too.
-	 *
-	 *     for the moment, hacking up the PLL limits table with
-	 *     a log2 value matching nv's maximum.
-	 */
-	if (!limits.vco2.maxfreq) {
-		NV_ERROR(dev, "single-stage PLL, please report: %d!!\n",
-			 limits.max_usable_log2p);
-		limits.max_usable_log2p = 6;
-	}
-
 	ret = nouveau_calc_pll_mnp(dev, &limits, pclk, &pll);
 	if (ret <= 0)
 		return ret;
@@ -307,7 +289,7 @@ nv50_crtc_set_clock(struct drm_device *dev, int head, int pclk)
 		reg1 = nv_rd32(dev, pll_reg + 4) & 0xffc00000;
 		nv_wr32(dev, pll_reg, 0x50000610);
 		nv_wr32(dev, pll_reg + 4, reg1 |
-			(((1<<pll.log2P)-1) << 16) | (pll.M1 << 8) | pll.N1);
+			(pll.log2P << 16) | (pll.M1 << 8) | pll.N1);
 	}
 
 	return 0;
@@ -319,7 +301,7 @@ nv50_crtc_destroy(struct drm_crtc *crtc)
 	struct drm_device *dev = crtc->dev;
 	struct nouveau_crtc *nv_crtc = nouveau_crtc(crtc);
 
-	NV_DEBUG(dev, "\n");
+	NV_DEBUG_KMS(dev, "\n");
 
 	if (!crtc)
 		return;
@@ -368,9 +350,8 @@ nv50_crtc_cursor_set(struct drm_crtc *crtc, struct drm_file *file_priv,
 
 	nouveau_bo_unmap(cursor);
 
-	nv_crtc->cursor.offset  = nv_crtc->cursor.nvbo->bo.offset;
-	nv_crtc->cursor.offset -= dev_priv->vm_vram_base;
-	nv_crtc->cursor.set_offset(nv_crtc, nv_crtc->cursor.offset);
+	nv_crtc->cursor.set_offset(nv_crtc, nv_crtc->cursor.nvbo->bo.offset -
+					    dev_priv->vm_vram_base);
 	nv_crtc->cursor.show(nv_crtc, true);
 
 out:
@@ -452,7 +433,7 @@ nv50_crtc_prepare(struct drm_crtc *crtc)
 	struct drm_device *dev = crtc->dev;
 	struct drm_encoder *encoder;
 
-	NV_DEBUG(dev, "index %d\n", nv_crtc->index);
+	NV_DEBUG_KMS(dev, "index %d\n", nv_crtc->index);
 
 	/* Disconnect all unused encoders. */
 	list_for_each_entry(encoder, &dev->mode_config.encoder_list, head) {
@@ -477,7 +458,7 @@ nv50_crtc_commit(struct drm_crtc *crtc)
 	struct nouveau_crtc *nv_crtc = nouveau_crtc(crtc);
 	int ret;
 
-	NV_DEBUG(dev, "index %d\n", nv_crtc->index);
+	NV_DEBUG_KMS(dev, "index %d\n", nv_crtc->index);
 
 	nv50_crtc_blank(nv_crtc, false);
 
@@ -516,7 +497,7 @@ nv50_crtc_do_mode_set_base(struct drm_crtc *crtc, int x, int y,
 	struct nouveau_framebuffer *fb = nouveau_framebuffer(drm_fb);
 	int ret, format;
 
-	NV_DEBUG(dev, "index %d\n", nv_crtc->index);
+	NV_DEBUG_KMS(dev, "index %d\n", nv_crtc->index);
 
 	switch (drm_fb->depth) {
 	case  8:
@@ -631,7 +612,7 @@ nv50_crtc_mode_set(struct drm_crtc *crtc, struct drm_display_mode *mode,
 
 	*nv_crtc->mode = *adjusted_mode;
 
-	NV_DEBUG(dev, "index %d\n", nv_crtc->index);
+	NV_DEBUG_KMS(dev, "index %d\n", nv_crtc->index);
 
 	hsync_dur = adjusted_mode->hsync_end - adjusted_mode->hsync_start;
 	vsync_dur = adjusted_mode->vsync_end - adjusted_mode->vsync_start;
@@ -725,7 +706,7 @@ nv50_crtc_create(struct drm_device *dev, int index)
 	struct nouveau_crtc *nv_crtc = NULL;
 	int ret, i;
 
-	NV_DEBUG(dev, "\n");
+	NV_DEBUG_KMS(dev, "\n");
 
 	nv_crtc = kzalloc(sizeof(*nv_crtc), GFP_KERNEL);
 	if (!nv_crtc)
diff --git a/drivers/gpu/drm/nouveau/nv50_cursor.c b/drivers/gpu/drm/nouveau/nv50_cursor.c
index aa7baad..753e723 100644
--- a/drivers/gpu/drm/nouveau/nv50_cursor.c
+++ b/drivers/gpu/drm/nouveau/nv50_cursor.c
@@ -34,55 +34,63 @@
 #include "nv50_display.h"
 
 static void
-nv50_cursor_show(struct nouveau_crtc *crtc, bool update)
+nv50_cursor_show(struct nouveau_crtc *nv_crtc, bool update)
 {
-	struct drm_nouveau_private *dev_priv = crtc->base.dev->dev_private;
+	struct drm_nouveau_private *dev_priv = nv_crtc->base.dev->dev_private;
 	struct nouveau_channel *evo = dev_priv->evo;
-	struct drm_device *dev = crtc->base.dev;
+	struct drm_device *dev = nv_crtc->base.dev;
 	int ret;
 
-	NV_DEBUG(dev, "\n");
+	NV_DEBUG_KMS(dev, "\n");
 
-	ret = RING_SPACE(evo, (dev_priv->chipset != 0x50 ? 4 : 2) + update * 2);
+	if (update && nv_crtc->cursor.visible)
+		return;
+
+	ret = RING_SPACE(evo, (dev_priv->chipset != 0x50 ? 5 : 3) + update * 2);
 	if (ret) {
 		NV_ERROR(dev, "no space while unhiding cursor\n");
 		return;
 	}
 
 	if (dev_priv->chipset != 0x50) {
-		BEGIN_RING(evo, 0, NV84_EVO_CRTC(crtc->index, CURSOR_DMA), 1);
+		BEGIN_RING(evo, 0, NV84_EVO_CRTC(nv_crtc->index, CURSOR_DMA), 1);
 		OUT_RING(evo, NvEvoVRAM);
 	}
-	BEGIN_RING(evo, 0, NV50_EVO_CRTC(crtc->index, CURSOR_CTRL), 1);
+	BEGIN_RING(evo, 0, NV50_EVO_CRTC(nv_crtc->index, CURSOR_CTRL), 2);
 	OUT_RING(evo, NV50_EVO_CRTC_CURSOR_CTRL_SHOW);
+	OUT_RING(evo, nv_crtc->cursor.offset >> 8);
 
 	if (update) {
 		BEGIN_RING(evo, 0, NV50_EVO_UPDATE, 1);
 		OUT_RING(evo, 0);
 		FIRE_RING(evo);
-		crtc->cursor.visible = true;
+		nv_crtc->cursor.visible = true;
 	}
 }
 
 static void
-nv50_cursor_hide(struct nouveau_crtc *crtc, bool update)
+nv50_cursor_hide(struct nouveau_crtc *nv_crtc, bool update)
 {
-	struct drm_nouveau_private *dev_priv = crtc->base.dev->dev_private;
+	struct drm_nouveau_private *dev_priv = nv_crtc->base.dev->dev_private;
 	struct nouveau_channel *evo = dev_priv->evo;
-	struct drm_device *dev = crtc->base.dev;
+	struct drm_device *dev = nv_crtc->base.dev;
 	int ret;
 
-	NV_DEBUG(dev, "\n");
+	NV_DEBUG_KMS(dev, "\n");
 
-	ret = RING_SPACE(evo, (dev_priv->chipset != 0x50 ? 4 : 2) + update * 2);
+	if (update && !nv_crtc->cursor.visible)
+		return;
+
+	ret = RING_SPACE(evo, (dev_priv->chipset != 0x50 ? 5 : 3) + update * 2);
 	if (ret) {
 		NV_ERROR(dev, "no space while hiding cursor\n");
 		return;
 	}
-	BEGIN_RING(evo, 0, NV50_EVO_CRTC(crtc->index, CURSOR_CTRL), 1);
+	BEGIN_RING(evo, 0, NV50_EVO_CRTC(nv_crtc->index, CURSOR_CTRL), 2);
 	OUT_RING(evo, NV50_EVO_CRTC_CURSOR_CTRL_HIDE);
+	OUT_RING(evo, 0);
 	if (dev_priv->chipset != 0x50) {
-		BEGIN_RING(evo, 0, NV84_EVO_CRTC(crtc->index, CURSOR_DMA), 1);
+		BEGIN_RING(evo, 0, NV84_EVO_CRTC(nv_crtc->index, CURSOR_DMA), 1);
 		OUT_RING(evo, NV84_EVO_CRTC_CURSOR_DMA_HANDLE_NONE);
 	}
 
@@ -90,57 +98,52 @@ nv50_cursor_hide(struct nouveau_crtc *crtc, bool update)
 		BEGIN_RING(evo, 0, NV50_EVO_UPDATE, 1);
 		OUT_RING(evo, 0);
 		FIRE_RING(evo);
-		crtc->cursor.visible = false;
+		nv_crtc->cursor.visible = false;
 	}
 }
 
 static void
-nv50_cursor_set_pos(struct nouveau_crtc *crtc, int x, int y)
+nv50_cursor_set_pos(struct nouveau_crtc *nv_crtc, int x, int y)
 {
-	struct drm_device *dev = crtc->base.dev;
+	struct drm_device *dev = nv_crtc->base.dev;
 
-	nv_wr32(dev, NV50_PDISPLAY_CURSOR_USER_POS(crtc->index),
+	nv_wr32(dev, NV50_PDISPLAY_CURSOR_USER_POS(nv_crtc->index),
 		((y & 0xFFFF) << 16) | (x & 0xFFFF));
 	/* Needed to make the cursor move. */
-	nv_wr32(dev, NV50_PDISPLAY_CURSOR_USER_POS_CTRL(crtc->index), 0);
+	nv_wr32(dev, NV50_PDISPLAY_CURSOR_USER_POS_CTRL(nv_crtc->index), 0);
 }
 
 static void
-nv50_cursor_set_offset(struct nouveau_crtc *crtc, uint32_t offset)
+nv50_cursor_set_offset(struct nouveau_crtc *nv_crtc, uint32_t offset)
 {
-	struct drm_nouveau_private *dev_priv = crtc->base.dev->dev_private;
-	struct nouveau_channel *evo = dev_priv->evo;
-	struct drm_device *dev = crtc->base.dev;
-	int ret;
-
-	NV_DEBUG(dev, "\n");
-
-	ret = RING_SPACE(evo, 2);
-	if (ret) {
-		NV_ERROR(dev, "no space while setting cursor image\n");
+	NV_DEBUG_KMS(nv_crtc->base.dev, "\n");
+	if (offset == nv_crtc->cursor.offset)
 		return;
+
+	nv_crtc->cursor.offset = offset;
+	if (nv_crtc->cursor.visible) {
+		nv_crtc->cursor.visible = false;
+		nv_crtc->cursor.show(nv_crtc, true);
 	}
-	BEGIN_RING(evo, 0, NV50_EVO_CRTC(crtc->index, CURSOR_OFFSET), 1);
-	OUT_RING(evo, offset >> 8);
 }
 
 int
-nv50_cursor_init(struct nouveau_crtc *crtc)
+nv50_cursor_init(struct nouveau_crtc *nv_crtc)
 {
-	crtc->cursor.set_offset = nv50_cursor_set_offset;
-	crtc->cursor.set_pos = nv50_cursor_set_pos;
-	crtc->cursor.hide = nv50_cursor_hide;
-	crtc->cursor.show = nv50_cursor_show;
+	nv_crtc->cursor.set_offset = nv50_cursor_set_offset;
+	nv_crtc->cursor.set_pos = nv50_cursor_set_pos;
+	nv_crtc->cursor.hide = nv50_cursor_hide;
+	nv_crtc->cursor.show = nv50_cursor_show;
 	return 0;
 }
 
 void
-nv50_cursor_fini(struct nouveau_crtc *crtc)
+nv50_cursor_fini(struct nouveau_crtc *nv_crtc)
 {
-	struct drm_device *dev = crtc->base.dev;
-	int idx = crtc->index;
+	struct drm_device *dev = nv_crtc->base.dev;
+	int idx = nv_crtc->index;
 
-	NV_DEBUG(dev, "\n");
+	NV_DEBUG_KMS(dev, "\n");
 
 	nv_wr32(dev, NV50_PDISPLAY_CURSOR_CURSOR_CTRL2(idx), 0);
 	if (!nv_wait(NV50_PDISPLAY_CURSOR_CURSOR_CTRL2(idx),
diff --git a/drivers/gpu/drm/nouveau/nv50_dac.c b/drivers/gpu/drm/nouveau/nv50_dac.c
index fb5838e..f08f042 100644
--- a/drivers/gpu/drm/nouveau/nv50_dac.c
+++ b/drivers/gpu/drm/nouveau/nv50_dac.c
@@ -44,7 +44,7 @@ nv50_dac_disconnect(struct nouveau_encoder *nv_encoder)
 	struct nouveau_channel *evo = dev_priv->evo;
 	int ret;
 
-	NV_DEBUG(dev, "Disconnecting DAC %d\n", nv_encoder->or);
+	NV_DEBUG_KMS(dev, "Disconnecting DAC %d\n", nv_encoder->or);
 
 	ret = RING_SPACE(evo, 2);
 	if (ret) {
@@ -81,11 +81,11 @@ nv50_dac_detect(struct drm_encoder *encoder, struct drm_connector *connector)
 	/* Use bios provided value if possible. */
 	if (dev_priv->vbios->dactestval) {
 		load_pattern = dev_priv->vbios->dactestval;
-		NV_DEBUG(dev, "Using bios provided load_pattern of %d\n",
+		NV_DEBUG_KMS(dev, "Using bios provided load_pattern of %d\n",
 			  load_pattern);
 	} else {
 		load_pattern = 340;
-		NV_DEBUG(dev, "Using default load_pattern of %d\n",
+		NV_DEBUG_KMS(dev, "Using default load_pattern of %d\n",
 			 load_pattern);
 	}
 
@@ -103,9 +103,9 @@ nv50_dac_detect(struct drm_encoder *encoder, struct drm_connector *connector)
 		status = connector_status_connected;
 
 	if (status == connector_status_connected)
-		NV_DEBUG(dev, "Load was detected on output with or %d\n", or);
+		NV_DEBUG_KMS(dev, "Load was detected on output with or %d\n", or);
 	else
-		NV_DEBUG(dev, "Load was not detected on output with or %d\n", or);
+		NV_DEBUG_KMS(dev, "Load was not detected on output with or %d\n", or);
 
 	return status;
 }
@@ -118,7 +118,7 @@ nv50_dac_dpms(struct drm_encoder *encoder, int mode)
 	uint32_t val;
 	int or = nv_encoder->or;
 
-	NV_DEBUG(dev, "or %d mode %d\n", or, mode);
+	NV_DEBUG_KMS(dev, "or %d mode %d\n", or, mode);
 
 	/* wait for it to be done */
 	if (!nv_wait(NV50_PDISPLAY_DAC_DPMS_CTRL(or),
@@ -173,7 +173,7 @@ nv50_dac_mode_fixup(struct drm_encoder *encoder, struct drm_display_mode *mode,
 	struct nouveau_encoder *nv_encoder = nouveau_encoder(encoder);
 	struct nouveau_connector *connector;
 
-	NV_DEBUG(encoder->dev, "or %d\n", nv_encoder->or);
+	NV_DEBUG_KMS(encoder->dev, "or %d\n", nv_encoder->or);
 
 	connector = nouveau_encoder_connector_get(nv_encoder);
 	if (!connector) {
@@ -213,7 +213,7 @@ nv50_dac_mode_set(struct drm_encoder *encoder, struct drm_display_mode *mode,
 	uint32_t mode_ctl = 0, mode_ctl2 = 0;
 	int ret;
 
-	NV_DEBUG(dev, "or %d\n", nv_encoder->or);
+	NV_DEBUG_KMS(dev, "or %d\n", nv_encoder->or);
 
 	nv50_dac_dpms(encoder, DRM_MODE_DPMS_ON);
 
@@ -264,7 +264,7 @@ nv50_dac_destroy(struct drm_encoder *encoder)
 	if (!encoder)
 		return;
 
-	NV_DEBUG(encoder->dev, "\n");
+	NV_DEBUG_KMS(encoder->dev, "\n");
 
 	drm_encoder_cleanup(encoder);
 	kfree(nv_encoder);
@@ -280,7 +280,7 @@ nv50_dac_create(struct drm_device *dev, struct dcb_entry *entry)
 	struct nouveau_encoder *nv_encoder;
 	struct drm_encoder *encoder;
 
-	NV_DEBUG(dev, "\n");
+	NV_DEBUG_KMS(dev, "\n");
 	NV_INFO(dev, "Detected a DAC output\n");
 
 	nv_encoder = kzalloc(sizeof(*nv_encoder), GFP_KERNEL);
diff --git a/drivers/gpu/drm/nouveau/nv50_display.c b/drivers/gpu/drm/nouveau/nv50_display.c
index c95efbc..90f0bf5 100644
--- a/drivers/gpu/drm/nouveau/nv50_display.c
+++ b/drivers/gpu/drm/nouveau/nv50_display.c
@@ -183,11 +183,12 @@ nv50_display_init(struct drm_device *dev)
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	struct nouveau_timer_engine *ptimer = &dev_priv->engine.timer;
 	struct nouveau_channel *evo = dev_priv->evo;
-	uint32_t val, ram_amount;
+	struct drm_connector *connector;
+	uint32_t val, ram_amount, hpd_en[2];
 	uint64_t start;
 	int ret, i;
 
-	NV_DEBUG(dev, "\n");
+	NV_DEBUG_KMS(dev, "\n");
 
 	nv_wr32(dev, 0x00610184, nv_rd32(dev, 0x00614004));
 	/*
@@ -195,27 +196,31 @@ nv50_display_init(struct drm_device *dev)
 	 * that enables things.
 	 */
 	/* CRTC? */
-	nv_wr32(dev, 0x00610190 + 0 * 0x10, nv_rd32(dev, 0x00616100 + 0 * 0x800));
-	nv_wr32(dev, 0x00610190 + 1 * 0x10, nv_rd32(dev, 0x00616100 + 1 * 0x800));
-	nv_wr32(dev, 0x00610194 + 0 * 0x10, nv_rd32(dev, 0x00616104 + 0 * 0x800));
-	nv_wr32(dev, 0x00610194 + 1 * 0x10, nv_rd32(dev, 0x00616104 + 1 * 0x800));
-	nv_wr32(dev, 0x00610198 + 0 * 0x10, nv_rd32(dev, 0x00616108 + 0 * 0x800));
-	nv_wr32(dev, 0x00610198 + 1 * 0x10, nv_rd32(dev, 0x00616108 + 1 * 0x800));
-	nv_wr32(dev, 0x0061019c + 0 * 0x10, nv_rd32(dev, 0x0061610c + 0 * 0x800));
-	nv_wr32(dev, 0x0061019c + 1 * 0x10, nv_rd32(dev, 0x0061610c + 1 * 0x800));
+	for (i = 0; i < 2; i++) {
+		val = nv_rd32(dev, 0x00616100 + (i * 0x800));
+		nv_wr32(dev, 0x00610190 + (i * 0x10), val);
+		val = nv_rd32(dev, 0x00616104 + (i * 0x800));
+		nv_wr32(dev, 0x00610194 + (i * 0x10), val);
+		val = nv_rd32(dev, 0x00616108 + (i * 0x800));
+		nv_wr32(dev, 0x00610198 + (i * 0x10), val);
+		val = nv_rd32(dev, 0x0061610c + (i * 0x800));
+		nv_wr32(dev, 0x0061019c + (i * 0x10), val);
+	}
 	/* DAC */
-	nv_wr32(dev, 0x006101d0 + 0 * 0x4, nv_rd32(dev, 0x0061a000 + 0 * 0x800));
-	nv_wr32(dev, 0x006101d0 + 1 * 0x4, nv_rd32(dev, 0x0061a000 + 1 * 0x800));
-	nv_wr32(dev, 0x006101d0 + 2 * 0x4, nv_rd32(dev, 0x0061a000 + 2 * 0x800));
+	for (i = 0; i < 3; i++) {
+		val = nv_rd32(dev, 0x0061a000 + (i * 0x800));
+		nv_wr32(dev, 0x006101d0 + (i * 0x04), val);
+	}
 	/* SOR */
-	nv_wr32(dev, 0x006101e0 + 0 * 0x4, nv_rd32(dev, 0x0061c000 + 0 * 0x800));
-	nv_wr32(dev, 0x006101e0 + 1 * 0x4, nv_rd32(dev, 0x0061c000 + 1 * 0x800));
-	nv_wr32(dev, 0x006101e0 + 2 * 0x4, nv_rd32(dev, 0x0061c000 + 2 * 0x800));
-	nv_wr32(dev, 0x006101e0 + 3 * 0x4, nv_rd32(dev, 0x0061c000 + 3 * 0x800));
+	for (i = 0; i < 4; i++) {
+		val = nv_rd32(dev, 0x0061c000 + (i * 0x800));
+		nv_wr32(dev, 0x006101e0 + (i * 0x04), val);
+	}
 	/* Something not yet in use, tv-out maybe. */
-	nv_wr32(dev, 0x006101f0 + 0 * 0x4, nv_rd32(dev, 0x0061e000 + 0 * 0x800));
-	nv_wr32(dev, 0x006101f0 + 1 * 0x4, nv_rd32(dev, 0x0061e000 + 1 * 0x800));
-	nv_wr32(dev, 0x006101f0 + 2 * 0x4, nv_rd32(dev, 0x0061e000 + 2 * 0x800));
+	for (i = 0; i < 3; i++) {
+		val = nv_rd32(dev, 0x0061e000 + (i * 0x800));
+		nv_wr32(dev, 0x006101f0 + (i * 0x04), val);
+	}
 
 	for (i = 0; i < 3; i++) {
 		nv_wr32(dev, NV50_PDISPLAY_DAC_DPMS_CTRL(i), 0x00550000 |
@@ -227,7 +232,7 @@ nv50_display_init(struct drm_device *dev)
 	nv_wr32(dev, NV50_PDISPLAY_UNK_380, 0);
 	/* RAM is clamped to 256 MiB. */
 	ram_amount = nouveau_mem_fb_amount(dev);
-	NV_DEBUG(dev, "ram_amount %d\n", ram_amount);
+	NV_DEBUG_KMS(dev, "ram_amount %d\n", ram_amount);
 	if (ram_amount > 256*1024*1024)
 		ram_amount = 256*1024*1024;
 	nv_wr32(dev, NV50_PDISPLAY_RAM_AMOUNT, ram_amount - 1);
@@ -360,9 +365,29 @@ nv50_display_init(struct drm_device *dev)
 					     NV50_PDISPLAY_INTR_EN_CLK_UNK40));
 
 	/* enable hotplug interrupts */
-	nv_wr32(dev, NV50_PCONNECTOR_HOTPLUG_CTRL, 0x7FFF7FFF);
-	/* nv_wr32(dev, NV50_PCONNECTOR_HOTPLUG_INTR, 0x7FFF7FFF); */
+	hpd_en[0] = hpd_en[1] = 0;
+	list_for_each_entry(connector, &dev->mode_config.connector_list, head) {
+		struct nouveau_connector *conn = nouveau_connector(connector);
+		struct dcb_gpio_entry *gpio;
+
+		if (connector->connector_type != DRM_MODE_CONNECTOR_DVII &&
+		    connector->connector_type != DRM_MODE_CONNECTOR_DVID &&
+		    connector->connector_type != DRM_MODE_CONNECTOR_DisplayPort)
+			continue;
 
+		gpio = nouveau_bios_gpio_entry(dev, conn->dcb->gpio_tag);
+		if (!gpio)
+			continue;
+
+		hpd_en[gpio->line >> 4] |= (0x00010001 << (gpio->line & 0xf));
+	}
+
+	nv_wr32(dev, 0xe054, 0xffffffff);
+	nv_wr32(dev, 0xe050, hpd_en[0]);
+	if (dev_priv->chipset >= 0x90) {
+		nv_wr32(dev, 0xe074, 0xffffffff);
+		nv_wr32(dev, 0xe070, hpd_en[1]);
+	}
 
 	return 0;
 }
@@ -373,7 +398,7 @@ static int nv50_display_disable(struct drm_device *dev)
 	struct drm_crtc *drm_crtc;
 	int ret, i;
 
-	NV_DEBUG(dev, "\n");
+	NV_DEBUG_KMS(dev, "\n");
 
 	list_for_each_entry(drm_crtc, &dev->mode_config.crtc_list, head) {
 		struct nouveau_crtc *crtc = nouveau_crtc(drm_crtc);
@@ -428,8 +453,12 @@ static int nv50_display_disable(struct drm_device *dev)
 	nv_wr32(dev, NV50_PDISPLAY_INTR_EN, 0x00000000);
 
 	/* disable hotplug interrupts */
-	nv_wr32(dev, NV50_PCONNECTOR_HOTPLUG_INTR, 0);
-
+	nv_wr32(dev, 0xe054, 0xffffffff);
+	nv_wr32(dev, 0xe050, 0x00000000);
+	if (dev_priv->chipset >= 0x90) {
+		nv_wr32(dev, 0xe074, 0xffffffff);
+		nv_wr32(dev, 0xe070, 0x00000000);
+	}
 	return 0;
 }
 
@@ -440,7 +469,7 @@ int nv50_display_create(struct drm_device *dev)
 	uint32_t connector[16] = {};
 	int ret, i;
 
-	NV_DEBUG(dev, "\n");
+	NV_DEBUG_KMS(dev, "\n");
 
 	/* init basic kernel modesetting */
 	drm_mode_config_init(dev);
@@ -474,6 +503,12 @@ int nv50_display_create(struct drm_device *dev)
 	for (i = 0 ; i < dcb->entries; i++) {
 		struct dcb_entry *entry = &dcb->entry[i];
 
+		if (entry->location != DCB_LOC_ON_CHIP) {
+			NV_WARN(dev, "Off-chip encoder %d/%d unsupported\n",
+				entry->type, ffs(entry->or) - 1);
+			continue;
+		}
+
 		switch (entry->type) {
 		case OUTPUT_TMDS:
 		case OUTPUT_LVDS:
@@ -538,7 +573,7 @@ int nv50_display_destroy(struct drm_device *dev)
 {
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
 
-	NV_DEBUG(dev, "\n");
+	NV_DEBUG_KMS(dev, "\n");
 
 	drm_mode_config_cleanup(dev);
 
@@ -574,7 +609,7 @@ nv50_display_irq_head(struct drm_device *dev, int *phead,
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	uint32_t unk30 = nv_rd32(dev, NV50_PDISPLAY_UNK30_CTRL);
 	uint32_t dac = 0, sor = 0;
-	int head, i, or;
+	int head, i, or = 0, type = OUTPUT_ANY;
 
 	/* We're assuming that head 0 *or* head 1 will be active here,
 	 * and not both.  I'm not sure if the hw will even signal both
@@ -582,67 +617,68 @@ nv50_display_irq_head(struct drm_device *dev, int *phead,
 	 * CRTC separately, and submission will be blocked by the GPU
 	 * until we handle each in turn.
 	 */
-	NV_DEBUG(dev, "0x610030: 0x%08x\n", unk30);
+	NV_DEBUG_KMS(dev, "0x610030: 0x%08x\n", unk30);
 	head = ffs((unk30 >> 9) & 3) - 1;
-	if (head < 0) {
-		NV_ERROR(dev, "no active heads: 0x%08x\n",
-						nv_rd32(dev, 0x610030));
+	if (head < 0)
 		return -EINVAL;
-	}
 
 	/* This assumes CRTCs are never bound to multiple encoders, which
 	 * should be the case.
 	 */
-	for (i = 0; i < 3; i++) {
-		if (nv50_display_mode_ctrl(dev, false, i) & (1 << head))
-			dac |= (1 << i);
-	}
+	for (i = 0; i < 3 && type == OUTPUT_ANY; i++) {
+		uint32_t mc = nv50_display_mode_ctrl(dev, false, i);
+		if (!(mc & (1 << head)))
+			continue;
 
-	for (i = 0; i < 4; i++) {
-		if (nv50_display_mode_ctrl(dev, true, i) & (1 << head))
-			sor |= (1 << i);
+		switch ((mc >> 8) & 0xf) {
+		case 0: type = OUTPUT_ANALOG; break;
+		case 1: type = OUTPUT_TV; break;
+		default:
+			NV_ERROR(dev, "unknown dac mode_ctrl: 0x%08x\n", dac);
+			return -1;
+		}
+
+		or = i;
 	}
 
-	NV_DEBUG(dev, "dac: 0x%08x, sor: 0x%08x\n", dac, sor);
+	for (i = 0; i < 4 && type == OUTPUT_ANY; i++) {
+		uint32_t mc = nv50_display_mode_ctrl(dev, true, i);
+		if (!(mc & (1 << head)))
+			continue;
 
-	if (dac && sor) {
-		NV_ERROR(dev, "multiple encoders: 0x%08x 0x%08x\n", dac, sor);
-		return -1;
-	} else
-	if (dac) {
-		or = ffs(dac) - 1;
-		if (dac & ~(1 << or)) {
-			NV_ERROR(dev, "multiple DAC: 0x%08x\n", dac);
-			return -1;
-		}
-	} else
-	if (sor) {
-		or = ffs(sor) - 1;
-		if (sor & ~(1 << or)) {
-			NV_ERROR(dev, "multiple SOR: 0x%08x\n", sor);
+		switch ((mc >> 8) & 0xf) {
+		case 0: type = OUTPUT_LVDS; break;
+		case 1: type = OUTPUT_TMDS; break;
+		case 2: type = OUTPUT_TMDS; break;
+		case 5: type = OUTPUT_TMDS; break;
+		case 8: type = OUTPUT_DP; break;
+		case 9: type = OUTPUT_DP; break;
+		default:
+			NV_ERROR(dev, "unknown sor mode_ctrl: 0x%08x\n", sor);
 			return -1;
 		}
-	} else {
-		NV_ERROR(dev, "no encoders!\n");
+
+		or = i;
+	}
+
+	NV_DEBUG_KMS(dev, "type %d, or %d\n", type, or);
+	if (type == OUTPUT_ANY) {
+		NV_ERROR(dev, "unknown encoder!!\n");
 		return -1;
 	}
 
 	for (i = 0; i < dev_priv->vbios->dcb->entries; i++) {
 		struct dcb_entry *dcbent = &dev_priv->vbios->dcb->entry[i];
 
-		if (dac && (dcbent->type != OUTPUT_ANALOG &&
-			    dcbent->type != OUTPUT_TV))
+		if (dcbent->type != type)
 			continue;
-		else
-		if (sor && (dcbent->type != OUTPUT_TMDS &&
-			    dcbent->type != OUTPUT_LVDS))
+
+		if (!(dcbent->or & (1 << or)))
 			continue;
 
-		if (dcbent->or & (1 << or)) {
-			*phead = head;
-			*pdcbent = dcbent;
-			return 0;
-		}
+		*phead = head;
+		*pdcbent = dcbent;
+		return 0;
 	}
 
 	NV_ERROR(dev, "no DCB entry for %d %d\n", dac != 0, or);
@@ -654,19 +690,48 @@ nv50_display_script_select(struct drm_device *dev, struct dcb_entry *dcbent,
 			   int pxclk)
 {
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	struct nouveau_connector *nv_connector = NULL;
+	struct drm_encoder *encoder;
 	struct nvbios *bios = &dev_priv->VBIOS;
 	uint32_t mc, script = 0, or;
 
+	list_for_each_entry(encoder, &dev->mode_config.encoder_list, head) {
+		struct nouveau_encoder *nv_encoder = nouveau_encoder(encoder);
+
+		if (nv_encoder->dcb != dcbent)
+			continue;
+
+		nv_connector = nouveau_encoder_connector_get(nv_encoder);
+		break;
+	}
+
 	or = ffs(dcbent->or) - 1;
 	mc = nv50_display_mode_ctrl(dev, dcbent->type != OUTPUT_ANALOG, or);
 	switch (dcbent->type) {
 	case OUTPUT_LVDS:
 		script = (mc >> 8) & 0xf;
-		if (pxclk >= bios->fp.duallink_transition_clk)
-			script |= 0x0100;
+		if (bios->pub.fp_no_ddc) {
+			if (bios->fp.dual_link)
+				script |= 0x0100;
+			if (bios->fp.if_is_24bit)
+				script |= 0x0200;
+		} else {
+			if (pxclk >= bios->fp.duallink_transition_clk) {
+				script |= 0x0100;
+				if (bios->fp.strapless_is_24bit & 2)
+					script |= 0x0200;
+			} else
+			if (bios->fp.strapless_is_24bit & 1)
+				script |= 0x0200;
+
+			if (nv_connector && nv_connector->edid &&
+			    (nv_connector->edid->revision >= 4) &&
+			    (nv_connector->edid->input & 0x70) >= 0x20)
+				script |= 0x0200;
+		}
 
 		if (nouveau_uscript_lvds >= 0) {
-			NV_INFO(dev, "override script 0x%04x with 0x%04x"
+			NV_INFO(dev, "override script 0x%04x with 0x%04x "
 				     "for output LVDS-%d\n", script,
 				     nouveau_uscript_lvds, or);
 			script = nouveau_uscript_lvds;
@@ -678,12 +743,15 @@ nv50_display_script_select(struct drm_device *dev, struct dcb_entry *dcbent,
 			script |= 0x0100;
 
 		if (nouveau_uscript_tmds >= 0) {
-			NV_INFO(dev, "override script 0x%04x with 0x%04x"
+			NV_INFO(dev, "override script 0x%04x with 0x%04x "
 				     "for output TMDS-%d\n", script,
 				     nouveau_uscript_tmds, or);
 			script = nouveau_uscript_tmds;
 		}
 		break;
+	case OUTPUT_DP:
+		script = (mc >> 8) & 0xf;
+		break;
 	case OUTPUT_ANALOG:
 		script = 0xff;
 		break;
@@ -760,9 +828,10 @@ nv50_display_unk20_handler(struct drm_device *dev)
 	pclk = nv_rd32(dev, NV50_PDISPLAY_CRTC_P(head, CLOCK)) & 0x3fffff;
 	script = nv50_display_script_select(dev, dcbent, pclk);
 
-	NV_DEBUG(dev, "head %d pxclk: %dKHz\n", head, pclk);
+	NV_DEBUG_KMS(dev, "head %d pxclk: %dKHz\n", head, pclk);
 
-	nouveau_bios_run_display_table(dev, dcbent, 0, -2);
+	if (dcbent->type != OUTPUT_DP)
+		nouveau_bios_run_display_table(dev, dcbent, 0, -2);
 
 	nv50_crtc_set_clock(dev, head, pclk);
 
@@ -818,7 +887,7 @@ nv50_display_irq_handler_bh(struct work_struct *work)
 		uint32_t intr0 = nv_rd32(dev, NV50_PDISPLAY_INTR_0);
 		uint32_t intr1 = nv_rd32(dev, NV50_PDISPLAY_INTR_1);
 
-		NV_DEBUG(dev, "PDISPLAY_INTR_BH 0x%08x 0x%08x\n", intr0, intr1);
+		NV_DEBUG_KMS(dev, "PDISPLAY_INTR_BH 0x%08x 0x%08x\n", intr0, intr1);
 
 		if (intr1 & NV50_PDISPLAY_INTR_1_CLK_UNK10)
 			nv50_display_unk10_handler(dev);
@@ -850,18 +919,79 @@ nv50_display_error_handler(struct drm_device *dev)
 	nv_wr32(dev, NV50_PDISPLAY_TRAPPED_ADDR, 0x90000000);
 }
 
+static void
+nv50_display_irq_hotplug(struct drm_device *dev)
+{
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	struct drm_connector *connector;
+	const uint32_t gpio_reg[4] = { 0xe104, 0xe108, 0xe280, 0xe284 };
+	uint32_t unplug_mask, plug_mask, change_mask;
+	uint32_t hpd0, hpd1 = 0;
+
+	hpd0 = nv_rd32(dev, 0xe054) & nv_rd32(dev, 0xe050);
+	if (dev_priv->chipset >= 0x90)
+		hpd1 = nv_rd32(dev, 0xe074) & nv_rd32(dev, 0xe070);
+
+	plug_mask   = (hpd0 & 0x0000ffff) | (hpd1 << 16);
+	unplug_mask = (hpd0 >> 16) | (hpd1 & 0xffff0000);
+	change_mask = plug_mask | unplug_mask;
+
+	list_for_each_entry(connector, &dev->mode_config.connector_list, head) {
+		struct drm_encoder_helper_funcs *helper;
+		struct nouveau_connector *nv_connector =
+			nouveau_connector(connector);
+		struct nouveau_encoder *nv_encoder;
+		struct dcb_gpio_entry *gpio;
+		uint32_t reg;
+		bool plugged;
+
+		if (!nv_connector->dcb)
+			continue;
+
+		gpio = nouveau_bios_gpio_entry(dev, nv_connector->dcb->gpio_tag);
+		if (!gpio || !(change_mask & (1 << gpio->line)))
+			continue;
+
+		reg = nv_rd32(dev, gpio_reg[gpio->line >> 3]);
+		plugged = !!(reg & (4 << ((gpio->line & 7) << 2)));
+		NV_INFO(dev, "%splugged %s\n", plugged ? "" : "un",
+			drm_get_connector_name(connector)) ;
+
+		if (!connector->encoder || !connector->encoder->crtc ||
+		    !connector->encoder->crtc->enabled)
+			continue;
+		nv_encoder = nouveau_encoder(connector->encoder);
+		helper = connector->encoder->helper_private;
+
+		if (nv_encoder->dcb->type != OUTPUT_DP)
+			continue;
+
+		if (plugged)
+			helper->dpms(connector->encoder, DRM_MODE_DPMS_ON);
+		else
+			helper->dpms(connector->encoder, DRM_MODE_DPMS_OFF);
+	}
+
+	nv_wr32(dev, 0xe054, nv_rd32(dev, 0xe054));
+	if (dev_priv->chipset >= 0x90)
+		nv_wr32(dev, 0xe074, nv_rd32(dev, 0xe074));
+}
+
 void
 nv50_display_irq_handler(struct drm_device *dev)
 {
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	uint32_t delayed = 0;
 
+	while (nv_rd32(dev, NV50_PMC_INTR_0) & NV50_PMC_INTR_0_HOTPLUG)
+		nv50_display_irq_hotplug(dev);
+
 	while (nv_rd32(dev, NV50_PMC_INTR_0) & NV50_PMC_INTR_0_DISPLAY) {
 		uint32_t intr0 = nv_rd32(dev, NV50_PDISPLAY_INTR_0);
 		uint32_t intr1 = nv_rd32(dev, NV50_PDISPLAY_INTR_1);
 		uint32_t clock;
 
-		NV_DEBUG(dev, "PDISPLAY_INTR 0x%08x 0x%08x\n", intr0, intr1);
+		NV_DEBUG_KMS(dev, "PDISPLAY_INTR 0x%08x 0x%08x\n", intr0, intr1);
 
 		if (!intr0 && !(intr1 & ~delayed))
 			break;
@@ -882,7 +1012,7 @@ nv50_display_irq_handler(struct drm_device *dev)
 		if (clock) {
 			nv_wr32(dev, NV03_PMC_INTR_EN_0, 0);
 			if (!work_pending(&dev_priv->irq_work))
-				schedule_work(&dev_priv->irq_work);
+				queue_work(dev_priv->wq, &dev_priv->irq_work);
 			delayed |= clock;
 			intr1 &= ~clock;
 		}
diff --git a/drivers/gpu/drm/nouveau/nv50_fbcon.c b/drivers/gpu/drm/nouveau/nv50_fbcon.c
index 6bcc6d3..e4f279e 100644
--- a/drivers/gpu/drm/nouveau/nv50_fbcon.c
+++ b/drivers/gpu/drm/nouveau/nv50_fbcon.c
@@ -16,9 +16,7 @@ nv50_fbcon_fillrect(struct fb_info *info, const struct fb_fillrect *rect)
 
 	if (!(info->flags & FBINFO_HWACCEL_DISABLED) &&
 	     RING_SPACE(chan, rect->rop == ROP_COPY ? 7 : 11)) {
-		NV_ERROR(dev, "GPU lockup - switching to software fbcon\n");
-
-		info->flags |= FBINFO_HWACCEL_DISABLED;
+		nouveau_fbcon_gpu_lockup(info);
 	}
 
 	if (info->flags & FBINFO_HWACCEL_DISABLED) {
@@ -31,7 +29,11 @@ nv50_fbcon_fillrect(struct fb_info *info, const struct fb_fillrect *rect)
 		OUT_RING(chan, 1);
 	}
 	BEGIN_RING(chan, NvSub2D, 0x0588, 1);
-	OUT_RING(chan, rect->color);
+	if (info->fix.visual == FB_VISUAL_TRUECOLOR ||
+	    info->fix.visual == FB_VISUAL_DIRECTCOLOR)
+		OUT_RING(chan, ((uint32_t *)info->pseudo_palette)[rect->color]);
+	else
+		OUT_RING(chan, rect->color);
 	BEGIN_RING(chan, NvSub2D, 0x0600, 4);
 	OUT_RING(chan, rect->dx);
 	OUT_RING(chan, rect->dy);
@@ -56,9 +58,7 @@ nv50_fbcon_copyarea(struct fb_info *info, const struct fb_copyarea *region)
 		return;
 
 	if (!(info->flags & FBINFO_HWACCEL_DISABLED) && RING_SPACE(chan, 12)) {
-		NV_ERROR(dev, "GPU lockup - switching to software fbcon\n");
-
-		info->flags |= FBINFO_HWACCEL_DISABLED;
+		nouveau_fbcon_gpu_lockup(info);
 	}
 
 	if (info->flags & FBINFO_HWACCEL_DISABLED) {
@@ -101,8 +101,7 @@ nv50_fbcon_imageblit(struct fb_info *info, const struct fb_image *image)
 	}
 
 	if (!(info->flags & FBINFO_HWACCEL_DISABLED) && RING_SPACE(chan, 11)) {
-		NV_ERROR(dev, "GPU lockup - switching to software fbcon\n");
-		info->flags |= FBINFO_HWACCEL_DISABLED;
+		nouveau_fbcon_gpu_lockup(info);
 	}
 
 	if (info->flags & FBINFO_HWACCEL_DISABLED) {
@@ -135,9 +134,7 @@ nv50_fbcon_imageblit(struct fb_info *info, const struct fb_image *image)
 		int push = dwords > 2047 ? 2047 : dwords;
 
 		if (RING_SPACE(chan, push + 1)) {
-			NV_ERROR(dev,
-				 "GPU lockup - switching to software fbcon\n");
-			info->flags |= FBINFO_HWACCEL_DISABLED;
+			nouveau_fbcon_gpu_lockup(info);
 			cfb_imageblit(info, image);
 			return;
 		}
@@ -199,7 +196,7 @@ nv50_fbcon_accel_init(struct fb_info *info)
 
 	ret = RING_SPACE(chan, 59);
 	if (ret) {
-		NV_ERROR(dev, "GPU lockup - switching to software fbcon\n");
+		nouveau_fbcon_gpu_lockup(info);
 		return ret;
 	}
 
diff --git a/drivers/gpu/drm/nouveau/nv50_fifo.c b/drivers/gpu/drm/nouveau/nv50_fifo.c
index 77ae1aa..39caf16 100644
--- a/drivers/gpu/drm/nouveau/nv50_fifo.c
+++ b/drivers/gpu/drm/nouveau/nv50_fifo.c
@@ -384,8 +384,8 @@ nv50_fifo_load_context(struct nouveau_channel *chan)
 		nv_wr32(dev, NV40_PFIFO_CACHE1_DATA(ptr),
 			nv_ro32(dev, cache, (ptr * 2) + 1));
 	}
-	nv_wr32(dev, 0x3210, cnt << 2);
-	nv_wr32(dev, 0x3270, 0);
+	nv_wr32(dev, NV03_PFIFO_CACHE1_PUT, cnt << 2);
+	nv_wr32(dev, NV03_PFIFO_CACHE1_GET, 0);
 
 	/* guessing that all the 0x34xx regs aren't on NV50 */
 	if (!IS_G80) {
@@ -398,8 +398,6 @@ nv50_fifo_load_context(struct nouveau_channel *chan)
 
 	dev_priv->engine.instmem.finish_access(dev);
 
-	nv_wr32(dev, NV03_PFIFO_CACHE1_GET, 0);
-	nv_wr32(dev, NV03_PFIFO_CACHE1_PUT, 0);
 	nv_wr32(dev, NV03_PFIFO_CACHE1_PUSH1, chan->id | (1<<16));
 	return 0;
 }
@@ -416,7 +414,7 @@ nv50_fifo_unload_context(struct drm_device *dev)
 	NV_DEBUG(dev, "\n");
 
 	chid = pfifo->channel_id(dev);
-	if (chid < 0 || chid >= dev_priv->engine.fifo.channels)
+	if (chid < 1 || chid >= dev_priv->engine.fifo.channels - 1)
 		return 0;
 
 	chan = dev_priv->fifos[chid];
diff --git a/drivers/gpu/drm/nouveau/nv50_graph.c b/drivers/gpu/drm/nouveau/nv50_graph.c
index eef3ebd..ca79f32 100644
--- a/drivers/gpu/drm/nouveau/nv50_graph.c
+++ b/drivers/gpu/drm/nouveau/nv50_graph.c
@@ -27,7 +27,31 @@
 #include "drmP.h"
 #include "drm.h"
 #include "nouveau_drv.h"
-#include "nv50_grctx.h"
+
+MODULE_FIRMWARE("nouveau/nv50.ctxprog");
+MODULE_FIRMWARE("nouveau/nv50.ctxvals");
+MODULE_FIRMWARE("nouveau/nv84.ctxprog");
+MODULE_FIRMWARE("nouveau/nv84.ctxvals");
+MODULE_FIRMWARE("nouveau/nv86.ctxprog");
+MODULE_FIRMWARE("nouveau/nv86.ctxvals");
+MODULE_FIRMWARE("nouveau/nv92.ctxprog");
+MODULE_FIRMWARE("nouveau/nv92.ctxvals");
+MODULE_FIRMWARE("nouveau/nv94.ctxprog");
+MODULE_FIRMWARE("nouveau/nv94.ctxvals");
+MODULE_FIRMWARE("nouveau/nv96.ctxprog");
+MODULE_FIRMWARE("nouveau/nv96.ctxvals");
+MODULE_FIRMWARE("nouveau/nv98.ctxprog");
+MODULE_FIRMWARE("nouveau/nv98.ctxvals");
+MODULE_FIRMWARE("nouveau/nva0.ctxprog");
+MODULE_FIRMWARE("nouveau/nva0.ctxvals");
+MODULE_FIRMWARE("nouveau/nva5.ctxprog");
+MODULE_FIRMWARE("nouveau/nva5.ctxvals");
+MODULE_FIRMWARE("nouveau/nva8.ctxprog");
+MODULE_FIRMWARE("nouveau/nva8.ctxvals");
+MODULE_FIRMWARE("nouveau/nvaa.ctxprog");
+MODULE_FIRMWARE("nouveau/nvaa.ctxvals");
+MODULE_FIRMWARE("nouveau/nvac.ctxprog");
+MODULE_FIRMWARE("nouveau/nvac.ctxvals");
 
 #define IS_G80 ((dev_priv->chipset & 0xf0) == 0x50)
 
@@ -84,65 +108,16 @@ static int
 nv50_graph_init_ctxctl(struct drm_device *dev)
 {
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
-	uint32_t *voodoo = NULL;
 
 	NV_DEBUG(dev, "\n");
 
-	switch (dev_priv->chipset) {
-	case 0x50:
-		voodoo = nv50_ctxprog;
-		break;
-	case 0x84:
-		voodoo = nv84_ctxprog;
-		break;
-	case 0x86:
-		voodoo = nv86_ctxprog;
-		break;
-	case 0x92:
-		voodoo = nv92_ctxprog;
-		break;
-	case 0x94:
-	case 0x96:
-		voodoo = nv94_ctxprog;
-		break;
-	case 0x98:
-		voodoo = nv98_ctxprog;
-		break;
-	case 0xa0:
-		voodoo = nva0_ctxprog;
-		break;
-	case 0xa5:
-		voodoo = nva5_ctxprog;
-		break;
-	case 0xa8:
-		voodoo = nva8_ctxprog;
-		break;
-	case 0xaa:
-		voodoo = nvaa_ctxprog;
-		break;
-#if 0 /* block accel for now, it won't work */
-	case 0xac:
-		voodoo = nvac_ctxprog;
-		break;
-#endif
-	default:
-		NV_ERROR(dev, "no ctxprog for chipset NV%02x\n", dev_priv->chipset);
+	nouveau_grctx_prog_load(dev);
+	if (!dev_priv->engine.graph.ctxprog)
 		dev_priv->engine.graph.accel_blocked = true;
-		break;
-	}
-
-	if (voodoo) {
-		nv_wr32(dev, NV40_PGRAPH_CTXCTL_UCODE_INDEX, 0);
-		while (*voodoo != ~0) {
-			nv_wr32(dev, NV40_PGRAPH_CTXCTL_UCODE_DATA, *voodoo);
-			voodoo++;
-		}
-	}
 
 	nv_wr32(dev, 0x400320, 4);
 	nv_wr32(dev, NV40_PGRAPH_CTXCTL_CUR, 0);
 	nv_wr32(dev, NV20_PGRAPH_CHANNEL_CTX_POINTER, 0);
-
 	return 0;
 }
 
@@ -169,6 +144,7 @@ void
 nv50_graph_takedown(struct drm_device *dev)
 {
 	NV_DEBUG(dev, "\n");
+	nouveau_grctx_fini(dev);
 }
 
 void
@@ -211,11 +187,8 @@ nv50_graph_create_context(struct nouveau_channel *chan)
 	struct drm_nouveau_private *dev_priv = dev->dev_private;
 	struct nouveau_gpuobj *ramin = chan->ramin->gpuobj;
 	struct nouveau_gpuobj *ctx;
-	uint32_t *ctxvals = NULL;
 	uint32_t grctx_size = 0x70000;
-	int hdr;
-	int ret;
-	int pos;
+	int hdr, ret;
 
 	NV_DEBUG(dev, "ch%d\n", chan->id);
 
@@ -237,62 +210,8 @@ nv50_graph_create_context(struct nouveau_channel *chan)
 	nv_wo32(dev, ramin, (hdr + 0x14)/4, 0x00010000);
 	dev_priv->engine.instmem.finish_access(dev);
 
-	switch (dev_priv->chipset) {
-	case 0x50:
-		ctxvals = nv50_ctxvals;
-		break;
-	case 0x84:
-		ctxvals = nv84_ctxvals;
-		break;
-	case 0x86:
-		ctxvals = nv86_ctxvals;
-		break;
-	case 0x92:
-		ctxvals = nv92_ctxvals;
-		break;
-	case 0x94:
-		ctxvals = nv94_ctxvals;
-		break;
-	case 0x96:
-		ctxvals = nv96_ctxvals;
-		break;
-	case 0x98:
-		ctxvals = nv98_ctxvals;
-		break;
-	case 0xa0:
-		ctxvals = nva0_ctxvals;
-		break;
-	case 0xa5:
-		ctxvals = nva5_ctxvals;
-		break;
-	case 0xa8:
-		ctxvals = nva8_ctxvals;
-		break;
-	case 0xaa:
-		ctxvals = nvaa_ctxvals;
-		break;
-#if 0 /* block accel for now, it won't work */
-	case 0xac:
-		ctxvals = nvac_ctxvals;
-		break;
-#endif
-	default:
-		break;
-	}
-
 	dev_priv->engine.instmem.prepare_access(dev, true);
-
-	if (ctxvals) {
-		pos = 0;
-		while (*ctxvals) {
-			int cnt = *ctxvals++;
-
-			while (cnt--)
-				nv_wo32(dev, ctx, pos++, *ctxvals);
-			ctxvals++;
-		}
-	}
-
+	nouveau_grctx_vals_load(dev, ctx);
 	nv_wo32(dev, ctx, 0x00000/4, chan->ramin->instance >> 12);
 	if ((dev_priv->chipset & 0xf0) == 0xa0)
 		nv_wo32(dev, ctx, 0x00004/4, 0x00000000);
@@ -353,32 +272,23 @@ nv50_graph_load_context(struct nouveau_channel *chan)
 	return nv50_graph_do_load_context(chan->dev, inst);
 }
 
-static int
-nv50_graph_do_save_context(struct drm_device *dev, uint32_t inst)
+int
+nv50_graph_unload_context(struct drm_device *dev)
 {
-	uint32_t fifo = nv_rd32(dev, 0x400500);
+	uint32_t inst, fifo = nv_rd32(dev, 0x400500);
+
+	inst  = nv_rd32(dev, NV50_PGRAPH_CTXCTL_CUR);
+	if (!(inst & NV50_PGRAPH_CTXCTL_CUR_LOADED))
+		return 0;
+	inst &= NV50_PGRAPH_CTXCTL_CUR_INSTANCE;
 
 	nv_wr32(dev, 0x400500, fifo & ~1);
 	nv_wr32(dev, 0x400784, inst);
 	nv_wr32(dev, 0x400824, nv_rd32(dev, 0x400824) | 0x20);
 	nv_wr32(dev, 0x400304, nv_rd32(dev, 0x400304) | 0x01);
 	nouveau_wait_for_idle(dev);
-
 	nv_wr32(dev, 0x400500, fifo);
-	return 0;
-}
 
-int
-nv50_graph_unload_context(struct drm_device *dev)
-{
-	uint32_t inst;
-	int ret;
-
-	inst  = nv_rd32(dev, NV50_PGRAPH_CTXCTL_CUR);
-	if (!(inst & NV50_PGRAPH_CTXCTL_CUR_LOADED))
-		return 0;
-	inst &= NV50_PGRAPH_CTXCTL_CUR_INSTANCE;
-	ret = nv50_graph_do_save_context(dev, inst);
 	nv_wr32(dev, NV50_PGRAPH_CTXCTL_CUR, inst);
 	return 0;
 }
diff --git a/drivers/gpu/drm/nouveau/nv50_sor.c b/drivers/gpu/drm/nouveau/nv50_sor.c
index d7fab7d..e395c16 100644
--- a/drivers/gpu/drm/nouveau/nv50_sor.c
+++ b/drivers/gpu/drm/nouveau/nv50_sor.c
@@ -44,7 +44,7 @@ nv50_sor_disconnect(struct nouveau_encoder *nv_encoder)
 	struct nouveau_channel *evo = dev_priv->evo;
 	int ret;
 
-	NV_DEBUG(dev, "Disconnecting SOR %d\n", nv_encoder->or);
+	NV_DEBUG_KMS(dev, "Disconnecting SOR %d\n", nv_encoder->or);
 
 	ret = RING_SPACE(evo, 2);
 	if (ret) {
@@ -56,6 +56,36 @@ nv50_sor_disconnect(struct nouveau_encoder *nv_encoder)
 }
 
 static void
+nv50_sor_dp_link_train(struct drm_encoder *encoder)
+{
+	struct drm_device *dev = encoder->dev;
+	struct nouveau_encoder *nv_encoder = nouveau_encoder(encoder);
+	struct bit_displayport_encoder_table *dpe;
+	int dpe_headerlen;
+
+	dpe = nouveau_bios_dp_table(dev, nv_encoder->dcb, &dpe_headerlen);
+	if (!dpe) {
+		NV_ERROR(dev, "SOR-%d: no DP encoder table!\n", nv_encoder->or);
+		return;
+	}
+
+	if (dpe->script0) {
+		NV_DEBUG_KMS(dev, "SOR-%d: running DP script 0\n", nv_encoder->or);
+		nouveau_bios_run_init_table(dev, le16_to_cpu(dpe->script0),
+					    nv_encoder->dcb);
+	}
+
+	if (!nouveau_dp_link_train(encoder))
+		NV_ERROR(dev, "SOR-%d: link training failed\n", nv_encoder->or);
+
+	if (dpe->script1) {
+		NV_DEBUG_KMS(dev, "SOR-%d: running DP script 1\n", nv_encoder->or);
+		nouveau_bios_run_init_table(dev, le16_to_cpu(dpe->script1),
+					    nv_encoder->dcb);
+	}
+}
+
+static void
 nv50_sor_dpms(struct drm_encoder *encoder, int mode)
 {
 	struct drm_device *dev = encoder->dev;
@@ -63,7 +93,7 @@ nv50_sor_dpms(struct drm_encoder *encoder, int mode)
 	uint32_t val;
 	int or = nv_encoder->or;
 
-	NV_DEBUG(dev, "or %d mode %d\n", or, mode);
+	NV_DEBUG_KMS(dev, "or %d mode %d\n", or, mode);
 
 	/* wait for it to be done */
 	if (!nv_wait(NV50_PDISPLAY_SOR_DPMS_CTRL(or),
@@ -88,6 +118,9 @@ nv50_sor_dpms(struct drm_encoder *encoder, int mode)
 		NV_ERROR(dev, "SOR_DPMS_STATE(%d) = 0x%08x\n", or,
 			 nv_rd32(dev, NV50_PDISPLAY_SOR_DPMS_STATE(or)));
 	}
+
+	if (nv_encoder->dcb->type == OUTPUT_DP && mode == DRM_MODE_DPMS_ON)
+		nv50_sor_dp_link_train(encoder);
 }
 
 static void
@@ -109,7 +142,7 @@ nv50_sor_mode_fixup(struct drm_encoder *encoder, struct drm_display_mode *mode,
 	struct nouveau_encoder *nv_encoder = nouveau_encoder(encoder);
 	struct nouveau_connector *connector;
 
-	NV_DEBUG(encoder->dev, "or %d\n", nv_encoder->or);
+	NV_DEBUG_KMS(encoder->dev, "or %d\n", nv_encoder->or);
 
 	connector = nouveau_encoder_connector_get(nv_encoder);
 	if (!connector) {
@@ -149,15 +182,26 @@ nv50_sor_mode_set(struct drm_encoder *encoder, struct drm_display_mode *mode,
 	uint32_t mode_ctl = 0;
 	int ret;
 
-	NV_DEBUG(dev, "or %d\n", nv_encoder->or);
+	NV_DEBUG_KMS(dev, "or %d\n", nv_encoder->or);
 
 	nv50_sor_dpms(encoder, DRM_MODE_DPMS_ON);
 
 	switch (nv_encoder->dcb->type) {
 	case OUTPUT_TMDS:
-		mode_ctl |= NV50_EVO_SOR_MODE_CTRL_TMDS;
-		if (adjusted_mode->clock > 165000)
-			mode_ctl |= NV50_EVO_SOR_MODE_CTRL_TMDS_DUAL_LINK;
+		if (nv_encoder->dcb->sorconf.link & 1) {
+			if (adjusted_mode->clock < 165000)
+				mode_ctl = 0x0100;
+			else
+				mode_ctl = 0x0500;
+		} else
+			mode_ctl = 0x0200;
+		break;
+	case OUTPUT_DP:
+		mode_ctl |= 0x00050000;
+		if (nv_encoder->dcb->sorconf.link & 1)
+			mode_ctl |= 0x00000800;
+		else
+			mode_ctl |= 0x00000900;
 		break;
 	default:
 		break;
@@ -202,7 +246,7 @@ nv50_sor_destroy(struct drm_encoder *encoder)
 	if (!encoder)
 		return;
 
-	NV_DEBUG(encoder->dev, "\n");
+	NV_DEBUG_KMS(encoder->dev, "\n");
 
 	drm_encoder_cleanup(encoder);
 
@@ -221,7 +265,7 @@ nv50_sor_create(struct drm_device *dev, struct dcb_entry *entry)
 	bool dum;
 	int type;
 
-	NV_DEBUG(dev, "\n");
+	NV_DEBUG_KMS(dev, "\n");
 
 	switch (entry->type) {
 	case OUTPUT_TMDS:
diff --git a/firmware/Makefile b/firmware/Makefile
index 6d5c3ab..84d3327 100644
--- a/firmware/Makefile
+++ b/firmware/Makefile
@@ -62,6 +62,17 @@ fw-shipped-$(CONFIG_DRM_RADEON) += radeon/R100_cp.bin radeon/R200_cp.bin \
 				   radeon/RV770_pfp.bin radeon/RV770_me.bin \
 				   radeon/RV730_pfp.bin radeon/RV730_me.bin \
 				   radeon/RV710_pfp.bin radeon/RV710_me.bin
+fw-shipped-$(CONFIG_DRM_NOUVEAU) += nouveau/nv50.ctxprog nouveau/nv50.ctxvals \
+				    nouveau/nv84.ctxprog nouveau/nv84.ctxvals \
+				    nouveau/nv86.ctxprog nouveau/nv86.ctxvals \
+				    nouveau/nv92.ctxprog nouveau/nv92.ctxvals \
+				    nouveau/nv94.ctxprog nouveau/nv94.ctxvals \
+				    nouveau/nv96.ctxprog nouveau/nv96.ctxvals \
+				    nouveau/nv98.ctxprog nouveau/nv98.ctxvals \
+				    nouveau/nva0.ctxprog nouveau/nva0.ctxvals \
+				    nouveau/nva5.ctxprog nouveau/nva5.ctxvals \
+				    nouveau/nva8.ctxprog nouveau/nva8.ctxvals \
+				    nouveau/nvaa.ctxprog nouveau/nvaa.ctxvals
 fw-shipped-$(CONFIG_DVB_AV7110) += av7110/bootcode.bin
 fw-shipped-$(CONFIG_DVB_TTUSB_BUDGET) += ttusb-budget/dspbootcode.bin
 fw-shipped-$(CONFIG_E100) += e100/d101m_ucode.bin e100/d101s_ucode.bin \
diff --git a/firmware/nouveau/nv50.ctxprog.ihex b/firmware/nouveau/nv50.ctxprog.ihex
new file mode 100644
index 0000000..684781a
--- /dev/null
+++ b/firmware/nouveau/nv50.ctxprog.ihex
@@ -0,0 +1,100 @@
+:100000004E564350008A018E0070009C0070002004
+:10001000002000080060004C005000890E400000E5
+:100020000020000700600000003000FF00C000005A
+:10003000002000FF008000090070004D874100444F
+:100040001E4000051E40000D1E40000663410005D5
+:10005000006000C5154000110060000B1C4000FF4F
+:10006000FF9000FFFF910020002000080060004C7E
+:1000700000500009006000456341004D7E41009D35
+:10008000007000CF2240009F0070009F005000C011
+:100090001F400080002000080060004F1F4000C08B
+:1000A0001F4000CC254000810070000000200006A9
+:1000B00000600000007000FC1B1100830070000055
+:1000C0000030000059210007006000010BC0001C37
+:1000D00000200001008000CB005000FF00C0008025
+:1000E0000070008300700047002000060060000AD6
+:1000F000021100C00520000700600000003000FF72
+:1001000000C000FF00C800076E410027262000FF46
+:100110000080008C454000CB0050003F02A0004012
+:10012000002000060060000F007000020217000AA5
+:10013000021100320020000D02100042021B0002DA
+:1001400003120002041400000518000905130050F2
+:100150000515000506110007061E00000711000026
+:1001600009110002091100000A1100020B160028F3
+:100170000B11002B0B1400010C11000014110005D1
+:1001800014110007141100091411000B141100EAD6
+:10019000002000001510000F6D40004B6D40000066
+:1001A0003721000700600040042000FF0088008F16
+:1001B0000070008C6D4000CB00500000000000F883
+:1001C0001811002B002000051A1000001C13000459
+:1001D0001C1100201C1400251C1100401C1300449D
+:1001E0001C1100601C1400651C1100801C1300848D
+:1001F0001C1100A01C1400A51C1100C01C1300C47D
+:100200001C1100E01C1400E51C1100001D1300046B
+:100210001D1100201D1400251D1100401D13004458
+:100220001D1100601D1400651D1100001F1300400A
+:100230001F1900E0A74000170220000600600044DC
+:1002400000200080201000C6201100C9201500D019
+:100250002019000021120003211200002216000FB5
+:100260009F40004B9F400000372100070060004086
+:10027000042000FF0088008F0070008C9F4000CB9E
+:100280000050000000000007221200802211000030
+:1002900023110002231100802312008B23110094EC
+:1002A000231900E1B94000850220000600600044E7
+:1002B00000200080241000C6241100C9241500D09D
+:1002C000241900002512000325120000261600073D
+:1002D000261200802611000027110002271100803D
+:1002E0002712008B27110094271900E2D54000F354
+:1002F000022000060060004400200080281000C694
+:10030000281100C92815000FC940004BC940000042
+:100310003721000700600040042000FF0088008FA4
+:100320000070008CC94000CB00500000000000D0DD
+:100330002819000029120003291200002A160007BC
+:100340002A1200802A1100002B1100022B110080BC
+:100350002B12008B2B1100942B1900E3E740006156
+:100360000320000600600044002000802C1000C61E
+:100370002C1100C92C1500D02C1900002D120003DF
+:100380002D1200002E1600072E1200802E110000E4
+:100390002F1100022F1100802F12008B2F110094BB
+:1003A0002F1900E4034100CF032000060060004441
+:1003B000002000803010000FF540004BF540000099
+:1003C0003721000700600040042000FF0088008FF4
+:1003D0000070008CF54000CB00500000000000C60B
+:1003E000301100C9301500D030190000311200035F
+:1003F0003112000032160007321200803211000064
+:1004000033110002331100803312008B331100943A
+:10041000331900E51541003D04200006006000444A
+:1004200000200080341000C6341100C9341500D0FB
+:10043000341900003512000335120000361600078B
+:10044000361200803611000037110002371100808B
+:100450003712008B37110094371900E6314100AB99
+:100460000420000600600044002000803810000FC7
+:100470002341004B2341000037210007006000406A
+:10048000042000FF0088008F0070008C234100CB07
+:1004900000500000000000C6381100C9381500D017
+:1004A0003819000039120003391200003A1600070B
+:1004B0003A1200803A1100003B1100023B1100800B
+:1004C0003B12008B3B1100943B1900E7434100199C
+:1004D0000520000600600044002000803C1000C69B
+:1004E0003C1100C93C1500D03C1900003D1200032E
+:1004F0003D1200003E1600073E1200803E11000033
+:100500003F1100023F1100803F12008B3F11009409
+:100510003F1900000000000F4A4100CB00500000CE
+:100520003721000700600040042000FF008800CB56
+:10053000005000874D41000A0060000000000000EC
+:100540005C4100A000700080007000C00520000722
+:1005500000600004002000FF00C000FF008000CB0E
+:10056000005000000070000000200006006000FE47
+:100570001B11004D7E4100000070000000200006AD
+:10058000006000FE1B1100800070001D0070004D17
+:1005900011400081007000040060004A0050008893
+:1005A0006841000B006000000020000600600000B1
+:1005B0000070000B7E4100FD1B11004D37400027ED
+:1005C000262000FD008000CB0050000200C000C0CB
+:1005D000052000070060005F01200002008000CBC2
+:1005E0000050000218C000C824200002008000CB88
+:1005F0000050004D4340000B0060004D7C41000165
+:100600000070000300700006824100058341000D68
+:10061000006000050070000D007000060070000B07
+:0F0620000070000E0070001C0070000C006000E5
+:00000001FF
diff --git a/firmware/nouveau/nv50.ctxvals.ihex b/firmware/nouveau/nv50.ctxvals.ihex
new file mode 100644
index 0000000..9c82e73
--- /dev/null
+++ b/firmware/nouveau/nv50.ctxvals.ihex
@@ -0,0 +1,1335 @@
+:100000004E56435600690A000043000000300000CD
+:100010000048000000400040FF490000008000F060
+:10002000FF4A0000009000F7FF4B000000A806E820
+:10003000FF4C0000000200000075000000030000FB
+:10004000007600000000100000850000000CFE009B
+:10005000008A000000001000009500000087FD01EC
+:10006000009A000000181000009B000000FF000034
+:1000700000A900000004000000AA0000005F0001C9
+:1000800000AC00000000060000AD0000000600000B
+:1000900000B2000000FF000000B4000000000400F7
+:1000A00000B900000001000000BA0000008000302C
+:1000B00000BB00000004000000C2000000020000BD
+:1000C00000C300000001000000C6000000010000A5
+:1000D00000C700000000010000CD00000002000089
+:1000E00000CE00000001000000CF00000001000071
+:1000F00000D300000001000000D4000000FFFF3F1B
+:1001000000D5000000FF1F0000D700000001000024
+:1001100000D800000001000000DA0000000100002B
+:1001200000DB00000001000000DC00000001000016
+:1001300000DD00000004000000DE000000010000FF
+:1001400000DF00000001000000E0000000010000EE
+:1001500000E100000007000000E2000000010000D4
+:1001600000E300000007000000E4000000010000C0
+:1001700000E500000001000000E6000000010000B2
+:1001800000EB00000001000000EC00000001000096
+:1001900000EE00000001000000EF0000000A000077
+:1001A00000F300000040000000F500000002000025
+:1001B00000F600000000010000F700000001000050
+:1001C00000F800000000010000FF00000001000036
+:1001D0000008010000040000000E01000001000002
+:1001E000000F0100000001000011010000010000EB
+:1001F00000140100000001000015010000010000D2
+:1002000000160100000001000018010000010000BC
+:10021000001B010000000100001C010000010000A3
+:10022000001E01000001000000210100000200008A
+:100230000023010000010000002501000001000072
+:10024000002A01000003000000310100000400004A
+:100250000032010000700000003301000080000047
+:1002600000380100000C0000003901000008000007
+:10027000003A010000140000003B010000260000CD
+:10028000003E010000010000003F010000020000EC
+:1002900000400100000300000041010000040000D4
+:1002A00000420100000500000043010000060000BC
+:1002B00000440100000700000045010000010000AB
+:1002C0000056010000CF0000006101000080000026
+:1002D000006201000004000000630100000400004F
+:1002E000006401000001000000660100001200002F
+:1002F000006701000010000000680100000C000011
+:100300000069010000010000006D01000004000010
+:10031000006E010000020000006F010000040000F8
+:100320000072010000FFFF3F0073010000FF1F008B
+:1003300000750100000400000076010000140000B8
+:100340000077010000010000007A010000020000B7
+:10035000007D010000010000007F0100000200009C
+:100360000080010000001000008201000001000078
+:100370000083010000010000008401000001000072
+:10038000008501000001000000860100000100005E
+:10039000008A010000000200008C01000001000042
+:1003A000008D010000700000008E01000080000040
+:1003B00000910100000100000092010000700000A7
+:1003C0000093010000800000009701000001000080
+:1003D0000098010000CF0000009A01000001000019
+:1003E000009E010000CF000000A0010000020000FC
+:1003F00000A201000001000000A4010000010000B3
+:1004000000A6010000CF000000A7010000CF0000FF
+:1004100000A801000001000000AB010000800F00F7
+:1004200000BD01000080007F00CC01000080007F43
+:1004300000D501000020F8741BD6010000018005E2
+:1004400089D9010000FA107C02DA010000C0000026
+:1004500000DB010000802089B7DE01000020F87475
+:100460001BDF01000001800589E2010000FA107C19
+:1004700002E3010000C0000000E4010000802089C8
+:10048000B7E701000020F8741BE8010000018005B7
+:1004900089EB010000FA107C02EC010000C00000B2
+:1004A00000ED010000802089B7F001000020F87401
+:1004B0001BF101000001800589F4010000FA107CA5
+:1004C00002F5010000C0000000F601000080208954
+:1004D000B7F901000020F8741BFA01000001800543
+:1004E00089FD010000FA107C02FE010000C000003E
+:1004F00000FF010000802089B70202000020F8748C
+:100500001B030200000180058906020000FA107C2E
+:100510000207020000C000000008020000802089DD
+:10052000B70B020000400001000D02000022000095
+:100530000010020000400001001102000022000033
+:1005400000170200000000800118020000000016E1
+:100550000019020000000080011D020000FFFF03DF
+:10056000001E020000000008002702000001040134
+:100570000029020000400000002B020000BF000024
+:10058000002D020000101200002E0200008000006A
+:100590000037020000000080013802000000001651
+:1005A0000039020000000080013D020000FFFF034F
+:1005B000003E0200000000080047020000010401A4
+:1005C0000049020000400000004B020000BF000094
+:1005D000004D020000101200004E020000800000DA
+:1005E0000058020000707000005B020000FFFF0373
+:1005F00000610200000704120062020000071509F2
+:10060000056302000002020105640200000102030A
+:10061000006B020000400000006C0200000A0B0C9E
+:100620000D6D020000101214006E020000F00100B7
+:10063000006F0200000100000070020000030000D3
+:1006400000710200000080000073020000009E03A1
+:100650000074020000400000007502000000380035
+:10066000007602000040404000770200000AFF00D0
+:10067000007902000005F077007A020000FF7F0099
+:10068000007D020000FF0300007E02000003000066
+:10069000007F0200000300000080020000FF010054
+:1006A00000810200001F000000820200000F000015
+:1006B00000830200000F000000850200000000809F
+:1006C0000186020000000016008702000000008082
+:1006D000018B020000FFFF03008C020000000008F5
+:1006E0000095020000010401009702000040000094
+:1006F0000099020000BF0000009B020000101200E1
+:10070000009C02000080000000A5020000000080A4
+:1007100001A602000000001600A7020000000080F1
+:1007200001AB020000FFFF0300AC02000000000864
+:1007300000B502000001040100B702000040000003
+:1007400000B9020000BF000000BB02000010120050
+:1007500000BC02000080000000C6020000707000B3
+:1007600000C9020000FFFF0300CF020000070412CF
+:1007700000D002000007150905D1020000020201A5
+:1007800005D202000001020300D90200004000006F
+:1007900000DA0200000A0B0C0DDB0200001012143C
+:1007A00000DC020000F0010000DD0200000100009A
+:1007B00000DE02000003000000DF020000008000F5
+:1007C00000E1020000009E0300E202000040000081
+:1007D00000E302000000380000E402000040404056
+:1007E00000E50200000AFF0000E702000005F077C4
+:1007F00000E8020000FF7F0000EB020000FF0300A2
+:1008000000EC02000003000000ED02000003000005
+:1008100000EE020000FF010000EF0200001F0000D8
+:1008200000F00200000F000000F10200000F0000C5
+:1008300000F302000000008001F402000000001636
+:1008400000F502000000008001F9020000FFFF0334
+:1008500000FA020000000008000303000001040188
+:1008600000050300004000000007030000BF000077
+:100870000009030000101200000A030000800000BD
+:1008800000130300000000800114030000000016A4
+:1008900000150300000000800119030000FFFF03A2
+:1008A000001A0300000000080023030000010401F7
+:1008B00000250300004000000027030000BF0000E7
+:1008C0000029030000101200002A0300008000002D
+:1008D00000340300007070000037030000FFFF03C6
+:1008E000003D030000070412003E03000007150945
+:1008F000053F03000002020105400300000102035E
+:10090000004703000040000000480300000A0B0CF1
+:100910000D49030000101214004A030000F001000A
+:10092000004B030000010000004C03000003000026
+:10093000004D030000008000004F030000009E03F4
+:100940000050030000400000005103000000380088
+:10095000005203000040404000530300000AFF0023
+:10096000005503000005F0770056030000FF7F00EC
+:100970000059030000FF0300005A030000030000B9
+:10098000005B030000030000005C030000FF0100A7
+:10099000005D0300001F0000005E0300000F000068
+:1009A000005F0300000F00000061030000000080F2
+:1009B00001620300000000160063030000000080D5
+:1009C0000167030000FFFF03006803000000000848
+:1009D00000710300000104010073030000400000E7
+:1009E0000075030000BF0000007703000010120034
+:1009F00000780300008000000081030000000080F8
+:100A00000182030000000016008303000000008044
+:100A10000187030000FFFF030088030000000008B7
+:100A20000091030000010401009303000040000056
+:100A30000095030000BF00000097030000101200A3
+:100A4000009803000080000000A203000070700006
+:100A500000A5030000FFFF0300AB03000007041222
+:100A600000AC03000007150905AD030000020201F8
+:100A700005AE03000001020300B5030000400000C2
+:100A800000B60300000A0B0C0DB70300001012148F
+:100A900000B8030000F0010000B9030000010000ED
+:100AA00000BA03000003000000BB03000000800048
+:100AB00000BD030000009E0300BE030000400000D4
+:100AC00000BF03000000380000C0030000404040A9
+:100AD00000C10300000AFF0000C303000005F07717
+:100AE00000C4030000FF7F0000C7030000FF0300F5
+:100AF00000C803000003000000C903000003000059
+:100B000000CA030000FF010000CB0300001F00002B
+:100B100000CC0300000F000000CD0300000F000018
+:100B200000CF03000000008001D003000000001689
+:100B300000D103000000008001D5030000FFFF0387
+:100B400000D603000000000800DF030000010401DC
+:100B500000E103000040000000E3030000BF0000CC
+:100B600000E503000010120000E603000080000012
+:100B700000EF03000000008001F0030000000016F9
+:100B800000F103000000008001F5030000FFFF03F7
+:100B900000F603000000000800FF0300000104014C
+:100BA00000010400004000000003040000BF00003A
+:100BB0000005040000101200000604000080000080
+:100BC00000100400007070000013040000FFFF0319
+:100BD0000019040000070412001A04000007150998
+:100BE000051B040000020201051C040000010203B1
+:100BF000002304000040000000240400000A0B0C45
+:100C00000D250400001012140026040000F001005D
+:100C10000027040000010000002804000003000079
+:100C20000029040000008000002B040000009E0347
+:100C3000002C040000400000002D040000003800DB
+:100C4000002E040000404040002F0400000AFF0076
+:100C5000003104000005F0770032040000FF7F003F
+:100C60000035040000FF030000360400000300000C
+:100C700000370400000300000038040000FF0100FA
+:100C800000390400001F0000003A0400000F0000BB
+:100C9000003B0400000F0000003D04000000008045
+:100CA000013E040000000016003F04000000008028
+:100CB0000143040000FFFF0300440400000000089B
+:100CC000004D040000010401004F0400004000003A
+:100CD0000051040000BF0000005304000010120087
+:100CE0000054040000800000005D0400000000804B
+:100CF000015E040000000016005F04000000008098
+:100D00000163040000FFFF0300640400000000080A
+:100D1000006D040000010401006F040000400000A9
+:100D20000071040000BF00000073040000101200F6
+:100D30000074040000800000007E04000070700059
+:100D40000081040000FFFF03008704000007041275
+:100D5000008804000007150905890400000202014B
+:100D6000058A040000010203009104000040000015
+:100D700000920400000A0B0C0D93040000101214E2
+:100D80000094040000F00100009504000001000040
+:100D9000009604000003000000970400000080009B
+:100DA0000099040000009E03009A04000040000027
+:100DB000009B040000003800009C040000404040FC
+:100DC000009D0400000AFF00009F04000005F0776A
+:100DD00000A0040000FF7F0000A3040000FF030048
+:100DE00000A404000003000000A5040000030000AC
+:100DF00000A6040000FF010000A70400001F00007F
+:100E000000A80400000F000000A90400000F00006B
+:100E100000AB04000000008001AC040000000016DC
+:100E200000AD04000000008001B1040000FFFF03DA
+:100E300000B204000000000800BB0400000104012F
+:100E400000BD04000040000000BF040000BF00001F
+:100E500000C104000010120000C204000080000065
+:100E600000CB04000000008001CC0400000000164C
+:100E700000CD04000000008001D1040000FFFF034A
+:100E800000D204000000000800DB0400000104019F
+:100E900000DD04000040000000DF040000BF00008F
+:100EA00000E104000010120000E2040000800000D5
+:100EB00000EC04000070700000EF040000FFFF036E
+:100EC00000F504000007041200F6040000071509ED
+:100ED00005F704000002020105F804000001020306
+:100EE00000FF04000040000000000500000A0B0C99
+:100EF0000D010500001012140002050000F00100B1
+:100F000000030500000100000004050000030000CC
+:100F100000050500000080000007050000009E039A
+:100F2000000805000040000000090500000038002E
+:100F3000000A050000404040000B0500000AFF00C9
+:100F4000000D05000005F077000E050000FF7F0092
+:100F50000011050000FF030000120500000300005F
+:100F600000130500000300000014050000FF01004D
+:100F700000150500001F000000160500000F00000E
+:100F800000170500000F0000001905000000008098
+:100F9000011A050000000016001B0500000000807B
+:100FA000011F050000FFFF030020050000000008EE
+:100FB0000029050000010401002B0500004000008D
+:100FC000002D050000BF0000002F050000101200DA
+:100FD000003005000080000000390500000000809E
+:100FE000013A050000000016003B050000000080EB
+:100FF000013F050000FFFF0300400500000000085E
+:101000000049050000010401004B050000400000FC
+:10101000004D050000BF0000004F05000010120049
+:101020000050050000800000005A050000707000AC
+:10103000005D050000FFFF030063050000070412C8
+:10104000006405000007150905650500000202019E
+:101050000566050000010203006D05000040000068
+:10106000006E0500000A0B0C0D6F05000010121435
+:101070000070050000F00100007105000001000093
+:1010800000720500000300000073050000008000EE
+:101090000075050000009E0300760500004000007A
+:1010A000007705000000380000780500004040404F
+:1010B00000790500000AFF00007B05000005F077BD
+:1010C000007C050000FF7F00007F050000FF03009B
+:1010D00000800500000300000081050000030000FF
+:1010E0000082050000FF010000830500001F0000D2
+:1010F00000840500000F000000850500000F0000BF
+:1011000000CC05000004000000CD05000004000034
+:1011100000CE05000004000000CF05000004000020
+:1011200000E10500000F00000003060000020000BF
+:1011300000090600002000000013060000603E00C9
+:10114000007B060000010000007C06000004000097
+:10115000007D060000040000007E06000004000080
+:10116000007F06000004000000810600001A000055
+:101170000083060000100000008406000004000048
+:101180000085060000040000008606000004000040
+:101190000087060000040000008C060000808060CC
+:1011A000008D060000808060008E06000080806058
+:1011B000008F060000808060009B06000001000098
+:1011C00000B406000004000000B5060000040000A2
+:1011D00000B606000004000000B70600000400008E
+:1011E00000CC06000004000000CD06000004000052
+:1011F00000CE06000004000000CF0600000400003E
+:1012000000D306000002000000D406000004000025
+:1012100000D506000004000000D60600000400000F
+:1012200000D706000004000000DC0600008000007B
+:1012300000DD06000080000000DE060000800000E7
+:1012400000DF06000080000000E40600000010003F
+:1012500000E506000000100000E606000000100097
+:1012600000E706000000100000EC0600000400008B
+:1012700000ED06000004000000EE0600000400007F
+:1012800000EF06000004000000F10600000400006A
+:1012900000F9060000040000000907000004000037
+:1012A0000011070000080000001B070000010000FB
+:1012B0000021070000FF03000023070000100000CA
+:1012C000003307000001000000890700000F000044
+:1012D00000D3070000100000001408000004000004
+:1012E00000150800000400000016080000040000BB
+:1012F0000017080000040000001C08000080000027
+:10130000001D080000800000001E08000080000092
+:10131000001F0800008000000024080000040000F6
+:10132000002508000004000000260800000400005A
+:101330000027080000040000002C08000000010243
+:10134000032D080000000102032E08000000010226
+:10135000032F08000000010203340800000300000E
+:1013600000350800000300000036080000030000FC
+:101370000037080000030000003C080000001000D7
+:10138000003D080000001000003E080000001000B2
+:10139000003F0800000010000044080000040000A6
+:1013A000004508000004000000460800000400009A
+:1013B0000047080000040000005B080000000080F7
+:1013C0003F630800000000803F6B080000000080C1
+:1013D0003F6C080000040000006D080000040000DD
+:1013E000006E080000040000006F08000004000008
+:1013F00000730800000000803F7408000003000034
+:1014000000750800000300000076080000030000DB
+:101410000077080000030000007B08000000008047
+:101420003F830800000000803F8B08000000008020
+:101430003F930800000000803F9408000004000073
+:101440000095080000040000009608000004000059
+:101450000097080000040000009B080000000080C6
+:101460003FA30800000000803FAB080000000080A0
+:101470003FB30800000000803FBB08000000008070
+:101480003FC30800000000803FCB08000000008040
+:101490003FD30800000000803FA3090000100000B7
+:1014A00000B30900003F000000EB0900000100004C
+:1014B00000FB090000010000000B0A000001000011
+:1014C00000730A000011000000B30A00000F0000C2
+:1014D00000D00A000021000000D80A00000100002E
+:1014E00000E00A000002000000E80A00000001001D
+:1014F00000F00A000000010000F30A0000110000E3
+:1015000000F80A000001000000100B0000010000BC
+:1015100000180B0000020000001B0B00000100007F
+:1015200000200B000000010000230B000001000060
+:1015300000280B0000000100002B0B000001000040
+:1015400000300B000001000000330B00000200001F
+:10155000003B0B000001000000430B0000020000F4
+:10156000004B0B0000010000005B0B0000603E0020
+:10157000006B0B00008168AC0F1B0C000001000029
+:1015800000230C0000020000002B0C0000010000F2
+:1015900000330C0000010000003B0C0000020000C2
+:1015A00000430C0000010000004B0C000001000093
+:1015B000006B0C000011000000730C000001000023
+:1015C00000930F000002000000A30F0000603E0027
+:1015D000000B1000000100000013100000100000BC
+:1015E000002B10000001000000631000000200004A
+:1015F00000AB10000001000000B31000001000005C
+:1016000000B91000000F000000C31000000100002E
+:1016100000C910000001000000631100001000006C
+:1016200000EB1100000000803FF31100000000807B
+:101630003FFB1100000000803F031200000000800B
+:101640003F0B1200000000803F13120000000080DA
+:101650003F1B1200000000803F23120000000080AA
+:101660003F2B1200000000803F331200000000807A
+:101670003F3B1200000000803F431200000000804A
+:101680003F4B1200000000803F531200000000801A
+:101690003F5B1200000000803F63120000000080EA
+:1016A0003F3313000010000000431300003F000010
+:1016B000007B130000010000008B130000010000FC
+:1016C000009B13000001000000A11300000F0000A8
+:1016D000000314000011000000431400000F00007C
+:1016E000008314000011000000AB14000001000092
+:1016F00000B314000001000000BB14000001000052
+:1017000000C314000002000000CB14000001000020
+:1017100000D314000002000000DB140000010000F0
+:1017200000EB140000603E0000FB1400008168AC78
+:101730000FAB15000001000000B31500000200000F
+:1017400000BB15000001000000C3150000010000EF
+:1017500000CB15000002000000D3150000010000BE
+:1017600000DB15000001000000FB15000011000067
+:101770000003160000010000002319000002000011
+:101780000033190000603E00009B190000010000BA
+:1017900000A319000010000000BB190000010000A8
+:1017A00000F3190000020000003B1A0000010000D5
+:1017B00000431A000010000000531A00000100004E
+:1017C00000F31A0000100000007B1B0000000080E6
+:1017D0003F831B00000000803F8B1B000000008047
+:1017E0003F931B00000000803F9B1B000000008017
+:1017F0003FA31B00000000803FAB1B0000000080E7
+:101800003FB31B00000000803FBB1B0000000080B6
+:101810003FC31B00000000803FCB1B000000008086
+:101820003FD31B00000000803FDB1B000000008056
+:101830003FE31B00000000803FEB1B000000008026
+:101840003FF31B00000000803FC31C00001000009D
+:1018500000D31C00003F0000000B1D000001000031
+:10186000001B1D0000010000002B1D0000010000F6
+:1018700000931D000011000000D31D00000F0000A8
+:1018800000131E0000110000003B1E0000010000BC
+:1018900000431E0000010000004B1E00000100007C
+:1018A00000531E0000020000005B1E00000100004B
+:1018B00000631E0000020000006B1E00000100001B
+:1018C000007B1E0000603E00008B1E00008168ACA3
+:1018D0000F3B1F000001000000431F00000200003A
+:1018E000004B1F000001000000531F00000100001A
+:1018F000005B1F000002000000631F0000010000E9
+:10190000006B1F0000010000008B1F000011000091
+:1019100000931F000001000000B32200000200003D
+:1019200000C3220000603E00002B230000010000E5
+:101930000033230000100000004B230000010000D2
+:10194000008323000002000000CB23000001000000
+:1019500000D323000010000000E32300000100007A
+:101960000083240000100000000B25000000008010
+:101970003F132500000000803F1B25000000008071
+:101980003F232500000000803F2B25000000008041
+:101990003F332500000000803F3B25000000008011
+:1019A0003F432500000000803F4B250000000080E1
+:1019B0003F532500000000803F5B250000000080B1
+:1019C0003F632500000000803F6B25000000008081
+:1019D0003F732500000000803F7B25000000008051
+:1019E0003F832500000000803F53260000100000C8
+:1019F00000632600003F0000009B2600000100005D
+:101A000000AB26000001000000BB26000001000022
+:101A1000002327000011000000632700000F0000D2
+:101A200000A327000011000000CB270000010000E8
+:101A300000D327000001000000DB270000010000A8
+:101A400000E327000002000000EB27000001000077
+:101A500000F327000002000000FB27000001000047
+:101A6000000B280000603E00001B2800008168ACCD
+:101A70000FCB28000001000000D328000002000066
+:101A800000DB28000001000000E328000001000046
+:101A900000EB28000002000000F328000001000015
+:101AA00000FB280000010000001B290000110000BD
+:101AB000002329000001000000432C000002000068
+:101AC00000532C0000603E0000BB2C000001000011
+:101AD00000C32C000010000000DB2C0000010000FF
+:101AE00000132D0000020000005B2D00000100002B
+:101AF00000632D000010000000732D0000010000A5
+:101B000000132E0000100000009B2E00000000803B
+:101B10003FA32E00000000803FAB2E00000000809D
+:101B20003FB32E00000000803FBB2E00000000806D
+:101B30003FC32E00000000803FCB2E00000000803D
+:101B40003FD32E00000000803FDB2E00000000800D
+:101B50003FE32E00000000803FEB2E0000000080DD
+:101B60003FF32E00000000803FFB2E0000000080AD
+:101B70003F032F00000000803F0B2F00000000807B
+:101B80003F132F00000000803FE32F0000100000F3
+:101B900000F32F00003F0000002B30000001000088
+:101BA000003B300000010000004B3000000100004D
+:101BB00000B330000011000000F33000000F0000FF
+:101BC0000033310000110000005B31000001000013
+:101BD0000063310000010000006B310000010000D3
+:101BE00000733100000200000078310000040000A2
+:101BF000007B310000010000008031000004000083
+:101C00000083310000020000008B31000001000061
+:101C1000009B310000603E0000AB3100008168ACE9
+:101C20000F5B320000010000006332000002000080
+:101C3000006B320000010000007332000001000060
+:101C4000007B32000002000000833200000100002F
+:101C5000008B32000001000000AB320000110000D8
+:101C600000B332000001000000D335000002000084
+:101C700000E3350000603E00004B3600000100002C
+:101C80000053360000100000006B36000001000019
+:101C900000A336000002000000EB36000001000047
+:101CA00000F33600001000000003370000010000C0
+:101CB00000A3370000100000002B38000000008057
+:101CC0003F333800000000803F3B380000000080B8
+:101CD0003F433800000000803F4B38000000008088
+:101CE0003F533800000000803F5B38000000008058
+:101CF0003F633800000000803F6B38000000008028
+:101D00003F733800000000803F7B380000000080F7
+:101D10003F833800000000803F8B380000000080C7
+:101D20003F933800000000803F9B38000000008097
+:101D30003FA33800000000803F733900001000000E
+:101D400000833900003F000000BB390000010000A3
+:101D500000CB39000001000000DB39000001000069
+:101D600000433A000011000000833A00000F000019
+:101D700000C33A000011000000EB3A00000100002F
+:101D800000F33A000001000000FB3A0000010000EF
+:101D900000033B0000020000000B3B0000010000BC
+:101DA00000133B0000020000001B3B00000100008C
+:101DB000002B3B0000603E00003B3B00008168AC14
+:101DC0000FEB3B000001000000F33B0000020000AD
+:101DD00000FB3B000001000000033C00000100008C
+:101DE000000B3C000002000000133C00000100005A
+:101DF000001B3C0000010000003B3C000011000003
+:101E000000433C000001000000495500000F0000A5
+:101E100000D955000001000000E15500000100005C
+:101E200000F155000001000000F95500000001001C
+:101E300000015600000001000009560000110000DA
+:101E4000001956000008000000495600000100007B
+:101E5000005956000001000000615600000100001A
+:101E600000695600000100000071560000CF00001C
+:101E7000007956000002000000B156000001000089
+:101E800000C156000001000000C95600000100001A
+:101E900000D156000001000000F9560000040000C7
+:101EA0000009570000010000001157000015000054
+:101EB00000315700008044440411590000120C10F6
+:101EC00008395900000001000051590000010001CB
+:101ED0000061590000010001006959000001000083
+:101EE0000071590000010001007959000001000053
+:101EF0000081590000040000008959000002000020
+:101F000000BC59000004000000BD5900000400009E
+:101F100000BE59000004000000BF5900000400008A
+:101F200000C2590000FFFF3F00C459000003000039
+:101F300000C559000003000000C65900000300005E
+:101F400000C759000003000000DA590000FF1F001D
+:101F500000525A00000000803F545A00000F000059
+:101F600000555A00000F000000565A00000F0000F4
+:101F700000575A00000F0000008A5A0000040000B9
+:101F800000925A00001A000000AA5A000001000046
+:101F900000B45A000004000000B55A00000400001C
+:101FA00000B65A000004000000B75A000004000008
+:101FB00000BC5A0000FFFF0000BD5A0000FFFF00F8
+:101FC00000BE5A0000FFFF0000BF5A0000FFFF00E4
+:101FD00000C45A0000FFFF0000C55A0000FFFF00C8
+:101FE00000C65A0000FFFF0000C75A0000FFFF00B4
+:101FF00000CC5A0000FFFF0000CD5A0000FFFF0098
+:1020000000CE5A0000FFFF0000CF5A0000FFFF0083
+:1020100000D45A0000FFFF0000D55A0000FFFF0067
+:1020200000D65A0000FFFF0000D75A0000FFFF0053
+:10203000001C5B0000010000001D5B0000010000AF
+:10204000001E5B0000010000001F5B00000100009B
+:10205000003C5B0000010000003D5B00000100004F
+:10206000003E5B0000010000003F5B00000100003B
+:1020700000425B000000FFFF006C5B0000010000FD
+:10208000006D5B0000010000006E5B0000010000BD
+:10209000006F5B0000010000007A5B00000F000091
+:1020A00000BA5B00008168AC0FC25B000011000049
+:1020B00000D45B000001000000D55B0000010000BF
+:1020C00000D65B000001000000D75B0000010000AB
+:1020D00000DC5B000001000000DD5B00000100008F
+:1020E00000DE5B000001000000DF5B00000100007B
+:1020F00000E45B000002000000E55B00000200005D
+:1021000000E65B000002000000E75B000002000048
+:1021100000EC5B000001000000ED5B00000100002E
+:1021200000EE5B000001000000EF5B00000100001A
+:1021300000F45B000001000000F55B0000010000FE
+:1021400000F65B000001000000F75B0000010000EA
+:1021500000FC5B000002000000FD5B0000020000CC
+:1021600000FE5B000002000000FF5B0000020000B8
+:1021700000045C000001000000055C00000100009C
+:1021800000065C000001000000075C000001000088
+:1021900000145C000011000000155C00001100003C
+:1021A00000165C000011000000175C000011000028
+:1021B00000425C000004000000545C00008168AC38
+:1021C0000F555C00008168AC0F565C00008168AC64
+:1021D0000F575C00008168AC0F6A5C0000020000D1
+:1021E000006C5C0000040000006D5C000004000056
+:1021F000006E5C0000040000006F5C000004000042
+:1022000000725C0000000000047A5C000000000026
+:10221000048C5C0000110000008D5C0000110000C7
+:10222000008E5C0000110000008F5C0000110000B7
+:1022300000945C000001000000955C0000010000BB
+:1022400000965C000001000000975C0000010000A7
+:10225000009A5C000005000000A25C000052000033
+:1022600000A45C0000CF000000A55C0000CF0000CF
+:1022700000A65C0000CF000000A75C0000CF0000BB
+:1022800000AC5C0000CF000000AD5C0000CF00009F
+:1022900000AE5C0000CF000000AF5C0000CF00008B
+:1022A00000B45C0000CF000000B55C0000CF00006F
+:1022B00000B65C0000CF000000B75C0000CF00005B
+:1022C000000C5D0000010000000D5D000001000039
+:1022D000000E5D0000010000000F5D000001000025
+:1022E00000145D000001000000155D000001000009
+:1022F00000165D000001000000175D0000010000F5
+:10230000001C5D0000020000001D5D0000020000D6
+:10231000001E5D0000020000001F5D0000020000C2
+:1023200000245D000001000000255D0000010000A8
+:1023300000265D000001000000275D000001000094
+:10234000002C5D0000010000002D5D000001000078
+:10235000002E5D0000010000002F5D000001000064
+:1023600000345D000002000000355D000002000046
+:1023700000365D000002000000375D000002000032
+:10238000003C5D0000010000003D5D000001000018
+:10239000003E5D0000010000003F5D000001000004
+:1023A00000425D00000000803F4A5D0000000080A8
+:1023B0003F4C5D0000010000004D5D000001000089
+:1023C000004E5D0000010000004F5D0000010000B4
+:1023D00000525D00000000803F545D0000010000DD
+:1023E00000555D000001000000565D000001000086
+:1023F00000575D0000010000005A5D0000000080F1
+:102400003F5C5D0000010000005D5D000001000018
+:10241000005E5D0000010000005F5D000001000043
+:1024200000625D00000000803F645D00000100006C
+:1024300000655D000001000000665D000001000015
+:1024400000675D0000010000006A5D000000008080
+:102450003F6C5D0000010000006D5D0000010000A8
+:10246000006E5D0000010000006F5D0000010000D3
+:1024700000725D00000000803F745D0000010000FC
+:1024800000755D000001000000765D0000010000A5
+:1024900000775D0000010000007A5D000000008010
+:1024A0003F7C5D0000010000007D5D000001000038
+:1024B000007E5D0000010000007F5D000001000063
+:1024C00000825D00000000803F845D00000100008C
+:1024D00000855D000001000000865D000001000035
+:1024E00000875D0000010000008A5D0000000080A0
+:1024F0003F8C5D0000110000008D5D0000110000A8
+:10250000008E5D0000110000008F5D0000110000D2
+:1025100000925D00000000803F9A5D000000008096
+:102520003FA25D00000000803FAA5D000000008027
+:102530003FB25D00000000803FBA5D0000000080F7
+:102540003FC25D000010000000CC5D00008168AC5F
+:102550000FCD5D00008168AC0FCE5D00008168ACDE
+:102560000FCF5D00008168AC0FD45D00000F00004C
+:1025700000D55D00000F000000D65D00000F0000D8
+:1025800000D75D00000F000000145E0000603E00F8
+:1025900000155E0000603E0000165E0000603E0018
+:1025A00000175E0000603E00002C5E00001100007D
+:1025B000002D5E0000110000002E5E0000110000E2
+:1025C000002F5E000011000000345E0000010000DA
+:1025D00000355E000001000000365E0000010000D2
+:1025E00000375E000001000000445E0000040000AF
+:1025F00000455E000004000000465E00000400008C
+:1026000000475E000004000000745E00000100004E
+:1026100000755E000001000000765E000001000011
+:1026200000775E0000010000009C5E0000110000C9
+:10263000009D5E0000110000009E5E000011000081
+:10264000009F5E000011000000DC5E00008168ACAD
+:102650000FDD5E00008168AC0FDE5E00008168ACBB
+:102660000FDF5E00008168AC0FFA5E0000120C10F4
+:1026700008FC5E000011000000FD5E00001100007B
+:1026800000FE5E000011000000FF5E00001100006F
+:1026900000025F000005000000045F000001000070
+:1026A00000055F000001000000065F00000100005F
+:1026B00000075F000001000000145F00000100003F
+:1026C00000155F000001000000165F00000100001F
+:1026D00000175F0000010000001A5F000001000009
+:1026E00000245F000001000000255F0000010000E1
+:1026F00000265F000001000000275F0000010000CD
+:10270000002A5F0000FFFF0000325F0000FFFF00B3
+:1027100000345F0000FF030000355F0000FF03008E
+:1027200000365F0000FF030000375F0000FF03007A
+:10273000003A5F0000FFFF0000425F0000FFFF0063
+:1027400000445F000001000000455F000001000040
+:1027500000465F000001000000475F00000100002C
+:1027600000545F000001000000555F000001000000
+:1027700000565F000001000000575F0000010000EC
+:10278000004260000000FFFF004A6000001A0000E5
+:1027900000AC60000008000000AD60000008000010
+:1027A00000AE60000008000000AF600000080000FC
+:1027B00000B460000008000000B5600000080000E0
+:1027C00000B660000008000000B7600000080000CC
+:1027D00000BC60000008000000BD600000080000B0
+:1027E00000BE60000008000000BF6000000800009C
+:1027F00000C460000008000000C560000008000080
+:1028000000C660000008000000C76000000800006B
+:1028100000CC60000008000000CD6000000800004F
+:1028200000CE60000008000000CF6000000800003B
+:1028300000D460000008000000D56000000800001F
+:1028400000D660000008000000D76000000800000B
+:1028500000DC60000008000000DD600000080000EF
+:1028600000DE60000008000000DF600000080000DB
+:1028700000E460000008000000E5600000080000BF
+:1028800000E660000008000000E7600000080000AB
+:1028900000EC60000011000000ED6000001100007D
+:1028A00000EE60000011000000EF60000011000069
+:1028B000002C6100008168AC0F2D6100008168ACC4
+:1028C0000F2E6100008168AC0F2F6100008168ACA1
+:1028D0000F346100000004000035610000000400B6
+:1028E00000366100000004000037610000000400B1
+:1028F000003C610000000400003D61000000040095
+:10290000003E610000000400003F61000000040080
+:102910000044610000000400004561000000040064
+:102920000046610000000400004761000000040050
+:10293000004C610000000400004D61000000040034
+:10294000004E610000000400004F61000000040020
+:102950000054610000000400005561000000040004
+:1029600000566100000004000057610000000400F0
+:10297000005C610000000400005D610000000400D4
+:10298000005E610000000400005F610000000400C0
+:1029900000646100000004000065610000000400A4
+:1029A0000066610000000400006761000000040090
+:1029B0000069610000DFBFE3046C610000000400F7
+:1029C000006D610000000400006E61000000040062
+:1029D000006F6100000004000071610000DFBFE3D0
+:1029E0000474610000000300007561000000030032
+:1029F0000076610000000300007761000000030022
+:102A0000007C610000000300007D61000000030005
+:102A1000007E610000000300007F610000000300F1
+:102A200000826100000201000084610000000300D8
+:102A300000856100000003000086610000000300C3
+:102A40000087610000000300008C610000000300AB
+:102A5000008D610000000300008E61000000030093
+:102A6000008F61000000030000926100000400007C
+:102A70000094610000000300009561000000030065
+:102A80000096610000000300009761000000030051
+:102A900000996100008168AC0F9A61000004000099
+:102AA000009C610000000300009D61000000030025
+:102AB000009E610000000300009F61000000030011
+:102AC00000A261000004000000A4610000000300F7
+:102AD00000A561000000030000A6610000000300E3
+:102AE00000A761000000030000AA610000040000CC
+:102AF00000AC61000000030000AD610000000300B5
+:102B000000AE61000000030000AF610000000300A0
+:102B100000B261000004000000B461000001000088
+:102B200000B561000001000000B661000001000076
+:102B300000B761000001000000BA6100000400005D
+:102B400000BC6100000F000000BD6100000F00002C
+:102B500000BE6100000F000000BF6100000F000018
+:102B600000CA610000FF030000DA610000020100FA
+:102B700000F9610000DFBFE304FC610000200000F9
+:102B800000FD61000020000000FE61000020000048
+:102B900000FF6100002000000001620000DFBFE3D1
+:102BA0000404620000110000000562000011000032
+:102BB0000006620000110000000762000011000022
+:102BC000000C620000000100000D62000000010026
+:102BD000000E620000000100000F62000000010012
+:102BE000001C620000010000001D620000010000E6
+:102BF000001E620000010000001F620000010000D2
+:102C0000002A62000004000000326200000400009C
+:102C10000034620000400000003562000040000007
+:102C200000366200004000000037620000400000F3
+:102C3000003A620000040000003C62000000010055
+:102C4000003D620000000100003E62000000010043
+:102C5000003F62000000010000426200000400002A
+:102C6000004C620000030000004D62000003000001
+:102C7000004E620000030000004F620000030000ED
+:102C80000074620000603E000075620000603E005B
+:102C90000076620000603E000077620000603E0047
+:102CA0000094620000020000009562000002000033
+:102CB000009662000002000000976200000200001F
+:102CC000009C6200008168AC0F9D6200008168ACCE
+:102CD0000F9E6200008168AC0F9F6200008168ACAB
+:102CE0000FEC62000001000000ED62000001000036
+:102CF00000EE62000001000000EF62000001000031
+:102D000000146300000400000015630000040000CC
+:102D100000166300000400000017630000040000B8
+:102D20000024630000010000002563000001000092
+:102D3000002663000001000000276300000100007E
+:102D4000002C630000000400002D6300000004005C
+:102D5000002E630000000400002F63000000040048
+:102D6000003463000000030000356300000003002E
+:102D7000003663000000030000376300000003001A
+:102D8000003C630000011000003D630000011000E2
+:102D9000003E630000011000003F630000011000CE
+:102DA000005C630000110000005D63000011000082
+:102DB000005E630000110000005F6300001100006E
+:102DC000009C6300008168AC0F9D6300008168ACCB
+:102DD0000F9E6300008168AC0F9F6300008168ACA8
+:102DE0000FA46300000F000000A56300000F0000A7
+:102DF00000A66300000F000000A76300000F0000A2
+:102E000000B263000004000000BA63000004000088
+:102E100000CA63000010000000EA6300000408001C
+:102E200000F263000001000000FA6300001A0000D5
+:102E3000000A6400000100000012640000140C0885
+:102E40000022640000120C10082A64000004000034
+:102E50000032640000040000004264000010000022
+:102E600000626400000100000064640000603E0035
+:102E70000065640000603E000066640000603E0083
+:102E80000067640000603E00006A640000120C10DD
+:102E90000884640000110000008564000011000037
+:102EA000008664000011000000876400001100002B
+:102EB000009C640000040000009D64000004000009
+:102EC000009E640000040000009F640000040000F5
+:102ED00000A2640000FF030000AA640000140C08B4
+:102EE00000AC64000001000000AD640000010000BF
+:102EF00000AE64000001000000AF640000010000AB
+:102F000000B464000001000000B56400000100008E
+:102F100000B664000001000000B76400000100007A
+:102F200000D464000001000000D56400000100002E
+:102F300000D664000001000000D76400000100001A
+:102F400000F464000001000000F5640000010000CE
+:102F500000F664000001000000F7640000010000BA
+:102F6000000465000001000000056500000100008C
+:102F70000006650000010000000765000001000078
+:102F8000001C6500008824712A1D650000882471DA
+:102F90002A1E6500008824712A1F6500008824719C
+:102FA0002A2C65000000C085402D65000000C0850A
+:102FB000402E65000000C085402F65000000C085E0
+:102FC000403465000040000000356500004000000E
+:102FD000003665000040000000376500004000003A
+:102FE000003C650000000100003D6500000001009C
+:102FF000003E650000000100003F65000000010088
+:103000000044650000000101004565000000010169
+:103010000046650000000101004765000000010155
+:10302000004C650000000080024D6500000000803B
+:10303000024E650000000080024F65000000008025
+:1030400002CC650000DFBFE304CD650000DFBFE315
+:1030500004CE650000DFBFE304CF650000DFBFE3FF
+:1030600004D4650000DFBFE304D5650000DFBFE3E3
+:1030700004D6650000DFBFE304D7650000DFBFE3CF
+:1030800004DC65000001000000DD650000010000B7
+:1030900000DE65000001000000DF650000010000A7
+:1030A00000EC65000000FFFF00ED65000000FFFF81
+:1030B00000EE65000000FFFF00EF65000000FFFF6D
+:1030C00000F465000001000000F56500000100004B
+:1030D00000F665000001000000F765000001000037
+:1030E000000C66000000FFFF000D66000000FFFFFF
+:1030F000000E66000000FFFF000F66000000FFFFEB
+:103100000054660000010000005566000001000048
+:103110000056660000010000005766000001000034
+:103120000064660000010000006566000001000008
+:1031300000666600000100000067660000010000F4
+:10314000006C660000001020306D6600000010204A
+:10315000306E660000001020306F66000000102006
+:10316000307266000001000000746600004050608C
+:1031700070756600004050607076660000405060D8
+:103180007077660000405060707C6600008898A8E8
+:10319000B87D6600008898A8B87E6600008898A868
+:1031A000B87F6600008898A8B884660000C8D8E890
+:1031B000F885660000C8D8E8F886660000C8D8E838
+:1031C000F887660000C8D8E8F88A6600001000009A
+:1031D00000946600001A000000956600001A0000C6
+:1031E00000966600001A000000976600001A0000B2
+:1031F00000A466000004000000A5660000040000B2
+:1032000000A666000004000000A76600000400009D
+:10321000005467000004000000556700000400002F
+:10322000005667000004000000576700000400001B
+:10323000005C670000040000005D670000040000FF
+:10324000005E670000040000005F670000040000EB
+:103250000064670000808060006567000080806017
+:103260000066670000808060006767000080806003
+:10327000008C670000040000008D6700000400005F
+:10328000008E670000040000008F6700000400004B
+:1032900000A467000004000000A56700000400000F
+:1032A00000A667000004000000A7670000040000FB
+:1032B00000AC67000004000000AD670000040000DF
+:1032C00000AE67000004000000AF670000040000CB
+:1032D00000B467000080000000B5670000800000B7
+:1032E00000B667000080000000B7670000800000A3
+:1032F00000BC67000000100000BD67000000100067
+:1033000000BE67000000100000BF67000000100052
+:1033100000C467000004000000C56700000400004E
+:1033200000C667000004000000C76700000400003A
+:103330000052680000880000005A68000088000001
+:10334000007268000004000000EC68000004000047
+:1033500000ED68000004000000EE680000040000BA
+:1033600000EF68000004000000F468000080000026
+:1033700000F568000080000000F668000080000092
+:1033800000F768000080000000FC680000040000F6
+:1033900000FD68000004000000FE6800000400005A
+:1033A00000FF680000040000000469000000010242
+:1033B0000305690000000102030669000000010224
+:1033C0000307690000000102030C6900000300000C
+:1033D000000D690000030000000E690000030000FA
+:1033E000000F6900000300000014690000001000D5
+:1033F00000156900000010000016690000001000B0
+:103400000017690000001000001C690000040000A3
+:10341000001D690000040000001E69000004000097
+:10342000001F690000040000002A69000026000057
+:1034300000426900000000803F4469000004000071
+:103440000045690000040000004669000004000017
+:103450000047690000040000004C69000003000000
+:10346000004D690000030000004E690000030000E9
+:10347000004F69000003000000626900001A0000AC
+:10348000006A690000100000006C69000004000080
+:10349000006D690000040000006E69000004000077
+:1034A000006F690000040000009A6A0000520000EA
+:1034B00000AA6A000026000000BA6A0000040000AA
+:1034C00000C26A000004000000D26A00001A000076
+:1034D00000EA6A000000FFFF00FA6A000004000032
+:1034E00000026B000004000000126B00008000006E
+:1034F000001A6B000004000000226B0000140C088E
+:1035000000326B0000FF0300004A95000004000039
+:103510000052950000040000006295000080000049
+:10352000006A950000040000007295000001000090
+:103530000082950000270000009295000026000000
+:1035400000B295000000000004BA950000000000E1
+:1035500004C295000000000004CA950000000000AD
+:1035600004D295000000000004DA9500000000007D
+:1035700004E295000000000004EA9500000000004D
+:1035800004F295000000000004FA9500000000001D
+:103590000402960000000000040A960000000000EB
+:1035A0000412960000000000041A960000000000BB
+:1035B0000422960000000000042A9600000000008B
+:1035C0000452970000DFBFE3045A970000DFBFE317
+:1035D000047297000021FE010094BA00000400006C
+:1035E0000095BA00000400000096BA000004000034
+:1035F0000097BA0000040000009CBA00000300001D
+:10360000009DBA0000030000009EBA000003000005
+:10361000009FBA0000030000002CBB00000F000058
+:10362000002DBB00000F0000002EBB00000F0000AB
+:10363000002FBB00000F0000008CBB000004000046
+:10364000008DBB0000040000008EBB0000040000E1
+:10365000008FBB00000400000094BB0000FFFF00CF
+:103660000095BB0000FFFF000096BB0000FFFF00BD
+:103670000097BB0000FFFF00009CBB0000FFFF00A5
+:10368000009DBB0000FFFF00009EBB0000FFFF008D
+:10369000009FBB0000FFFF0000A4BB0000FFFF0075
+:1036A00000A5BB0000FFFF0000A6BB0000FFFF005D
+:1036B00000A7BB0000FFFF0000ACBB0000FFFF0045
+:1036C00000ADBB0000FFFF0000AEBB0000FFFF002D
+:1036D00000AFBB0000FFFF0000F4BB0000010000D2
+:1036E00000F5BB000001000000F6BB000001000077
+:1036F00000F7BB00000100000014BC000001000046
+:103700000015BC00000100000016BC000001000014
+:103710000017BC00000100000044BC0000010000D4
+:103720000045BC00000100000046BC000001000094
+:103730000047BC000001000000ACBC00000100001C
+:1037400000ADBC000001000000AEBC0000010000A4
+:1037500000AFBC000001000000B4BC00000100008C
+:1037600000B5BC000001000000B6BC000001000074
+:1037700000B7BC000001000000BCBC00000200005B
+:1037800000BDBC000002000000BEBC000002000042
+:1037900000BFBC000002000000C4BC00000100002B
+:1037A00000C5BC000001000000C6BC000001000014
+:1037B00000C7BC000001000000CCBC0000010000FC
+:1037C00000CDBC000001000000CEBC0000010000E4
+:1037D00000CFBC000001000000D4BC0000020000CB
+:1037E00000D5BC000002000000D6BC0000020000B2
+:1037F00000D7BC000002000000DCBC00000100009B
+:1038000000DDBC000001000000DEBC000001000083
+:1038100000DFBC000001000000ECBC000011000053
+:1038200000EDBC000011000000EEBC000011000023
+:1038300000EFBC0000110000002CBD00008168AC4E
+:103840000F2DBD00008168AC0F2EBD00008168AC5B
+:103850000F2FBD00008168AC0F44BD0000040000C4
+:103860000045BD00000400000046BD00000400004B
+:103870000047BD00000400000064BD00001100000E
+:103880000065BD00001100000066BD0000110000D1
+:103890000067BD0000110000006CBD0000010000C9
+:1038A000006DBD0000010000006EBD0000010000C1
+:1038B000006FBD0000010000007CBD0000CF0000D3
+:1038C000007DBD0000CF0000007EBD0000CF0000E5
+:1038D000007FBD0000CF00000084BD0000CF0000CD
+:1038E0000085BD0000CF00000086BD0000CF0000B5
+:1038F0000087BD0000CF0000008CBD0000CF00009D
+:10390000008DBD0000CF0000008EBD0000CF000084
+:10391000008FBD0000CF000000E4BD0000010000EA
+:1039200000E5BD000001000000E6BD000001000050
+:1039300000E7BD000001000000ECBD000001000038
+:1039400000EDBD000001000000EEBD000001000020
+:1039500000EFBD000001000000F4BD000002000007
+:1039600000F5BD000002000000F6BD0000020000EE
+:1039700000F7BD000002000000FCBD0000010000D7
+:1039800000FDBD000001000000FEBD0000010000C0
+:1039900000FFBD00000100000004BE0000010000A7
+:1039A0000005BE00000100000006BE00000100008E
+:1039B0000007BE0000010000000CBE000002000075
+:1039C000000DBE0000020000000EBE00000200005C
+:1039D000000FBE00000200000014BE000001000045
+:1039E0000015BE00000100000016BE00000100002E
+:1039F0000017BE00000100000024BE00000100000E
+:103A00000025BE00000100000026BE0000010000ED
+:103A10000027BE0000010000002CBE0000010000D5
+:103A2000002DBE0000010000002EBE0000010000BD
+:103A3000002FBE00000100000034BE0000010000A5
+:103A40000035BE00000100000036BE00000100008D
+:103A50000037BE0000010000003CBE000001000075
+:103A6000003DBE0000010000003EBE00000100005D
+:103A7000003FBE00000100000044BE000001000045
+:103A80000045BE00000100000046BE00000100002D
+:103A90000047BE0000010000004CBE000001000015
+:103AA000004DBE0000010000004EBE0000010000FD
+:103AB000004FBE00000100000054BE0000010000E5
+:103AC0000055BE00000100000056BE0000010000CD
+:103AD0000057BE0000010000005CBE0000010000B5
+:103AE000005DBE0000010000005EBE00000100009D
+:103AF000005FBE00000100000064BE000011000075
+:103B00000065BE00001100000066BE00001100004C
+:103B10000067BE000011000000A4BE00008168AC78
+:103B20000FA5BE00008168AC0FA6BE00008168AC86
+:103B30000FA7BE00008168AC0FACBE00000F0000F4
+:103B400000ADBE00000F000000AEBE00000F000080
+:103B500000AFBE00000F000000ECBE0000603E00A1
+:103B600000EDBE0000603E0000EEBE0000603E00C2
+:103B700000EFBE0000603E000004BF000011000026
+:103B80000005BF00001100000006BF00001100008A
+:103B90000007BF0000110000000CBF000001000082
+:103BA000000DBF0000010000000EBF00000100007A
+:103BB000000FBF0000010000001CBF000004000057
+:103BC000001DBF0000040000001EBF000004000034
+:103BD000001FBF0000040000004CBF0000010000F7
+:103BE000004DBF0000010000004EBF0000010000BA
+:103BF000004FBF00000100000074BF000011000072
+:103C00000075BF00001100000076BF000011000029
+:103C10000077BF000011000000B4BF00008168AC55
+:103C20000FB5BF00008168AC0FB6BF00008168AC63
+:103C30000FB7BF00008168AC0FD4BF0000110000B7
+:103C400000D5BF000011000000D6BF000011000029
+:103C500000D7BF000011000000DCBF000001000021
+:103C600000DDBF000001000000DEBF000001000019
+:103C700000DFBF000001000000ECBF0000010000F9
+:103C800000EDBF000001000000EEBF0000010000D9
+:103C900000EFBF000001000000FCBF0000010000B9
+:103CA00000FDBF000001000000FEBF000001000099
+:103CB00000FFBF0000010000000CC00000FF030077
+:103CC000000DC00000FF0300000EC00000FF030055
+:103CD000000FC00000FF0300001CC0000001000036
+:103CE000001DC00000010000001EC0000001000017
+:103CF000001FC00000010000002CC00000010000F7
+:103D0000002DC00000010000002EC00000010000D6
+:103D1000002FC000000100000084C1000008000066
+:103D20000085C100000800000086C10000080000F6
+:103D30000087C10000080000008CC10000080000DE
+:103D4000008DC10000080000008EC10000080000C6
+:103D5000008FC100000800000094C10000080000AE
+:103D60000095C100000800000096C1000008000096
+:103D70000097C10000080000009CC100000800007E
+:103D8000009DC10000080000009EC1000008000066
+:103D9000009FC1000008000000A4C100000800004E
+:103DA00000A5C1000008000000A6C1000008000036
+:103DB00000A7C1000008000000ACC100000800001E
+:103DC00000ADC1000008000000AEC1000008000006
+:103DD00000AFC1000008000000B4C10000080000EE
+:103DE00000B5C1000008000000B6C10000080000D6
+:103DF00000B7C1000008000000BCC10000080000BE
+:103E000000BDC1000008000000BEC10000080000A5
+:103E100000BFC1000008000000C4C1000011000084
+:103E200000C5C1000011000000C6C1000011000063
+:103E300000C7C100001100000004C200008168AC8E
+:103E40000F05C200008168AC0F06C200008168AC9B
+:103E50000F07C200008168AC0F0CC2000000040014
+:103E6000000DC20000000400000EC20000000400AB
+:103E7000000FC200000004000014C2000000040093
+:103E80000015C200000004000016C200000004007B
+:103E90000017C20000000400001CC2000000040063
+:103EA000001DC20000000400001EC200000004004B
+:103EB000001FC200000004000024C2000000040033
+:103EC0000025C200000004000026C200000004001B
+:103ED0000027C20000000400002CC2000000040003
+:103EE000002DC20000000400002EC20000000400EB
+:103EF000002FC200000004000034C20000000400D3
+:103F00000035C200000004000036C20000000400BA
+:103F10000037C20000000400003CC20000000400A2
+:103F2000003DC20000000400003EC200000004008A
+:103F3000003FC200000004000044C2000000040072
+:103F40000045C200000004000046C200000004005A
+:103F50000047C20000000400004CC2000000030043
+:103F6000004DC20000000300004EC200000003002C
+:103F7000004FC200000003000054C2000000030014
+:103F80000055C200000003000056C20000000300FC
+:103F90000057C20000000300005CC20000000300E4
+:103FA000005DC20000000300005EC20000000300CC
+:103FB000005FC200000003000064C20000000300B4
+:103FC0000065C200000003000066C200000003009C
+:103FD0000067C20000000300006CC2000000030084
+:103FE000006DC20000000300006EC200000003006C
+:103FF000006FC200000003000074C2000000030054
+:104000000075C200000003000076C200000003003B
+:104010000077C20000000300007CC2000000030023
+:10402000007DC20000000300007EC200000003000B
+:10403000007FC200000003000084C20000000300F3
+:104040000085C200000003000086C20000000300DB
+:104050000087C20000000300008CC20000010000C5
+:10406000008DC20000010000008EC20000010000AF
+:10407000008FC200000100000094C200000F000089
+:104080000095C200000F00000096C200000F000063
+:104090000097C200000F000000D4C2000020000002
+:1040A00000D5C2000020000000D6C20000200000A1
+:1040B00000D7C2000020000000DCC2000011000098
+:1040C00000DDC2000011000000DEC200001100008F
+:1040D00000DFC2000011000000E4C2000000010087
+:1040E00000E5C2000000010000E6C200000001007F
+:1040F00000E7C2000000010000F4C200000100005F
+:1041000000F5C2000001000000F6C200000100003E
+:1041100000F7C20000010000000CC30000400000D6
+:10412000000DC30000400000000EC300004000006E
+:10413000000FC300004000000014C3000000010095
+:104140000015C300000001000016C30000000100BC
+:104150000017C300000001000024C300000300009A
+:104160000025C300000300000026C3000003000078
+:104170000027C30000030000004CC30000603E00A5
+:10418000004DC30000603E00004EC30000603E00D2
+:10419000004FC30000603E00006CC300000200003E
+:1041A000006DC30000020000006EC30000020000AA
+:1041B000006FC300000200000074C300008168ACFF
+:1041C0000F75C300008168AC0F76C300008168AC36
+:1041D0000F77C300008168AC0FC4C300000100006A
+:1041E00000C5C3000001000000C6C30000010000BC
+:1041F00000C7C3000001000000ECC3000004000081
+:1042000000EDC3000004000000EEC3000004000045
+:1042100000EFC3000004000000FCC3000001000028
+:1042200000FDC3000001000000FEC300000100000B
+:1042300000FFC300000100000004C40000000400EF
+:104240000005C400000004000006C40000000400D3
+:104250000007C40000000400000CC40000000300BC
+:10426000000DC40000000300000EC40000000300A5
+:10427000000FC400000003000014C400000110007F
+:104280000015C400000110000016C4000001100059
+:104290000017C400000110000034C4000011000029
+:1042A0000035C400001100000036C40000110000F9
+:1042B0000037C400001100000074C400008168AC25
+:1042C0000F75C400008168AC0F76C400008168AC33
+:1042D0000F77C400008168AC0F7CC400000F0000A1
+:1042E000007DC400000F0000007EC400000F00002D
+:1042F000007FC400000F0000003CC50000603E00CD
+:10430000003DC50000603E00003EC50000603E006C
+:10431000003FC50000603E00005CC50000110000C9
+:10432000005DC50000110000005EC5000011000026
+:10433000005FC500001100000074C500000400000B
+:104340000075C500000400000076C50000040000F0
+:104350000077C500000400000084C50000010000D3
+:104360000085C500000100000086C50000010000B6
+:104370000087C50000010000008CC500000100009E
+:10438000008DC50000010000008EC5000001000086
+:10439000008FC5000001000000ACC5000001000056
+:1043A00000ADC5000001000000AEC5000001000026
+:1043B00000AFC5000001000000CCC50000010000F6
+:1043C00000CDC5000001000000CEC50000010000C6
+:1043D00000CFC5000001000000DCC50000010000A6
+:1043E00000DDC5000001000000DEC5000001000086
+:1043F00000DFC5000001000000F4C5000088247142
+:104400002AF5C500008824712AF6C50000882471A9
+:104410002AF7C500008824712A04C6000000C08560
+:104420004005C6000000C0854006C6000000C085EB
+:104430004007C6000000C085400CC60000400000D8
+:10444000000DC60000400000000EC6000040000045
+:10445000000FC600004000000014C600000001006C
+:104460000015C600000001000016C6000000010093
+:104470000017C60000000100001CC600000001017A
+:10448000001DC60000000101001EC6000000010161
+:10449000001FC600000001010024C60000000080CB
+:1044A0000225C600000000800226C6000000008031
+:1044B0000227C6000000008002A4C60000DFBFE3A0
+:1044C00004A5C60000DFBFE304A6C60000DFBFE30B
+:1044D00004A7C60000DFBFE304ACC60000DFBFE3F3
+:1044E00004ADC60000DFBFE304AEC60000DFBFE3DB
+:1044F00004AFC60000DFBFE304B4C6000001000043
+:1045000000B5C6000001000000B6C60000010000B2
+:1045100000B7C6000001000000C4C6000000FFFF95
+:1045200000C5C6000000FFFF00C6C6000000FFFF78
+:1045300000C7C6000000FFFF00CCC600000100005D
+:1045400000CDC6000001000000CEC6000001000042
+:1045500000CFC6000001000000E4C6000000FFFF1D
+:1045600000E5C6000000FFFF00E6C6000000FFFFF8
+:1045700000E7C6000000FFFF002CC700000100009C
+:10458000002DC70000010000002EC7000001000040
+:10459000002FC70000010000003CC7000001000020
+:1045A000003DC70000010000003EC7000001000000
+:1045B000003FC700000100000044C70000001020B9
+:1045C0003045C700000010203046C7000000102012
+:1045D0003047C70000001020304CC700004050603A
+:1045E000704DC70000405060704EC70000405060E2
+:1045F000704FC700004050607054C700008898A8F2
+:10460000B855C700008898A8B856C700008898A871
+:10461000B857C700008898A8B85CC70000C8D8E899
+:10462000F85DC70000C8D8E8F85EC70000C8D8E841
+:10463000F85FC70000C8D8E8F86CC700001A00008F
+:10464000006DC700001A0000006EC700001A0000CD
+:10465000006FC700001A000000E013010004000012
+:1046600000E813010004000000F0130100120C1018
+:104670000800140100120C100810140100140C089A
+:1046800000181401000100000020140100140C089F
+:104690000038140100120C1008401401002700001B
+:1046A0000058140100010000006832010001000000
+:1046B0000020330100120C100880330100000000BC
+:1046C00004883301000000000498330100800000DA
+:1046D00000B833010080000000C83301003F000033
+:1046E0000020340100020000002834010000000016
+:1046F000043034010000000004783401000400009C
+:104700000098340100040000002035010001000081
+:1047100000283501000110000030350100FFFF00C6
+:104720000038350100FFFF000040350100FFFF00A9
+:104730000048350100FFFF000050360100000080F6
+:104740003F583601000000803F60360100000080C5
+:104750003F683601000000803F7036010000008095
+:104760003F783601000000803F8036010000008065
+:104770003F883601000000803F9036010000008035
+:104780003F983601000000803FA036010000008005
+:104790003FA83601000000803FB0360100000080D5
+:1047A0003FB83601000000803FC0360100000080A5
+:1047B0003FC83601000000803FD0360100100000E5
+:1047C00000E03601000300000000370100120C1069
+:1047D0000809370100800000000A3701008000004E
+:1047E000000B370100800000000C37010080000042
+:1047F000000D370100800000000E3701008000002E
+:10480000000F370100800000001037010080000019
+:10481000001137010004700080123701000470009D
+:104820008013370100047000801437010004700009
+:1048300080153701000470008016370100047000F5
+:1048400080173701000470008018370100047000E1
+:104850008019370100000400041A37010000040029
+:10486000041B370100000400041C37010000040091
+:10487000041D370100000400041E3701000004007D
+:10488000041F370100000400042037010000040069
+:104890000421370100001000002237010000100041
+:1048A0000023370100001000002437010000100031
+:1048B000002537010000100000263701000010001D
+:1048C0000027370100001000002837010000100009
+:1048D0000039370100010000003A370100010000F3
+:1048E000003B370100010000003C370100010000DF
+:1048F000003D370100010000003E370100010000CB
+:10490000003F3701000100000040370100010000B6
+:104910000051370100001000005237010000100064
+:104920000053370100001000005437010000100050
+:10493000005537010000100000563701000010003C
+:104940000057370100001000005837010000100028
+:104950000059370100001000005A37010000100014
+:10496000005B370100001000005C37010000100000
+:10497000005D370100001000005E370100001000EC
+:10498000005F3701000010000060370100001000D8
+:1049900000613701000100000062370100010000E2
+:1049A00000633701000100000064370100010000CE
+:1049B00000653701000100000066370100010000BA
+:1049C00000673701000100000068370100010000A6
+:1049D000007137010004000000723701000400007C
+:1049E0000073370100040000007437010004000068
+:1049F0000075370100040000007637010004000054
+:104A0000007737010004000000783701000400003F
+:104A10000079370100020000007A3701000200002F
+:104A2000007B370100020000007C3701000200001B
+:104A3000007D370100020000007E37010002000007
+:104A4000007F3701000200000080370100020000F3
+:104A500000D937010080000000DA37010080000033
+:104A600000DB37010080000000DC3701008000001F
+:104A700000DD37010080000000DE3701008000000B
+:104A800000DF37010080000000E0370100800000F7
+:104A900000E137010004700080E23701000470007B
+:104AA00080E337010004700080E4370100047000E7
+:104AB00080E537010004700080E6370100047000D3
+:104AC00080E737010004700080E8370100047000BF
+:104AD00080E937010000040004EA37010000040007
+:104AE00004EB37010000040004EC3701000004006F
+:104AF00004ED37010000040004EE3701000004005B
+:104B000004EF37010000040004F037010000040046
+:104B100004F137010000100000F23701000010001E
+:104B200000F337010000100000F43701000010000E
+:104B300000F537010000100000F6370100001000FA
+:104B400000F737010000100000F8370100001000E6
+:104B50000009380100010000000A380100010000CE
+:104B6000000B380100010000000C380100010000BA
+:104B7000000D380100010000000E380100010000A6
+:104B8000000F380100010000001038010001000092
+:104B90000021380100001000002238010000100040
+:104BA000002338010000100000243801000010002C
+:104BB0000025380100001000002638010000100018
+:104BC0000027380100001000002838010000100004
+:104BD0000029380100001000002A380100001000F0
+:104BE000002B380100001000002C380100001000DC
+:104BF000002D380100001000002E380100001000C8
+:104C0000002F3801000010000030380100001000B3
+:104C100000313801000100000032380100010000BD
+:104C200000333801000100000034380100010000A9
+:104C30000035380100010000003638010001000095
+:104C40000037380100010000003838010001000081
+:104C50000041380100040000004238010004000057
+:104C60000043380100040000004438010004000043
+:104C7000004538010004000000463801000400002F
+:104C8000004738010004000000483801000400001B
+:104C90000049380100020000004A3801000200000B
+:104CA000004B380100020000004C380100020000F7
+:104CB000004D380100020000004E380100020000E3
+:104CC000004F3801000200000050380100020000CF
+:104CD00000A1380100120C1008A2380100120C10BB
+:104CE00008A3380100120C1008A4380100120C109F
+:104CF00008A5380100120C1008A6380100120C108B
+:104D000008A7380100120C1008A8380100120C1076
+:104D100008D9380100FFFF0000DA380100FFFF006A
+:104D200000DB380100FFFF0000DC380100FFFF005E
+:104D300000DD380100FFFF0000DE380100FFFF004A
+:104D400000DF380100FFFF0000E0380100FFFF0036
+:104D500000E1380100FFFF0000E2380100FFFF0022
+:104D600000E3380100FFFF0000E4380100FFFF000E
+:104D700000E5380100FFFF0000E6380100FFFF00FA
+:104D800000E7380100FFFF0000E8380100FFFF00E6
+:104D900000E9380100FFFF0000EA380100FFFF00D2
+:104DA00000EB380100FFFF0000EC380100FFFF00BE
+:104DB00000ED380100FFFF0000EE380100FFFF00AA
+:104DC00000EF380100FFFF0000F0380100FFFF0096
+:104DD00000F1380100FFFF0000F2380100FFFF0082
+:104DE00000F3380100FFFF0000F4380100FFFF006E
+:104DF00000F5380100FFFF0000F6380100FFFF005A
+:104E000000F7380100FFFF0000F8380100FFFF0045
+:104E100000F938010001000000FA3801000100002B
+:104E200000FB38010001000000FC38010001000017
+:104E300000FD38010001000000FE38010001000003
+:104E400000FF3801000100000000390100010000EE
+:104E500000013901000100010002390100010001D7
+:104E600000033901000100010004390100010001C3
+:104E700000053901000100010006390100010001AF
+:104E8000000739010001000100083901000100019B
+:104E90000009390100010001000A39010001000187
+:104EA000000B390100010001000C39010001000173
+:104EB000000D390100010001000E3901000100015F
+:104EC000000F39010001000100103901000100014B
+:104ED0000011390100010000001239010001000039
+:104EE0000013390100010000001439010001000025
+:104EF0000015390100010000001639010001000011
+:104F000000173901000100000018390100010000FC
+:104F1000002139010021FE01002239010021FE019A
+:104F2000002339010021FE01002439010021FE0186
+:104F3000002539010021FE01002639010021FE0172
+:104F4000002739010021FE01002839010021FE015E
+:104F50000051390100120C100852390100120C10D6
+:104F60000853390100120C100854390100120C10BA
+:104F70000855390100120C100856390100120C10A6
+:104F80000857390100120C100858390100120C1092
+:104F90000859390100040000005A390100040000DA
+:104FA000005B390100040000005C390100040000CE
+:104FB000005D390100040000005E390100040000BA
+:104FC000005F3901000400000060390100040000A6
+:104FD0000069390100020000006A39010002000086
+:104FE000006B390100020000006C39010002000072
+:104FF000006D390100020000006E3901000200005E
+:10500000006F390100020000007039010002000049
+:105010000071390100110000007239010011000017
+:105020000073390100110000007439010011000003
+:1050300000753901001100000076390100110000EF
+:1050400000773901001100000078390100110000DB
+:1050500000B93901008168AC0FBA3901008168AC30
+:105060000FBB3901008168AC0FBC3901008168AC0D
+:105070000FBD3901008168AC0FBE3901008168ACF9
+:105080000FBF3901008168AC0FC03901008168ACE5
+:105090000FE139010004000000E2390100040000C2
+:1050A00000E339010004000000E4390100040000BD
+:1050B00000E539010004000000E6390100040000A9
+:1050C00000E739010004000000E839010004000095
+:1050D00000313A010002000000323A0100020000F3
+:1050E00000333A010002000000343A0100020000DF
+:1050F00000353A010002000000363A0100020000CB
+:1051000000373A010002000000383A0100020000B6
+:1051100000393A0100010000003A3A0100010000A4
+:10512000003B3A0100010000003C3A010001000090
+:10513000003D3A0100010000003E3A01000100007C
+:10514000003F3A010001000000403A010001000068
+:1051500000413A010001000000423A010001000054
+:1051600000433A010001000000443A010001000040
+:1051700000453A010001000000463A01000100002C
+:1051800000473A010001000000483A010001000018
+:1051900000493A0100020000004A3A010002000002
+:1051A000004B3A0100020000004C3A0100020000EE
+:1051B000004D3A0100020000004E3A0100020000DA
+:1051C000004F3A010002000000503A0100020000C6
+:1051D00000513A010001000000523A0100010000B4
+:1051E00000533A010001000000543A0100010000A0
+:1051F00000553A010001000000563A01000100008C
+:1052000000573A010001000000583A010001000077
+:1052100000593A0100010000005A3A010001000063
+:10522000005B3A0100010000005C3A01000100004F
+:10523000005D3A0100010000005E3A01000100003B
+:10524000005F3A010001000000603A010001000027
+:1052500000613A010001000000623A010001000013
+:1052600000633A010001000000643A0100010000FF
+:1052700000653A010001000000663A0100010000EB
+:1052800000673A010001000000683A0100010000D7
+:1052900000713A010004000000723A0100040000AD
+:1052A00000733A010004000000743A010004000099
+:1052B00000753A010004000000763A010004000085
+:1052C00000773A010004000000783A010004000071
+:1052D0000079570100110000007A57010011000009
+:1052E000007B570100110000007C570100110000F5
+:1052F000007D570100110000007E570100110000E1
+:10530000007F5701001100000080570100110000CC
+:105310000089570100010000008A570100010000C8
+:10532000008B570100010000008C570100010000B4
+:10533000008D570100010000008E570100010000A0
+:10534000008F57010001000000905701000100008C
+:01535000005C
+:00000001FF
diff --git a/firmware/nouveau/nv84.ctxprog.ihex b/firmware/nouveau/nv84.ctxprog.ihex
new file mode 100644
index 0000000..3152784
--- /dev/null
+++ b/firmware/nouveau/nv84.ctxprog.ihex
@@ -0,0 +1,91 @@
+:100000004E5643500066018E0070009C0070002028
+:10001000002000080060004C005000890E400000E5
+:100020000020000700600000003000FF00C000005A
+:10003000002000FF008000090070004D6341004473
+:10004000294000052940000D294000063E410005D9
+:10005000006000C5154000110060000B274000C57E
+:100060002140000000700081007000040060004A20
+:10007000005000406F2100070060000128C0002EE2
+:1000800000200001008000CB005000FFFF9000FF27
+:10009000FF910020002000080060004C0050000983
+:1000A000006000453E41004D5941009D007000CF69
+:1000B0002D40009F0070009F005000C02A400000AB
+:1000C000022000080060004F2A4000C02A4000CCF7
+:1000D0003040008100700000002000060060000039
+:1000E000007000FC1B110083007000000030004015
+:1000F0006F210007006000010BC0001E00200001FE
+:10010000008000CB005000FF00C000800070008322
+:1001100000700047002000060060000A0211008005
+:100120000420000700600000003000FF00C000FF56
+:1001300000C8000749410016292000FF0080008CFC
+:10014000504000CB0050003F02A0004000200006BD
+:100150000060000F007000020217000A0211003256
+:100160000020000D02100042021C000203120002D7
+:1001700004140000051800090513005005150005BA
+:100180000611000F002000070610000007110000F4
+:1001900009110002091200000A1100020B160028C2
+:1001A0000B12002B0B1400010C11000014110005A0
+:1001B00014110007141100091411000B141100CBC5
+:1001C000002000001510000F7940004B79400040DE
+:1001D0004D2100070060003E042000FF0088008FD2
+:1001E0000070008C794000CB005000000000002B14
+:1001F000002000051A1000001C1300041C1200202F
+:100200001C1400251C1100401C1300441C1200602B
+:100210001C1400651C1100801C1300841C1200A01B
+:100220001C1400A51C1100C01C1300C41C1200E00B
+:100230001C1400E51C1100001F1300401F1900E0F2
+:10024000A14000ED01200006006000440020008075
+:10025000201000C6201100C9201500D02019000070
+:100260002112000321120000221600072212008032
+:100270002211000023110002231100802312008BA1
+:10028000231100942311009C231100E1BE4000546F
+:100290000220000600600044002000802410000FAF
+:1002A000AF40004BAF4000404D2100070060003ED2
+:1002B000042000FF0088008F0070008CAF4000CB4E
+:1002C00000500000000000C6241100C9241500D011
+:1002D000241900002512000325120000261600072D
+:1002E000261200802611000027110002271100802D
+:1002F0002712008B271100942711009C271100E280
+:10030000D14000BB022000060060004400200080B5
+:10031000281000C6281100C9281500D0281900008F
+:1003200029120003291200002A1600072A12008051
+:100330002A1100002B1100022B1100802B12008BC0
+:100340002B1100942B11009C2B1100E3EE40002296
+:100350000320000600600044002000802C10000FE5
+:10036000DF40004BDF4000404D2100070060003EB1
+:10037000042000FF0088008F0070008CDF4000CB5D
+:1003800000500000000000C62C1100C92C1500D040
+:100390002C1900002D1200032D1200002E1600074C
+:1003A0002E1200802E1100002F1100022F1100804C
+:1003B0002F12008B2F1100942F11009C2F1100E49D
+:1003C00001410089032000060060004400200080F5
+:1003D000301000C6301100C9301500D030190000AF
+:1003E0003112000331120000321600073212008071
+:1003F0003211000033110002331100803312008BE0
+:10040000331100943311009C331100E51E4100F0BC
+:100410000320000600600044002000803410000F1C
+:100420000F41004B0F4100404D2100070060003E8E
+:10043000042000FF0088008F0070008C0F4100CB6B
+:1004400000500000000000C6341100C9341500D06F
+:10045000341900003512000335120000361600076B
+:10046000361200803611000037110002371100806B
+:100470003712008B371100943711009C37110000A0
+:100480000000000F254100CB005000404D21000727
+:100490000060003E042000FF008800CB0050008771
+:1004A0002841000A0060000000000000374100A061
+:1004B00000700080007000800420000700600004CD
+:1004C000002000FF00C000FF008000CB00500000B3
+:1004D0000070000000200006006000FE1B11004DAF
+:1004E000594100000070000000200006006000FE7E
+:1004F0001B1100800070001D0070004D1140008134
+:10050000007000040060004A005000884341000B66
+:100510000060000000200006006000000070000B7A
+:10052000594100FD1B11004D42400016292000FDDD
+:10053000008000CB0050000200C0008004200007B3
+:100540000060006001200002008000CB005000022B
+:1005500018C000B627200002008000CB0050004DDC
+:100560004E40000B0060004D57410001007000CF6D
+:1005700000500003007000065E4100055F41000D61
+:10058000006000050070000D007000060070000B98
+:0F0590000070000E0070001C0070000C00600076
+:00000001FF
diff --git a/firmware/nouveau/nv84.ctxvals.ihex b/firmware/nouveau/nv84.ctxvals.ihex
new file mode 100644
index 0000000..6b69a50
--- /dev/null
+++ b/firmware/nouveau/nv84.ctxvals.ihex
@@ -0,0 +1,557 @@
+:100000004E564356005504000043000000300000E7
+:10001000004C00000002000000750000000300001A
+:10002000007600000000100000860000000CFE00BA
+:10003000008B000000001000009600000087010007
+:10004000009B000000181000009C000000FF000052
+:1000500000AB00000004000000AC000000DF004D19
+:1000600004AE00000000060000B400000000000024
+:1000700001B5000000FF000000B700000000040010
+:1000800000BD00000001000000BE00000080000E66
+:1000900000BF00000004000000C6000000020000D5
+:1000A00000C700000001000000CA000000010000BD
+:1000B00000CB00000000010000D1000000020000A1
+:1000C00000D200000001000000D300000001000089
+:1000D00000D700000001000000D8000000FFFF3F33
+:1000E00000D9000000FF1F0000DB0000000100003D
+:1000F00000DC00000001000000DE00000001000044
+:1001000000DF00000001000000E00000000100002E
+:1001100000E100000004000000E200000001000017
+:1001200000E300000001000000E400000001000006
+:1001300000E500000007000000E6000000010000EC
+:1001400000E700000007000000E8000000010000D8
+:1001500000E900000001000000EA000000010000CA
+:1001600000EF00000001000000F0000000000100AE
+:1001700000F200000001000000F500000000010096
+:1001800000F600000001000000F700000000010080
+:1001900000F900000001000000FC00000000010068
+:1001A00000010100000400000002010000700000D6
+:1001B000000301000080000000080100000C0000A6
+:1001C000000A010000080000000B010000140000FC
+:1001D000000D010000290000000E010000270000B2
+:1001E000000F0100002600000010010000080000C0
+:1001F00000110100000400000012010000270000AF
+:1002000000150100000100000016010000020000BE
+:1002100000170100000300000018010000040000A6
+:100220000019010000050000001A0100000600008E
+:10023000001B010000070000001C0100000100007D
+:10024000002D010000CF00000039010000800000F7
+:10025000003A010000040000003B0100000400001F
+:10026000003C010000030000003D0100000100000F
+:1002700000400100001200000041010000100000D9
+:1002800000420100000C00000043010000010000DA
+:1002900000470100000400000048010000020000C7
+:1002A0000049010000040000004C010000FFFF3F76
+:1002B000004D010000FF1F00005701000004000076
+:1002C0000058010000140000005901000001000066
+:1002D000005C010000020000005F0100000100005E
+:1002E0000061010000020000006201000000100037
+:1002F0000063010000000E00006401000000100017
+:100300000065010000001E00006701000001000000
+:100310000068010000010000006901000001000008
+:10032000006A010000010000006B010000010000F4
+:10033000006F0100000002000071010000010000D8
+:1003400000720100007000000073010000800000D6
+:10035000007601000001000000770100007000003D
+:100360000078010000800000007C01000001000016
+:10037000007D010000CF0000007F010000010000AF
+:100380000083010000CF0000008501000002000092
+:100390000087010000010000008901000001000049
+:1003A000008B010000CF0000008C010000CF000096
+:1003B000008D010000010000008F010000800F008F
+:1003C00000A101000080007F00B001000080007FDC
+:1003D00000B901000021F8743BBA0100000180055A
+:1003E00089BC01000000100000BD0100001F0000DA
+:1003F00000BE010000FA107C02BF010000C0000036
+:1004000040C0010000802089B7C301000021F874BA
+:100410003BC401000001800589C6010000001000F6
+:1004200000C70100001F000000C8010000FA107C96
+:1004300002C9010000C0000040CA010000802089FC
+:10044000B7CD01000021F8743BCE0100000180050A
+:1004500089D001000000100000D10100001F000041
+:1004600000D2010000FA107C02D3010000C000009D
+:1004700040D4010000802089B7D701000021F87422
+:100480003BD801000001800589DA0100000010005E
+:1004900000DB0100001F000000DC010000FA107CFE
+:1004A00002DD010000C0000040DE01000080208964
+:1004B000B7E101000040000100E30100002200005C
+:1004C00000E601000040000100E7010000220000FA
+:1004D00000ED01000000008001EE010000000016A8
+:1004E00000EF01000000008001F3010000FFFF03A6
+:1004F00000F401000000008800FD0100000104017B
+:1005000000FF0100007800000001020000BF0000B1
+:10051000000302000010120000040200008000002E
+:10052000080D020000000080010E0200000000160D
+:10053000000F0200000000800113020000FFFF0313
+:100540000014020000000088001D020000010401E8
+:10055000001F0200007800000021020000BF000020
+:10056000002302000010120000240200008000009E
+:10057000082E0200007070020031020000FFFFFF31
+:1005800003370200000704120038020000071509B3
+:100590000539020000020210053A020000010203C0
+:1005A000004102000040000000420200000A0B0C63
+:1005B0000D430200001012140044020000F001007C
+:1005C0000045020000010000004602000003000098
+:1005D0000049020000009E03004A020000000100E2
+:1005E000004B020000003800004C02000040404078
+:1005F000004D0200000AFF00004F02000005F077E6
+:100600000050020000FF7F3F005402000000008005
+:100610000155020000000016005602000000008094
+:10062000015A020000FFFF03005B02000000008887
+:10063000006402000001040100660200007800006E
+:100640000068020000BF0000006A020000101200F3
+:10065000006B0200008000000874020000000080AF
+:100660000175020000000016007602000000008004
+:10067000017A020000FFFF03007B020000000088F7
+:1006800000840200000104010086020000780000DE
+:100690000088020000BF0000008A02000010120063
+:1006A000008B0200008000000895020000707002BC
+:1006B0000098020000FFFFFF039E020000070412E3
+:1006C000009F02000007150905A0020000020210A9
+:1006D00005A102000001020300A802000040000082
+:1006E00000A90200000A0B0C0DAA0200001012144F
+:1006F00000AB020000F0010000AC020000010000AD
+:1007000000AD02000003000000B0020000009E03E4
+:1007100000B102000000010000B202000000380039
+:1007200000B302000040404000B40200000AFF0095
+:1007300000B602000005F07700B7020000FF7F3F1F
+:1007400000BB02000000008001BC02000000001697
+:1007500000BD02000000008001C1020000FFFF0395
+:1007600000C202000000008800CB0200000104016A
+:1007700000CD02000078000000CF020000BF0000A2
+:1007800000D102000010120000D202000080000020
+:1007900008DB02000000008001DC020000000016FF
+:1007A00000DD02000000008001E1020000FFFF0305
+:1007B00000E202000000008800EB020000010401DA
+:1007C00000ED02000078000000EF020000BF000012
+:1007D00000F102000010120000F202000080000090
+:1007E00008FC02000070700200FF020000FFFFFF23
+:1007F00003050300000704120006030000071509A3
+:1008000005070300000202100508030000010203AF
+:10081000000F03000040000000100300000A0B0C52
+:100820000D110300001012140012030000F001006B
+:100830000013030000010000001403000003000087
+:100840000017030000009E030018030000000100D1
+:100850000019030000003800001A03000040404067
+:10086000001B0300000AFF00001D03000005F077D5
+:10087000001E030000FF7F3F0022030000000080F5
+:100880000123030000000016002403000000008084
+:100890000128030000FFFF03002903000000008877
+:1008A000003203000001040100340300007800005E
+:1008B0000036030000BF00000038030000101200E3
+:1008C000003903000080000008420300000000809F
+:1008D00001430300000000160044030000000080F4
+:1008E0000148030000FFFF030049030000000088E7
+:1008F00000520300000104010054030000780000CE
+:100900000056030000BF0000005803000010120052
+:1009100000590300008000000863030000707002AB
+:100920000066030000FFFFFF036C030000070412D2
+:10093000006D030000071509056E03000002021098
+:10094000056F030000010203007603000040000071
+:1009500000770300000A0B0C0D780300001012143E
+:100960000079030000F00100007A0300000100009C
+:10097000007B030000030000007E030000009E03D4
+:10098000007F030000000100008003000000380029
+:10099000008103000040404000820300000AFF0085
+:1009A000008403000005F0770085030000FF7F3F0F
+:1009B0000089030000000080018A03000000001687
+:1009C000008B030000000080018F030000FFFF0385
+:1009D000009003000000008800990300000104015A
+:1009E000009B030000780000009D030000BF000092
+:1009F000009F03000010120000A003000080000010
+:100A000008A903000000008001AA030000000016EE
+:100A100000AB03000000008001AF030000FFFF03F4
+:100A200000B003000000008800B9030000010401C9
+:100A300000BB03000078000000BD030000BF000001
+:100A400000BF03000010120000C00300008000007F
+:100A500008CA03000070700200CD030000FFFFFF12
+:100A600003D303000007041200D403000007150994
+:100A700005D503000002021005D6030000010203A1
+:100A800000DD03000040000000DE0300000A0B0C44
+:100A90000DDF03000010121400E0030000F001005D
+:100AA00000E103000001000000E203000003000079
+:100AB00000E5030000009E0300E6030000000100C3
+:100AC00000E703000000380000E803000040404059
+:100AD00000E90300000AFF0000EB03000005F077C7
+:100AE00000EC030000FF7F3F00F0030000000080E7
+:100AF00001F103000000001600F203000000008076
+:100B000001F6030000FFFF0300F703000000008868
+:100B1000000004000001040100020400007800004D
+:100B20000004040000BF00000006040000101200D2
+:100B3000000704000080000008100400000000808E
+:100B400001110400000000160012040000000080E3
+:100B50000116040000FFFF030017040000000088D6
+:100B600000200400000104010022040000780000BD
+:100B70000024040000BF0000002604000010120042
+:100B8000002704000080000008310400007070029B
+:100B90000034040000FFFFFF033A040000070412C2
+:100BA000003B040000071509053C04000002021088
+:100BB000053D040000010203004404000040000061
+:100BC00000450400000A0B0C0D460400001012142E
+:100BD0000047040000F0010000480400000100008C
+:100BE0000049040000030000004C040000009E03C4
+:100BF000004D040000000100004E04000000380019
+:100C0000004F04000040404000500400000AFF0074
+:100C1000005204000005F0770053040000FF7F3FFE
+:100C2000008C04000004000000A10400000F00007C
+:100C300000C304000002000000C9040000200000FE
+:100C400000D304000067FE1F003B05000001000008
+:100C5000003C05000004000000410500001A0000EF
+:100C600000430500001000000044050000040000DF
+:100C7000004C050000808060005B05000001000062
+:100C80000074050000040000008C05000004000052
+:100C9000009305000002000000940500000400001D
+:100CA000009C05000080000000A405000004000076
+:100CB00000B105000004000000B9050000040000B8
+:100CC00000C905000004000000D105000008000074
+:100CD00000DB05000001000000E1050000FF070047
+:100CE00000E305000010000000F305000001000013
+:100CF00000490600000F00000093060000100000ED
+:100D000000CC06000004000000D4060000800000B3
+:100D100000DC06000004000000E406000000010200
+:100D200003EC06000003000000F4060000040000CD
+:100D3000001B0700000000803F1C070000040000AB
+:100D400000230700000000803F240700000300008C
+:100D5000002B0700000000803F33070000000080E8
+:100D60003F3B0700000000803F4307000000008079
+:100D70003F44070000040000004B07000000008013
+:100D80003F530700000000803F5B07000000008029
+:100D90003F630700000000803F6B070000000080F9
+:100DA0003F730700000000803F7B070000000080C9
+:100DB0003F830700000000803F8B07000000008099
+:100DC0003F930700000000803F6308000010000010
+:100DD00000730800003F000000AB080000010000A5
+:100DE00000BB08000001000000CB0800000100006B
+:100DF000003309000011000000730900000F00001B
+:100E000000B309000011000000EB09000001000020
+:100E100000F309000001000000FB090000010000D0
+:100E200000030A0000020000000B0A00000100009D
+:100E300000130A0000020000001B0A00000100006D
+:100E4000002B0A000067FE1F003B0A00008168AC0F
+:100E50000FEB0A000001000000F30A00000200008E
+:100E600000FB0A000001000000030B00000100006D
+:100E7000000B0B000002000000130B00000100003B
+:100E8000001B0B0000010000003B0B0000110000E4
+:100E900000430B000001000000630E000002000090
+:100EA00000730E000067FE1F00DB0E000001000053
+:100EB00000E30E000010000000FB0E000001000027
+:100EC00000330F0000020000007B0F000001000053
+:100ED00000810F00000F000000830F0000100000D1
+:100EE00000910F000001000000930F0000010000BE
+:100EF000003310000010000000BB10000000008054
+:100F00003FC31000000000803FCB100000000080B5
+:100F10003FD31000000000803FDB10000000008085
+:100F20003FE31000000000803FEB10000000008055
+:100F30003FF31000000000803FFB10000000008025
+:100F40003F031100000000803F0B110000000080F3
+:100F50003F131100000000803F1B110000000080C3
+:100F60003F231100000000803F2B11000000008093
+:100F70003F331100000000803F031200001000000A
+:100F800000131200003F0000004B1200000100009F
+:100F9000005B12000001000000691200000F000059
+:100FA000006B12000001000000D3120000110000CD
+:100FB00000131300000F0000005313000011000085
+:100FC000008B1300000100000093130000010000DB
+:100FD000009B13000001000000A3130000020000AA
+:100FE00000AB13000001000000B31300000200007A
+:100FF00000BB13000001000000CB13000067FE1FC0
+:1010000000DB1300008168AC0F8B140000010000AE
+:101010000093140000020000009B14000001000077
+:1010200000A314000001000000AB14000002000047
+:1010300000B314000001000000BB14000001000018
+:1010400000DB14000011000000E3140000010000A8
+:1010500000E820000021000000F020000001000056
+:1010600000F8200000020000000021000000010044
+:101070000008210000000100001021000001000014
+:1010800000282100000100000030210000020000C3
+:101090000038210000000100004021000000010094
+:1010A00000482100000100000090470000040000FB
+:1010B000009847000004000000115400000F0000D9
+:1010C00000B954000001000000C1540000000100FC
+:1010D00000C954000000010000D1540000110000BC
+:1010E00000E154000008000000115500000100005C
+:1010F00000215500000100000029550000010000FA
+:1011000000315500000100000039550000CF0000FB
+:101110000041550000020000007955000001000068
+:1011200000895500000100000091550000010000F9
+:10113000009955000001000000C1550000040000A6
+:1011400000D155000001000000D955000015000035
+:1011500000F955000080444404D9570000120C10D7
+:1011600008015800000001000019580000010001AA
+:101170000029580000010001003158000001000062
+:101180000039580000010001004158000001000032
+:1011900000495800000400000051580000020000FF
+:1011A000006C5800000400000072580000FFFF3F70
+:1011B0000074580000030000008A580000FF1F0060
+:1011C00000025900000000803F045900000F000099
+:1011D000003A59000004000000425900001A0000C3
+:1011E000005A59000001000000645900000400008A
+:1011F000006C590000FFFF000074590000FFFF0061
+:10120000007C590000FFFF000084590000FFFF0030
+:1012100000CC59000001000000EC59000001000062
+:1012200000F259000000FFFF001C5A0000010000FE
+:10123000002A5A00000F0000006A5A00008168ACC2
+:101240000F725A000011000000845A0000010000D3
+:10125000008C5A000001000000945A0000020000B7
+:10126000009C5A000001000000A45A000001000088
+:1012700000AC5A000002000000B45A000001000057
+:1012800000C45A000011000000F25A0000040000DF
+:1012900000045B00008168AC0F1A5B0000020000D4
+:1012A000001C5B000004000000225B000000000046
+:1012B000042A5B0000000000043C5B0000110000F9
+:1012C00000445B0000010000004A5B0000050000D4
+:1012D00000525B000052000000545B0000CF000091
+:1012E000005C5B0000CF000000645B0000CF0000EA
+:1012F000007A5B000001000000BC5B000001000000
+:1013000000C45B000001000000CC5B000002000094
+:1013100000D45B000001000000DC5B000001000065
+:1013200000E45B000002000000EC5B000001000034
+:1013300000FC5B000001000000025C000000008077
+:101340003F045C0000010000000A5C000000008017
+:101350003F0C5C000001000000125C0000000080F7
+:101360003F145C0000010000001A5C0000000080D7
+:101370003F1C5C000001000000225C0000000080B7
+:101380003F245C0000010000002A5C000000008097
+:101390003F2C5C000001000000325C000000008077
+:1013A0003F345C0000010000003A5C000000008057
+:1013B0003F3C5C000011000000425C000000008027
+:1013C0003F4A5C00000000803F525C00000000804B
+:1013D0003F5A5C00000000803F625C00000000801B
+:1013E0003F6A5C00000000803F725C0000000080EB
+:1013F0003F7A5C00000000803F7C5C00008168ACAC
+:101400000F825C000010000000845C00000F0000F0
+:1014100000C45C000067FE1F00DC5C0000110000DF
+:1014200000E45C000001000000045D000004000016
+:1014300000345D0000010000005C5D000011000050
+:10144000009C5D00008168AC0FBA5D0000120C10BA
+:1014500008BC5D000011000000C25D000005000036
+:1014600000C45D000001000000D45D000001000028
+:1014700000DA5D000001000000E45D0000010000F2
+:1014800000EA5D0000FFFF0000F25D0000FFFF00CA
+:1014900000F45D0000FF070000FA5D0000FFFF00A0
+:1014A00000025E0000FFFF0000045E00000100007B
+:1014B000000A5E000003000000145E00000100004E
+:1014C00000F15E0000DFBFE304F95E0000DFBFE370
+:1014D000040A5F000000FFFF00125F00001A000016
+:1014E00000215F00008168AC0F225F000003000054
+:1014F000006C5F000008000000745F00000800003E
+:10150000007C5F000008000000815F0000DFBFE397
+:1015100004845F000008000000895F0000DFBFE373
+:10152000048C5F000008000000945F0000080000C9
+:10153000009C5F000008000000A45F00000800009D
+:1015400000AC5F000011000000EC5F00008168AC9F
+:101550000FF45F000000040000FC5F0000000400C6
+:101560000004600000000400000C600000000400A3
+:101570000014600000000400001C60000000040073
+:101580000024600000000400002C60000000040043
+:101590000034600000000300003C60000000030015
+:1015A0000044600000000300004C600000000300E5
+:1015B0000054600000000300005A600000020100B7
+:1015C000005C600000000300006460000000030095
+:1015D000006A600000040000006C6000000003006E
+:1015E0000072600000040000007460000001000050
+:1015F000007A600000040000007C6000000F000022
+:101600000082600000040000008A60000004000006
+:10161000009260000004000000A2600000FF0700CC
+:1016200000B260000002010000BC60000020000069
+:1016300000C460000011000000CC60000000010048
+:1016400000DC60000001000000F4600000400000C9
+:1016500000FC6000000001000002610000040000C6
+:10166000000A610000040000000C6100000300009B
+:101670000012610000040000001A61000004000074
+:10168000003461000067FE1F00546100000200008A
+:10169000005C6100008168AC0FAC610000010000DB
+:1016A00000D461000004000000E4610000010000BB
+:1016B00000EC61000000040000F461000000030081
+:1016C00000FC610000011000001C6200001100001D
+:1016D000005C6200008168AC0F646200000F0000D3
+:1016E00000AA620000140C0800C262000004080096
+:1016F00000D262000004000000DA62000004000072
+:1017000000E2620000120C1008F262000004000007
+:1017100000FA620000040000000A630000100000EC
+:10172000002463000067FE1F00326300000408000D
+:10173000003A63000001000000426300001A00004C
+:101740000044630000110000004A6300007F0000B5
+:10175000005A630000010000005C63000004000008
+:101760000062630000140C08006C630000010000BC
+:101770000072630000120C10087463000001000086
+:10178000007A63000004000000826300000400008F
+:10179000009263000010000000946300000100004C
+:1017A00000B263000001000000BA630000120C10D8
+:1017B00008BC63000001000000CC630000010000D1
+:1017C00000EC6300008824712AF2630000FF070028
+:1017D00000FA630000140C0800FC63000000C085E0
+:1017E0004004640000400000000C640000000100A0
+:1017F0000014640000000101001C6400000000806F
+:1018000002B4640000DFBFE304BC640000DFBFE398
+:1018100004C464000001000000D464000000FFFF65
+:1018200000DC64000001000000F464000000FFFF21
+:10183000003C650000010000004C65000001000054
+:101840000054650000001020305C650000405060CE
+:1018500070646500008898A8B86C650000C8D8E876
+:10186000F87C6500001A0000008C65000004000090
+:1018700000C265000001000000DA650000100000F1
+:10188000003C660000040000004466000004000004
+:10189000004C660000808060007466000004000058
+:1018A000008C660000040000009466000004000044
+:1018B000009C66000080000000A466000004000098
+:1018C00000A267000088000000AA670000880000EE
+:1018D00000C267000004000000CC670000040000A4
+:1018E00000D467000080000000DC670000040000F6
+:1018F00000E467000000010203EC67000003000041
+:1019000000F4670000040000001C680000040000F0
+:101910000024680000030000004468000004000088
+:10192000007A680000260000009268000000008035
+:101930003FB26800001A000000BA68000010000002
+:1019400000026A000052000000126A000026000037
+:1019500000226A0000040000002A6A00000400005F
+:10196000003A6A00001A000000526A000000FFFFFF
+:1019700000626A0000040000006A6A0000040000BF
+:10198000007A6A000080000000826A000004000003
+:10199000008A6A0000140C08009A6A0000FF070021
+:1019A00000B2B4000004000000BAB400000400005B
+:1019B00000CAB4000080000000D2B400000400009F
+:1019C00000DAB4000001000000EAB40000270000C3
+:1019D00000FAB40000260000001AB5000000000064
+:1019E0000422B50000000000042AB5000000000039
+:1019F0000432B50000000000043AB5000000000009
+:101A00000442B50000000000044AB50000000000D8
+:101A10000452B50000000000045AB50000000000A8
+:101A20000462B50000000000046AB5000000000078
+:101A30000472B50000000000047AB5000000000048
+:101A40000482B50000000000048AB5000000000018
+:101A50000492B5000000000004BAB60000DFBFE346
+:101A600004C2B60000DFBFE304DAB6000021FE01C5
+:101A7000006CB900000400000074B900000300000D
+:101A80000004BA00000F00000064BA000004000067
+:101A9000006CBA0000FFFF000074BA0000FFFF00F6
+:101AA000007CBA0000FFFF000084BA0000FFFF00C6
+:101AB00000CCBA000001000000ECBA0000010000F8
+:101AC000001CBB00000100000084BB0000010000FE
+:101AD000008CBB00000100000094BB00000200006D
+:101AE000009CBB000001000000A4BB00000100003E
+:101AF00000ACBB000002000000B4BB00000100000D
+:101B000000C4BB00001100000004BC00008168ACF0
+:101B10000F1CBC0000040000003CBC0000110000D1
+:101B20000044BC00000100000054BC0000CF0000D5
+:101B3000005CBC0000CF00000064BC0000CF0000CF
+:101B400000BCBC000001000000C4BC00000100009B
+:101B500000CCBC000002000000D4BC00000100006A
+:101B600000DCBC000001000000E4BC00000200003A
+:101B700000ECBC000001000000FCBC000001000003
+:101B80000004BD0000010000000CBD0000010000C9
+:101B90000014BD0000010000001CBD000001000099
+:101BA0000024BD0000010000002CBD000001000069
+:101BB0000034BD0000010000003CBD000011000029
+:101BC000007CBD00008168AC0F84BD00000F0000E8
+:101BD00000C4BD000067FE1F00DCBD000011000056
+:101BE00000E4BD00000100000004BE00000400008D
+:101BF0000034BE0000010000005CBE0000110000C7
+:101C0000009CBE00008168AC0FBCBE00001100004B
+:101C100000C4BE000001000000D4BE0000010000AE
+:101C200000E4BE000001000000F4BE0000FF070059
+:101C30000004BF00000100000014BF00000100000C
+:101C4000006CC000000800000074C0000008000024
+:101C5000007CC000000800000084C00000080000F4
+:101C6000008CC000000800000094C00000080000C4
+:101C7000009CC0000008000000A4C0000008000094
+:101C800000ACC0000011000000ECC000008168AC96
+:101C90000FF4C0000000040000FCC00000000400BD
+:101CA0000004C10000000400000CC100000004009A
+:101CB0000014C10000000400001CC100000004006A
+:101CC0000024C10000000400002CC100000004003A
+:101CD0000034C10000000300003CC100000003000C
+:101CE0000044C10000000300004CC10000000300DC
+:101CF0000054C10000000300005CC10000000300AC
+:101D00000064C10000000300006CC100000003007B
+:101D10000074C10000010000007CC100000F000041
+:101D200000BCC1000020000000C4C1000011000080
+:101D300000CCC1000000010000DCC1000001000077
+:101D400000F4C1000040000000FCC10000000100E0
+:101D5000000CC200000300000034C2000067FE1F38
+:101D60000054C20000020000005CC200008168ACA8
+:101D70000FACC2000001000000D4C200000400004B
+:101D800000E4C2000001000000ECC20000000400FA
+:101D900000F4C2000000030000FCC20000011000BB
+:101DA000001CC30000110000005CC300008168AC8F
+:101DB0000F64C300000F00000024C4000067FE1F72
+:101DC0000044C40000110000005CC40000040000D6
+:101DD000006CC400000100000074C4000001000099
+:101DE0000094C4000001000000BCC4000001000019
+:101DF00000CCC4000001000000ECC4000088247185
+:101E00002AFCC4000000C0854004C500004000005A
+:101E1000000CC500000001000014C5000000010115
+:101E2000001CC5000000008002B4C50000DFBFE355
+:101E300004BCC50000DFBFE304C4C500000100000E
+:101E400000D4C5000000FFFF00DCC5000001000059
+:101E500000F4C5000000FFFF003CC60000010000C8
+:101E6000004CC600000100000054C6000000102015
+:101E7000305CC600004050607064C600008898A8BE
+:101E8000B86CC60000C8D8E8F87CC600001A00008C
+:101E900000F829010004000000002A0100040000ED
+:101EA00000082A0100120C1008102A01000300008B
+:101EB00000202A0100120C1008302A0100140C081E
+:101EC00000382A010001000000402A0100140C081B
+:101ED00000582A0100120C1008602A010027000097
+:101EE00000782A010001000000884801000100007C
+:101EF0000040490100120C1008A849010000000030
+:101F000004B049010000000004C049010080000045
+:101F100000E049010080000000F04901003F00009E
+:101F200000484A010002000000504A010000000081
+:101F300004584A010000000004A04A010004000007
+:101F400000C04A010004000000504B0100010000E5
+:101F500000584B010001100000604B0100FFFF0022
+:101F600000684B0100FFFF0000704B0100FFFF0005
+:101F700000784B0100FFFF0000804C010000008052
+:101F80003F884C01000000803F904C010000008021
+:101F90003F984C01000000803FA04C0100000080F1
+:101FA0003FA84C01000000803FB04C0100000080C1
+:101FB0003FB84C01000000803FC04C010000008091
+:101FC0003FC84C01000000803FD04C010000008061
+:101FD0003FD84C01000000803FE04C010000008031
+:101FE0003FE84C01000000803FF04C010000008001
+:101FF0003FF84C01000000803F004D010010000040
+:1020000000184D010003000000404D0100120C10AB
+:1020100008494D010080000000504D010080000083
+:1020200000514D010004700080584D010004700003
+:1020300080594D010000040004604D0100000400BF
+:1020400004614D010000100000684D010000100007
+:1020500000794D010001000000804D0100010000E9
+:1020600000914D010001000000984D0100010000A9
+:1020700000A14D010004000000A84D010004000073
+:1020800000A94D010002000000B04D010002000057
+:1020900000094E010080000000104E010080000089
+:1020A00000114E010004700080184E010004700001
+:1020B00080194E010000040004204E0100000400BD
+:1020C00004214E010000100000284E010000100005
+:1020D00000394E010001000000404E0100010000E7
+:1020E00000514E010001000000584E0100010000A7
+:1020F00000614E010004000000684E010004000071
+:1021000000694E010002000000704E010002000054
+:1021100000C14E0100120C1008C84E0100120C1034
+:1021200008F94E0100FFFF0000004F0100FFFF0013
+:1021300000014F0100FFFF0000084F0100FFFF00FA
+:1021400000094F0100FFFF0000104F0100FFFF00DA
+:1021500000114F0100FFFF0000184F0100FFFF00BA
+:1021600000194F010001000000204F010001000094
+:1021700000214F010001000100284F010001000172
+:1021800000294F010001000100304F010001000152
+:1021900000314F010001000000384F010001000034
+:1021A00000414F010021FE0100484F010021FE01C6
+:1021B00000714F0100120C1008784F0100120C1032
+:1021C00008794F010004000000804F010004000066
+:1021D00000894F010002000000904F010002000042
+:1021E00000914F010011000000984F010011000004
+:1021F00000D94F01008168AC0FE04F01008168AC4D
+:102200000F0150010004000000085001000400000C
+:10221000005150010002000000585001000200006F
+:102220000059500100010000006050010001000051
+:102230000061500100010000006850010001000031
+:10224000006950010002000000705001000200000F
+:1022500000715001000100000078500100010000F1
+:1022600000795001000100000080500100010000D1
+:1022700000815001000100000088500100010000B1
+:10228000009150010004000000985001000400007B
+:1022900000A96D010011000000B06D0100110000E7
+:1022A00000B96D010001000000C06D0100010000D7
+:0122B000002D
+:00000001FF
diff --git a/firmware/nouveau/nv86.ctxprog.ihex b/firmware/nouveau/nv86.ctxprog.ihex
new file mode 100644
index 0000000..c341adf
--- /dev/null
+++ b/firmware/nouveau/nv86.ctxprog.ihex
@@ -0,0 +1,58 @@
+:100000004E56435000DF008E0070009C00700020B0
+:10001000002000080060004C005000890E400000E5
+:100020000020000700600000003000FF00C000005A
+:10003000002000FF008000090070004DDD400044FA
+:10004000294000052940000D29400006B94000055F
+:10005000006000C5154000110060000B274000C57E
+:100060002140000000700081007000040060004A20
+:10007000005000806D2100070060000128C0002EA4
+:1000800000200001008000CB005000FFFF9000FF27
+:10009000FF910020002000080060004C0050000983
+:1000A00000600045B940004DD440009D007000CF75
+:1000B0002D40009F0070009F005000C02A400000AB
+:1000C000022000080060004F2A4000C02A4000CCF7
+:1000D0003040008100700000002000060060000039
+:1000E000007000FC1B1100830070000000300080D5
+:1000F0006D210007006000010BC0001E0020000100
+:10010000008000CB005000FF00C000800070008322
+:1001100000700047002000060060000A0211008005
+:100120000220000700600000003000FF00C000FF58
+:1001300000C80007C4400016292000FF0080008C82
+:10014000504000CB0050003F02A0004000200006BD
+:100150000060000F007000020217000A0211003256
+:100160000020000D02100042021C000203120002D7
+:1001700004140000051800090513005005150005BA
+:100180000611000F002000070610000007110000F4
+:1001900009110002091200000A1100020B160028C2
+:1001A0000B12002B0B1400010C11000014110005A0
+:1001B00014110007141100091411000B141100CBC5
+:1001C000002000001510000F7940004B79400040DE
+:1001D0004B21000700600042042000FF0088008FD0
+:1001E0000070008C794000CB005000000000002B14
+:1001F000002000051A1000001C1300041C1200202F
+:100200001C1400251C1100401C1300441C1200602B
+:100210001C1400651C1100001F1300401F1900E092
+:10022000994000D9012000060060004400200080B1
+:10023000201000C6201100C9201500D02019000090
+:100240002112000321120000221600072212008052
+:100250002211000023110002231100802312008BC1
+:10026000231100942311009C231100000000000FB3
+:10027000A04000CB005000404B210007006000422E
+:10028000042000FF008800CB00500087A340000A34
+:100290000060000000000000B24000A0007000807C
+:1002A000007000800220000700600004002000FFB2
+:1002B00000C000FF008000CB005000000070000074
+:1002C00000200006006000FE1B11004DD44000001D
+:1002D0000070000000200006006000FE1B1100807E
+:1002E0000070001D0070004D11400081007000047E
+:1002F0000060004A00500088BE40000B0060000013
+:1003000000200006006000000070000BD44000FDDB
+:100310001B11004D42400016292000FD008000CB3B
+:100320000050000200C00080022000070060006052
+:1003300001200002008000CB0050000218C000B66F
+:1003400027200002008000CB0050004D4E40000BE3
+:100350000060004DD24000010070000300700006F4
+:10036000D8400005D940000D006000050070000D68
+:10037000007000060070000B0070000E0070000C92
+:030380000060001A
+:00000001FF
diff --git a/firmware/nouveau/nv86.ctxvals.ihex b/firmware/nouveau/nv86.ctxvals.ihex
new file mode 100644
index 0000000..e8c1b3e
--- /dev/null
+++ b/firmware/nouveau/nv86.ctxvals.ihex
@@ -0,0 +1,340 @@
+:100000004E56435600A4020000430000003000009A
+:1000100000750000000300000076000000001000E2
+:1000200000860000000CFE00008B000000001000A5
+:100030000096000000870100009B000000181000DF
+:10004000009C000000FF000000AB00000004000066
+:1000500000AC000000DF004D04AE00000000060010
+:1000600000B400000000000001B5000000FF000027
+:1000700000B700000000040000BD00000001000007
+:1000800000BE00000080000000BF0000000400006F
+:1000900000C600000002000000C7000000010000D0
+:1000A00000CA00000001000000CB000000000100B9
+:1000B00000D100000002000000D20000000100009A
+:1000C00000D300000001000000D700000001000084
+:1000D00000D8000000FFFF3F00D9000000FF1F0014
+:1000E00000DB00000001000000DC00000001000057
+:1000F00000DE00000001000000DF00000001000041
+:1001000000E000000001000000E100000004000029
+:1001100000E200000001000000E300000001000018
+:1001200000E400000001000000E5000000070000FE
+:1001300000E600000001000000E7000000070000EA
+:1001400000E800000001000000E9000000010000DC
+:1001500000EA00000001000000EF000000010000C4
+:1001600000F000000000010000F2000000010000AB
+:1001700000F500000000010000F600000001000092
+:1001800000F700000000010000F90000000100007D
+:1001900000FC00000000010000010100000400005C
+:1001A0000002010000700000000301000080000058
+:1001B00000080100000C0000000A01000008000017
+:1001C000000B010000140000000D010000290000D8
+:1001D000000E010000270000000F010000260000B3
+:1001E00000100100000800000011010000040000E0
+:1001F00000120100002700000015010000010000AE
+:1002000000160100000200000017010000030000BA
+:1002100000180100000400000019010000050000A2
+:10022000001A010000060000001B0100000700008A
+:10023000001C010000010000002D010000CF0000A3
+:100240000039010000800000003A010000040000B5
+:10025000003B010000040000003C0100000300001E
+:10026000003D0100000100000040010000120000FC
+:10027000004101000010000000420100000C0000DD
+:1002800000430100000100000047010000040000DD
+:1002900000480100000200000049010000040000C5
+:1002A000004C010000FFFF3F004D010000FF1F0058
+:1002B0000057010000040000005801000014000075
+:1002C0000059010000010000005C01000002000074
+:1002D000005F010000010000006101000002000059
+:1002E00000620100000010000063010000000E0029
+:1002F00000640100000010000065010000001E0005
+:10030000006701000001000000680100000100001A
+:100310000069010000010000006A01000001000006
+:10032000006B010000010000006F010000000200EE
+:100330000071010000010000007201000070000067
+:100340000073010000800000007601000001000041
+:1003500000770100007000000078010000800000BC
+:10036000007C010000010000007D010000CF0000C2
+:10037000007F0100000100000083010000CF0000A9
+:10038000008501000002000000870100000100005C
+:100390000089010000010000008B010000CF000077
+:1003A000008C010000CF0000008D01000001000062
+:1003B000008F010000800F0000A101000080007F7D
+:1003C00000B001000080007F00B901000021F87436
+:1003D0003BBA01000001800589BC0100000010004B
+:1003E00000BD0100001F000000BE010000FA107CEB
+:1003F00002BF010000C0000040C001000080208951
+:10040000B7C301000021F8743BC40100000180055E
+:1004100089C601000000100000C70100001F000095
+:1004200000C8010000FA107C02C9010000C00000F1
+:1004300040CA010000802089B7CD010000400001C2
+:1004400000CF01000022000000D2010000400001A6
+:1004500000D301000022000000D90100000000804C
+:1004600001DA01000000001600DB0100000000803E
+:1004700001DF010000FFFF0300E001000000008C2D
+:1004800000E901000001040100EB01000078000018
+:1004900000ED010000BF000000EF0100001012009D
+:1004A00000F001000080000008F901000000008059
+:1004B00001FA01000000001600FB010000000080AE
+:1004C00001FF010000FFFF03000002000000008C9C
+:1004D0000009020000010401000B02000078000086
+:1004E000000D020000BF0000000F0200001012000B
+:1004F0000010020000800000081A02000070700264
+:10050000001D020000FFFFFF03230200000704128A
+:10051000002402000007150905250200000202015F
+:100520000526020000010203002D02000040000029
+:10053000002E0200000A0B0C0D2F020000101214F6
+:100540000030020000F00100003102000001000054
+:1005500000320200000300000035020000009E038C
+:1005600000360200000001000037020000003800E1
+:10057000003802000040404000390200000AFF003D
+:10058000003B02000005F077003C020000FF7F3FC7
+:10059000008C02000004000000A10200000F000017
+:1005A00000C302000002000000C902000020000099
+:1005B00000D302000067FE1F003B030000010000A3
+:1005C000003C03000004000000410300001A00008A
+:1005D000004303000010000000440300000400007A
+:1005E000004C030000808060005B030000010000FD
+:1005F00000740300000400000083030000040000F6
+:10060000008B030000000400008C030000040000C5
+:1006100000930300000003000094030000040000A6
+:10062000009B030000011000009C030000800000FC
+:1006300000A303000015000000A4030000001E003A
+:1006400000AC03000004000000B10300000400003F
+:1006500000B903000004000000C90300000400000A
+:1006600000D103000008000000D3030000020000D6
+:1006700000E1030000FF0700001B04000001000070
+:1006800000230400001000000033040000010000FB
+:1006900000490400000F000000D304000010000017
+:1006A00000D404000004000000DC0400008000000E
+:1006B00000E404000004000000EC0400000001025B
+:1006C00003F404000003000000FC040000001E000E
+:1006D0000004050000040000002C050000040000D8
+:1006E0000034050000030000005405000004000071
+:1006F000005B0500000000803F63050000000080F3
+:100700003F6B0500000000803F7305000000008083
+:100710003F7B0500000000803F8305000000008053
+:100720003F8B0500000000803F9305000000008023
+:100730003F9B0500000000803FA3050000000080F3
+:100740003FAB0500000000803FB3050000000080C3
+:100750003FBB0500000000803FC305000000008093
+:100760003FCB0500000000803FD305000000008063
+:100770003FA306000010000000B30600003F000089
+:1007800000EB06000001000000FB06000001000075
+:10079000000B0700000100000073070000110000BB
+:1007A00000B30700000F000000F307000011000075
+:1007B000002B0800000100000033080000010000C9
+:1007C000003B080000010000004308000002000098
+:1007D000004B080000010000005308000002000068
+:1007E000005B080000010000006B08000067FE1FAE
+:1007F000007B0800008168AC0F2B0900000100009D
+:100800000033090000020000003B09000001000065
+:100810000043090000010000004B09000002000035
+:100820000053090000010000005B09000001000006
+:10083000007B090000110000008309000001000096
+:1008400000A30C000002000000B30C000067FE1FB4
+:10085000001B0D000001000000230D00001000002F
+:10086000003B0D000001000000630D0000040000CB
+:10087000006B0D000000040000730D000000030079
+:10088000007B0D000001100000810D00000F000032
+:1008900000830D000015000000910D000001000014
+:1008A00000B30D000002000000FB0D00000100007D
+:1008B00000030E000010000000130E0000010000F5
+:1008C00000B30E0000100000003B0F00000000808D
+:1008D0003F430F00000000803F4B0F0000000080EE
+:1008E0003F530F00000000803F5B0F0000000080BE
+:1008F0003F630F00000000803F6B0F00000000808E
+:100900003F730F00000000803F7B0F00000000805D
+:100910003F830F00000000803F8B0F00000000802D
+:100920003F930F00000000803F9B0F0000000080FD
+:100930003FA30F00000000803FAB0F0000000080CD
+:100940003FB30F00000000803F691000000F00005F
+:10095000008310000010000000931000003F000012
+:1009600000CB10000001000000DB100000010000BF
+:1009700000EB100000010000005311000011000006
+:1009800000931100000F000000D3110000110000BF
+:10099000000B120000010000001312000001000013
+:1009A000001B1200000100000023120000020000E2
+:1009B000002B1200000100000033120000020000B2
+:1009C000003B120000010000004B12000067FE1FF8
+:1009D000005B1200008168AC0F0B130000010000E7
+:1009E0000013130000020000001B130000010000B0
+:1009F0000023130000010000002B13000002000080
+:100A00000033130000010000003B13000001000050
+:100A1000005B1300001100000063130000010000E0
+:100A200000E81E000021000000F01E000001000090
+:100A300000F81E000002000000001F00000001007E
+:100A400000081F000000010000101F00000100004E
+:100A500000281F000001000000301F0000020000FD
+:100A600000381F000000010000401F0000000100CE
+:100A700000481F0000010000009045000004000035
+:100A8000009845000004000000115200000F000013
+:100A900000B952000001000000C152000000010036
+:100AA00000C952000000010000D1520000110000F6
+:100AB00000E1520000080000001153000001000096
+:100AC0000021530000010000002953000001000034
+:100AD00000315300000100000039530000CF000036
+:100AE00000415300000200000079530000010000A3
+:100AF0000089530000010000009153000001000034
+:100B0000009953000001000000C1530000040000E0
+:100B100000D153000001000000D95300001500006F
+:100B200000F953000080444404D9550000120C1011
+:100B300008015600000001000019560000010001E4
+:100B4000002956000001000100315600000100009C
+:100B5000003956000001000100415600000100006C
+:100B60000049560000040000005156000002000039
+:100B70000052560000FFFF3F006A560000FF1F00B2
+:100B8000007C5600000400000084560000030000B2
+:100B900000E25600000000803F145700000F0000E4
+:100BA000001A57000004000000225700001A00003D
+:100BB000003A5700000100000074570000040000D4
+:100BC000007C570000FFFF000084570000FFFF007B
+:100BD000008C570000FFFF000094570000FFFF004B
+:100BE00000D257000000FFFF00DC570000010000AA
+:100BF00000FC570000010000000A5800000F000030
+:100C0000002C580000010000004A5800008168AC28
+:100C10000F5258000011000000945800000100001D
+:100C2000009C58000001000000A4580000020000D1
+:100C300000AC58000001000000B4580000010000A2
+:100C400000BC58000002000000C458000001000071
+:100C500000D258000004000000D458000011000029
+:100C600000FA5800000200000002590000000000D5
+:100C7000040A59000000000004145900008168AC07
+:100C80000F2A590000050000002C59000004000044
+:100C90000032590000520000004C590000110000C1
+:100CA0000054590000010000005A590000010000E2
+:100CB0000064590000CF0000006C590000CF000014
+:100CC0000074590000CF000000B1590000DFBFE3FD
+:100CD00004B9590000DFBFE304CC59000001000053
+:100CE00000D459000001000000DC5900000200009F
+:100CF00000E15900008168AC0FE25900000000805B
+:100D00003FE459000001000000EA590000000080A3
+:100D10003FEC59000001000000F259000000008083
+:100D20003FF459000002000000FA59000000008062
+:100D30003FFC59000001000000025A000000008042
+:100D40003F0A5A00000000803F0C5A0000010000DA
+:100D500000125A00000000803F145A0000010000F9
+:100D6000001A5A00000000803F1C5A0000010000D9
+:100D700000225A00000000803F245A0000010000B9
+:100D8000002A5A00000000803F2C5A000001000099
+:100D900000325A00000000803F345A000001000079
+:100DA000003A5A00000000803F3C5A000001000059
+:100DB00000415A0000DFBFE304425A0000000080F7
+:100DC0003F445A000001000000495A0000DFBFE321
+:100DD000044A5A00000000803F4C5A0000110000F5
+:100DE00000525A00000000803F5A5A000000008064
+:100DF0003F625A0000100000008C5A00008168AC6D
+:100E00000F945A00000F000000D45A000067FE1F24
+:100E100000EC5A000011000000F45A00000100002C
+:100E200000145B000004000000445B0000010000AF
+:100E3000006C5B0000110000009A5B0000120C10B7
+:100E400008A25B000005000000AC5B00008168ACFC
+:100E50000FBA5B000001000000CA5B0000FFFF004A
+:100E600000CC5B000011000000D25B0000FFFF001F
+:100E700000D45B000001000000DA5B0000FFFF000F
+:100E800000E25B0000FFFF0000E45B0000010000E7
+:100E900000EA5B000003000000F45B0000010000BA
+:100EA00000045C0000FF070000145C00000100006B
+:100EB00000245C000001000000EA5C000000FFFF6D
+:100EC00000F25C00001A000000025D000003000058
+:100ED000007C5D000008000000845D000008000048
+:100EE000008C5D000008000000945D000008000018
+:100EF000009C5D000008000000A45D0000080000E8
+:100F000000AC5D000008000000B45D0000080000B7
+:100F100000BC5D000011000000FC5D00008168ACB9
+:100F20000F045E0000000400000C5E0000000400DE
+:100F300000145E0000000400001C5E0000000400BD
+:100F400000245E0000000400002C5E00000004008D
+:100F500000345E0000000400003A5E000002010060
+:100F6000003C5E000000040000445E00000003003E
+:100F7000004A5E0000040000004C5E000000030018
+:100F800000525E000004000000545E0000000300F8
+:100F9000005A5E0000040000005C5E0000000300D8
+:100FA00000625E000004000000645E0000000300B8
+:100FB000006A5E0000040000006C5E000000030098
+:100FC00000725E000004000000745E000000030078
+:100FD000007C5E000000030000825E0000FF07004E
+:100FE00000845E0000010000008C5E00000F000025
+:100FF00000925E000002010000CC5E0000200000B4
+:1010000000D45E000011000000DC5E000000010062
+:1010100000E25E000004000000EA5E000004000040
+:1010200000EC5E000001000000F25E000004000021
+:1010300000FA5E000004000000045F0000400000B1
+:10104000000C5F0000000100001C5F0000030000B6
+:1010500000445F000067FE1F00645F0000020000A4
+:10106000006C5F00008168AC0FBC5F0000010000F5
+:1010700000E45F000004000000F45F0000010000D5
+:1010800000FC5F000000040000046000000003009A
+:10109000000C600000011000002C60000011000036
+:1010A000006C6000008168AC0F746000000F0000ED
+:1010B000008A600000140C0800A260000004080010
+:1010C00000B260000004000000BA600000040000EC
+:1010D00000C2600000120C1008D260000004000082
+:1010E00000DA60000004000000EA60000010000068
+:1010F0000012610000040800001A610000010000F5
+:1011000000226100001A0000002A6100007F000038
+:10111000003461000067FE1F003A6100000100001A
+:101120000042610000140C080052610000120C1013
+:101130000854610000110000005A61000004000022
+:101140000062610000040000006C61000004000007
+:101150000072610000100000007C610000010000CE
+:1011600000846100000100000092610000010000A5
+:10117000009A610000120C1008A461000001000038
+:1011800000CC61000001000000D2610000FF0700F8
+:1011900000DA610000140C0800DC610000010000AE
+:1011A00000FC6100008824712A0C62000000C085E8
+:1011B0004014620000400000001C620000000100BA
+:1011C0000024620000000101002C62000000008089
+:1011D00002C4620000DFBFE304CC620000DFBFE3B3
+:1011E00004D462000001000000E462000000FFFF80
+:1011F00000EC620000010000000463000000FFFF3B
+:10120000004C630000010000005C6300000100006E
+:101210000064630000001020306C630000405060E8
+:1012200070746300008898A8B87C630000C8D8E890
+:10123000F88C6300001A000000A2630000010000A7
+:1012400000BA630000100000008265000088000002
+:10125000008A65000088000000A26500000400000C
+:10126000005A660000260000007266000000008040
+:101270003F926600001A0000009A6600001000000D
+:1012800000E267000052000000F267000026000044
+:101290000002680000040000000A6800000400006A
+:1012A000001A6800001A0000003268000000FFFF0A
+:1012B0000042680000040000004A680000040000CA
+:1012C000005A68000080000000626800000400000E
+:1012D000006A680000140C08007A680000FF07002C
+:1012E0000092920000040000009A920000040000A6
+:1012F00000AA92000080000000B2920000040000EA
+:1013000000BA92000001000000CA9200002700000D
+:1013100000DA92000026000000FA920000000000AF
+:101320000402930000000000040A93000000000083
+:101330000412930000000000041A93000000000053
+:101340000422930000000000042A93000000000023
+:101350000432930000000000043A930000000000F3
+:101360000442930000000000044A930000000000C3
+:101370000452930000000000045A93000000000093
+:101380000462930000000000046A93000000000063
+:101390000472930000000000049A940000DFBFE391
+:1013A00004A2940000DFBFE304BA94000021FE0110
+:1013B00000F82701000400000000280100040000DC
+:1013C0000008280100120C1008102801000300007A
+:1013D0000020280100120C100830280100140C080D
+:1013E00000382801000100000040280100140C080A
+:1013F0000058280100120C10086028010027000086
+:10140000007828010001000000884601000100006A
+:101410000040470100120C1008A84701000000001E
+:1014200004B047010000000004C047010080000034
+:1014300000E047010080000000F04701003F00008D
+:101440000048480100020000005048010000000070
+:10145000045848010000000004A0480100040000F6
+:1014600000C04801000400000050490100010000D4
+:1014700000584901000110000060490100FFFF0011
+:101480000068490100FFFF000070490100FFFF00F4
+:101490000078490100FFFF0000804A010000008041
+:1014A0003F884A01000000803F904A010000008010
+:1014B0003F984A01000000803FA04A0100000080E0
+:1014C0003FA84A01000000803FB04A0100000080B0
+:1014D0003FB84A01000000803FC04A010000008080
+:1014E0003FC84A01000000803FD04A010000008050
+:1014F0003FD84A01000000803FE04A010000008020
+:101500003FE84A01000000803FF04A0100000080EF
+:101510003FF84A01000000803F004B01001000002E
+:0915200000184B0100030000005B
+:00000001FF
diff --git a/firmware/nouveau/nv92.ctxprog.ihex b/firmware/nouveau/nv92.ctxprog.ihex
new file mode 100644
index 0000000..01b9fc2
--- /dev/null
+++ b/firmware/nouveau/nv92.ctxprog.ihex
@@ -0,0 +1,103 @@
+:100000004E5643500095018E0070009C00700020F9
+:10001000002000080060004C005000890E400000E5
+:100020000020000700600000003000FF00C000005A
+:10003000002000FF008000090070004D9241004444
+:10004000294000052940000D294000066E410005A9
+:10005000006000C5154000110060000B274000C57E
+:100060002140000000700081007000040060004A20
+:1000700000500000962100070060000127C0002EFC
+:1000800000200001008000CB005000FFFF9000FF27
+:10009000FF910020002000080060004C0050000983
+:1000A000006000456E41004D8941009D007000CF09
+:1000B0002D40009F0070009F005000C02A4000802B
+:1000C000002000080060004F2A4000C02A4000CCF9
+:1000D0003040008100700000002000060060000039
+:1000E000007000FC1B110083007000000030000055
+:1000F00096210007006000010AC0001E00200001D8
+:10010000008000CB005000FF00C000800070008322
+:1001100000700047002000060060000A0211004045
+:100120000520000700600000003000FF00C000FF55
+:1001300000C80007794100D22D2000FF0080008C0C
+:10014000504000CB0050003F02A0004000200006BD
+:100150000060000F007000020217000A0211003256
+:100160000020000D02100042021C000203120002D7
+:1001700004140000051800090513005005150005BA
+:100180000611000F002000070610000007110000F4
+:1001900009110002091200000A1100020B160028C2
+:1001A0000B12002B0B1400010C11000014110005A0
+:1001B00014110007141100091411000B141100CBC5
+:1001C000002000001510000F7940004B794000001E
+:1001D000742100070060003E042000FF0088008FAB
+:1001E0000070008C794000CB00500000000000053A
+:1001F0001A14000C1A1300001C1300041C12002017
+:100200001C1400251C1100401C1300441C1200602B
+:100210001C1400651C1100801C1300841C1200A01B
+:100220001C1400A51C1100C01C1300C41C1200E00B
+:100230001C1400E51C1100001F1300401F1900E0F2
+:10024000A14000C901200006006000440020008099
+:10025000201000C6201100C9201500D02019000070
+:100260002112000321120000221600072212008032
+:100270002211000023110002231100802312008BA1
+:10028000231100942311009C231100E1BE40003093
+:100290000220000600600044002000802410000FAF
+:1002A000AF40004BAF400000742100070060003EEB
+:1002B000042000FF0088008F0070008CAF4000CB4E
+:1002C00000500000000000C6241100C9241500D011
+:1002D000241900002512000325120000261600072D
+:1002E000261200802611000027110002271100802D
+:1002F0002712008B271100942711009C271100E280
+:10030000D1400097022000060060004400200080D9
+:10031000281000C6281100C9281500D0281900008F
+:1003200029120003291200002A1600072A12008051
+:100330002A1100002B1100022B1100802B12008BC0
+:100340002B1100942B11009C2B1100E3EE4000FEBA
+:100350000220000600600044002000802C10000FE6
+:10036000DF40004BDF400000742100070060003ECA
+:10037000042000FF0088008F0070008CDF4000CB5D
+:1003800000500000000000C62C1100C92C1500D040
+:100390002C1900002D1200032D1200002E1600074C
+:1003A0002E1200802E1100002F1100022F1100804C
+:1003B0002F12008B2F1100942F11009C2F1100E49D
+:1003C0000141006503200006006000440020008019
+:1003D000301000C6301100C9301500D030190000AF
+:1003E0003112000331120000321600073212008071
+:1003F0003211000033110002331100803312008BE0
+:10040000331100943311009C331100E51E4100CCE0
+:100410000320000600600044002000803410000F1C
+:100420000F41004B0F410000742100070060003EA7
+:10043000042000FF0088008F0070008C0F4100CB6B
+:1004400000500000000000C6341100C9341500D06F
+:10045000341900003512000335120000361600076B
+:10046000361200803611000037110002371100806B
+:100470003712008B371100943711009C371100E6BA
+:100480003141003304200006006000440020008059
+:10049000381000C6381100C9381500D038190000CE
+:1004A00039120003391200003A1600073A12008090
+:1004B0003A1100003B1100023B1100803B12008BFF
+:1004C0003B1100943B11009C3B1100E74E41009A08
+:1004D0000420000600600044002000803C10000F53
+:1004E0003F41004B3F410000742100070060003E87
+:1004F000042000FF0088008F0070008C3F4100CB7B
+:1005000000500000000000C63C1100C93C1500D09E
+:100510003C1900003D1200033D1200003E1600078A
+:100520003E1200803E1100003F1100023F1100808A
+:100530003F12008B3F1100943F11009C3F110000BF
+:100540000000000F554100CB00500000742100074F
+:100550000060003E042000FF008800CB00500087B0
+:100560005841000A0060000000000000674100A040
+:10057000007000800070004005200007006000044B
+:10058000002000FF00C000FF008000CB00500000F2
+:100590000070000000200006006000FE1B11004DEE
+:1005A000894100000070000000200006006000FE8D
+:1005B0001B1100800070001D0070004D1140008173
+:1005C000007000040060004A005000887341000B76
+:1005D0000060000000200006006000000070000BBA
+:1005E000894100FD1B11004D424000D22D2000FD2D
+:1005F000008000CB0050000200C000400520000732
+:100600000060006001200002008000CB005000026A
+:1006100018C000722C200002008000CB0050004D5A
+:100620004E40000B0060004D874100010070000348
+:10063000007000068D4100058E41000D0060000530
+:100640000070000D007000060070000B0070000EBE
+:0B0650000070001C0070000C00600037
+:00000001FF
diff --git a/firmware/nouveau/nv92.ctxvals.ihex b/firmware/nouveau/nv92.ctxvals.ihex
new file mode 100644
index 0000000..31c8e18
--- /dev/null
+++ b/firmware/nouveau/nv92.ctxvals.ihex
@@ -0,0 +1,1232 @@
+:100000004E564356009C090000430000003000009B
+:1000100000750000000300000076000000001000E2
+:1000200000860000000CFE00008B000000001000A5
+:100030000096000000870100009B000000181000DF
+:10004000009C000000FF000000AB00000004000066
+:1000500000AC000000DF002504AE00000000060038
+:1000600000B400000000000001B5000000FF000027
+:1000700000B700000000040000BD00000001000007
+:1000800000BE00000080000000BF0000000400006F
+:1000900000C600000002000000C7000000010000D0
+:1000A00000CA00000001000000CB000000000100B9
+:1000B00000D100000002000000D20000000100009A
+:1000C00000D300000001000000D700000001000084
+:1000D00000D8000000FFFF3F00D9000000FF1F0014
+:1000E00000DB00000001000000DC00000001000057
+:1000F00000DE00000001000000DF00000001000041
+:1001000000E000000001000000E100000004000029
+:1001100000E200000001000000E300000001000018
+:1001200000E400000001000000E5000000070000FE
+:1001300000E600000001000000E7000000070000EA
+:1001400000E800000001000000E9000000010000DC
+:1001500000EA00000001000000EF000000010000C4
+:1001600000F000000000010000F2000000010000AB
+:1001700000F500000000010000F600000001000092
+:1001800000F700000000010000F90000000100007D
+:1001900000FC00000000010000010100000400005C
+:1001A0000002010000700000000301000080000058
+:1001B00000080100000C0000000A01000008000017
+:1001C000000B010000140000000D010000290000D8
+:1001D000000E010000270000000F010000260000B3
+:1001E00000100100000800000011010000040000E0
+:1001F00000120100002700000015010000010000AE
+:1002000000160100000200000017010000030000BA
+:1002100000180100000400000019010000050000A2
+:10022000001A010000060000001B0100000700008A
+:10023000001C010000010000002D010000CF0000A3
+:100240000039010000800000003A010000040000B5
+:10025000003B010000040000003C0100000300001E
+:10026000003D0100000100000040010000120000FC
+:10027000004101000010000000420100000C0000DD
+:1002800000430100000100000047010000040000DD
+:1002900000480100000200000049010000040000C5
+:1002A000004C010000FFFF3F004D010000FF1F0058
+:1002B0000057010000040000005801000014000075
+:1002C0000059010000010000005C01000002000074
+:1002D000005F010000010000006101000002000059
+:1002E00000620100000010000063010000000E0029
+:1002F00000640100000010000065010000001E0005
+:10030000006701000001000000680100000100001A
+:100310000069010000010000006A01000001000006
+:10032000006B010000010000006F010000000200EE
+:100330000071010000010000007201000070000067
+:100340000073010000800000007601000001000041
+:1003500000770100007000000078010000800000BC
+:10036000007C010000010000007D010000CF0000C2
+:10037000007F0100000100000083010000CF0000A9
+:10038000008501000002000000870100000100005C
+:100390000089010000010000008B010000CF000077
+:1003A000008C010000CF0000008D01000001000062
+:1003B000008F010000801F00009501000021F874EB
+:1003C0003B960100000180058998010000001000A3
+:1003D00000990100001F0000009A010000FA107C43
+:1003E000029B010000C00000409C010000802089A9
+:1003F000B79F01000021F8743BA0010000018005B7
+:1004000089A201000000100000A30100001F0000ED
+:1004100000A4010000FA107C02A5010000C0000049
+:1004200040A6010000802089B7A901000021F874CE
+:100430003BAA01000001800589AC0100000010000A
+:1004400000AD0100001F000000AE010000FA107CAA
+:1004500002AF010000C0000040B001000080208910
+:10046000B7B301000021F8743BB40100000180051E
+:1004700089B601000000100000B70100001F000055
+:1004800000B8010000FA107C02B9010000C00000B1
+:1004900040BA010000802089B7BD0100004000394A
+:1004A00000BF01000022000000C20100004000392E
+:1004B00000C301000022000000C90100000000800C
+:1004C00001CA01000000001600CB010000000080FE
+:1004D00001CF010000FFFF0300D001000000008CED
+:1004E00011D901000001040100DB010000780000C7
+:1004F00000DD010000BF000000DF0100001012005D
+:1005000000E001000080000008E901000000008018
+:1005100001EA01000000001600EB0100000000806D
+:1005200001EF010000FFFF0300F001000000008C5C
+:1005300011F901000001040100FB01000078000036
+:1005400000FD010000BF000000FF010000101200CC
+:100550000000020000800000080A02000070700223
+:10056000000D020000FFFFFF03130200000704124A
+:10057000001402000007150905150200000202011F
+:100580000516020000010203001D020000400000E9
+:10059000001E0200000A0B0C0D1F020000101214B6
+:1005A0000020020000F00100002102000001000014
+:1005B00000220200000300000025020000009E034C
+:1005C00000260200000001000027020000003800A1
+:1005D000002802000040404000290200000AFF00FD
+:1005E000002B02000005F077002C020000FF7F3F87
+:1005F00000300200000000800131020000000016FF
+:1006000000320200000000800136020000FFFF03FC
+:10061000003702000000008C1140020000010401BC
+:1006200000420200007800000044020000BF000009
+:100630000046020000101200004702000080000087
+:100640000850020000000080015102000000001666
+:1006500000520200000000800156020000FFFF036C
+:10066000005702000000008C11600200000104012C
+:1006700000620200007800000064020000BF000079
+:1006800000660200001012000067020000800000F7
+:1006900008710200007070020074020000FFFFFF8A
+:1006A000037A020000070412007B0200000715090C
+:1006B000057C020000020201057D02000001020328
+:1006C000008402000040000000850200000A0B0CBC
+:1006D0000D860200001012140087020000F00100D5
+:1006E00000880200000100000089020000030000F1
+:1006F000008C020000009E03008D0200000001003B
+:10070000008E020000003800008F020000404040D0
+:1007100000900200000AFF00009202000005F0773E
+:100720000093020000FF7F3F00970200000000805E
+:1007300001980200000000160099020000000080ED
+:10074000019D020000FFFF03009E02000000008CDC
+:1007500011A702000001040100A9020000780000B6
+:1007600000AB020000BF000000AD0200001012004C
+:1007700000AE02000080000008B702000000008008
+:1007800001B802000000001600B90200000000805D
+:1007900001BD020000FFFF0300BE02000000008C4C
+:1007A00011C702000001040100C902000078000026
+:1007B00000CB020000BF000000CD020000101200BC
+:1007C00000CE02000080000008D802000070700215
+:1007D00000DB020000FFFFFF03E10200000704123C
+:1007E00000E202000007150905E302000002020111
+:1007F00005E402000001020300EB020000400000DB
+:1008000000EC0200000A0B0C0DED020000101214A7
+:1008100000EE020000F0010000EF02000001000005
+:1008200000F002000003000000F3020000009E033D
+:1008300000F402000000010000F502000000380092
+:1008400000F602000040404000F70200000AFF00EE
+:1008500000F902000005F07700FA020000FF7F3F78
+:1008600000FE02000000008001FF020000000016F0
+:1008700000000300000000800104030000FFFF03EC
+:10088000000503000000008C110E030000010401AC
+:1008900000100300007800000012030000BF0000F9
+:1008A0000014030000101200001503000080000077
+:1008B000081E030000000080011F03000000001656
+:1008C00000200300000000800124030000FFFF035C
+:1008D000002503000000008C112E0300000104011C
+:1008E00000300300007800000032030000BF000069
+:1008F00000340300001012000035030000800000E7
+:10090000083F0300007070020042030000FFFFFF79
+:1009100003480300000704120049030000071509FB
+:10092000054A030000020201054B03000001020317
+:10093000005203000040000000530300000A0B0CAB
+:100940000D540300001012140055030000F00100C4
+:1009500000560300000100000057030000030000E0
+:10096000005A030000009E03005B0300000001002A
+:10097000005C030000003800005D030000404040C0
+:10098000005E0300000AFF00006003000005F0772E
+:100990000061030000FF7F3F00650300000000804E
+:1009A00001660300000000160067030000000080DD
+:1009B000016B030000FFFF03006C03000000008CCC
+:1009C00011750300000104010077030000780000A6
+:1009D0000079030000BF0000007B0300001012003C
+:1009E000007C0300008000000885030000000080F8
+:1009F000018603000000001600870300000000804D
+:100A0000018B030000FFFF03008C03000000008C3B
+:100A10001195030000010401009703000078000015
+:100A20000099030000BF0000009B030000101200AB
+:100A3000009C03000080000008A603000070700204
+:100A400000A9030000FFFFFF03AF0300000704122B
+:100A500000B003000007150905B103000002020100
+:100A600005B203000001020300B9030000400000CA
+:100A700000BA0300000A0B0C0DBB03000010121497
+:100A800000BC030000F0010000BD030000010000F5
+:100A900000BE03000003000000C1030000009E032D
+:100AA00000C203000000010000C303000000380082
+:100AB00000C403000040404000C50300000AFF00DE
+:100AC00000C703000005F07700C8030000FF7F3F68
+:100AD00000CC03000000008001CD030000000016E0
+:100AE00000CE03000000008001D2030000FFFF03DE
+:100AF00000D303000000008C11DC0300000104019E
+:100B000000DE03000078000000E0030000BF0000EA
+:100B100000E203000010120000E303000080000068
+:100B200008EC03000000008001ED03000000001647
+:100B300000EE03000000008001F2030000FFFF034D
+:100B400000F303000000008C11FC0300000104010D
+:100B500000FE0300007800000000040000BF000059
+:100B600000020400001012000003040000800000D6
+:100B7000080D0400007070020010040000FFFFFF69
+:100B800003160400000704120017040000071509EB
+:100B90000518040000020201051904000001020307
+:100BA000002004000040000000210400000A0B0C9B
+:100BB0000D220400001012140023040000F00100B4
+:100BC00000240400000100000025040000030000D0
+:100BD0000028040000009E0300290400000001001A
+:100BE000002A040000003800002B040000404040B0
+:100BF000002C0400000AFF00002E04000005F0771E
+:100C0000002F040000FF7F3F00330400000000803D
+:100C100001340400000000160035040000000080CC
+:100C20000139040000FFFF03003A04000000008CBB
+:100C30001143040000010401004504000078000095
+:100C40000047040000BF000000490400001012002B
+:100C5000004A0400008000000853040000000080E7
+:100C6000015404000000001600550400000000803C
+:100C70000159040000FFFF03005A04000000008C2B
+:100C80001163040000010401006504000078000005
+:100C90000067040000BF000000690400001012009B
+:100CA000006A0400008000000874040000707002F4
+:100CB0000077040000FFFFFF037D0400000704121B
+:100CC000007E040000071509057F040000020201F0
+:100CD00005800400000102030087040000400000BA
+:100CE00000880400000A0B0C0D8904000010121487
+:100CF000008A040000F00100008B040000010000E5
+:100D0000008C040000030000008F040000009E031C
+:100D10000090040000000100009104000000380071
+:100D2000009204000040404000930400000AFF00CD
+:100D3000009504000005F0770096040000FF7F3F57
+:100D4000009A040000000080019B040000000016CF
+:100D5000009C04000000008001A0040000FFFF03CD
+:100D600000A104000000008C11AA0400000104018D
+:100D700000AC04000078000000AE040000BF0000DA
+:100D800000B004000010120000B104000080000058
+:100D900008BA04000000008001BB04000000001637
+:100DA00000BC04000000008001C0040000FFFF033D
+:100DB00000C104000000008C11CA040000010401FD
+:100DC00000CC04000078000000CE040000BF00004A
+:100DD00000D004000010120000D1040000800000C8
+:100DE00008DB04000070700200DE040000FFFFFF5B
+:100DF00003E404000007041200E5040000071509DD
+:100E000005E604000002020105E7040000010203F8
+:100E100000EE04000040000000EF0400000A0B0C8C
+:100E20000DF004000010121400F1040000F00100A5
+:100E300000F204000001000000F3040000030000C1
+:100E400000F6040000009E0300F70400000001000B
+:100E500000F804000000380000F9040000404040A1
+:100E600000FA0400000AFF0000FC04000005F0770F
+:100E700000FD040000FF7F3F004C0500000400005F
+:100E8000004D050000040000004E050000040000B5
+:100E9000004F05000004000000610500000F000085
+:100EA000008305000002000000890500002000000A
+:100EB000009305000067FE1F00FB05000001000015
+:100EC00000FC05000004000000FD05000004000017
+:100ED00000FE05000004000000FF05000004000003
+:100EE00000010600001A00000003060000100000C8
+:100EF00000040600000400000005060000040000D5
+:100F000000060600000400000007060000040000C0
+:100F1000000C060000808060000D060000808060EC
+:100F2000000E060000808060000F060000808060D8
+:100F3000001B060000010000003406000004000051
+:100F40000035060000040000003606000004000022
+:100F50000037060000040000004306000004000003
+:100F6000004B060000000400004C060000040000D6
+:100F7000004D060000040000004E060000040000C2
+:100F8000004F0600000400000053060000000300AC
+:100F90000054060000040000005506000004000094
+:100FA0000056060000040000005706000004000080
+:100FB000005B060000011000005C060000800000DD
+:100FC000005D060000800000005E0600008000005A
+:100FD000005F0600008000000063060000150000AE
+:100FE0000064060000040000006506000004000024
+:100FF0000066060000040000006706000004000010
+:1010000000710600000400000079060000040000E2
+:10101000008906000004000000910600000800009E
+:10102000009306000002000000A1060000FF070078
+:1010300000DB06000001000000E3060000100000D5
+:1010400000F306000001000000090700000F000087
+:10105000008C070000040000008D07000004000061
+:10106000008E070000040000008F0700000400004D
+:1010700000930700001000000094070000800000AB
+:101080000095070000800000009607000080000027
+:101090000097070000800000009C0700000400008B
+:1010A000009D070000040000009E070000040000EF
+:1010B000009F07000004000000A4070000000102D8
+:1010C00003A507000000010203A6070000000102BB
+:1010D00003A707000000010203AC070000030000A3
+:1010E00000AD07000003000000AE07000003000091
+:1010F00000AF07000003000000B407000004000078
+:1011000000B507000004000000B60700000400005E
+:1011100000B707000004000000DC07000004000026
+:1011200000DD07000004000000DE070000040000EE
+:1011300000DF07000004000000E4070000030000D7
+:1011400000E507000003000000E6070000030000C0
+:1011500000E707000003000000040800000400008E
+:10116000000508000004000000060800000400005C
+:101170000007080000040000001B080000000080B9
+:101180003F230800000000803F2B08000000008083
+:101190003F330800000000803F3B08000000008053
+:1011A0003F430800000000803F4B08000000008023
+:1011B0003F530800000000803F5B080000000080F3
+:1011C0003F630800000000803F6B080000000080C3
+:1011D0003F730800000000803F7B08000000008093
+:1011E0003F830800000000803F8B08000000008063
+:1011F0003F930800000000803F63090000100000DA
+:1012000000730900003F000000AB0900000100006E
+:1012100000BB09000001000000CB09000001000034
+:1012200000330A000011000000730A00000F0000E4
+:1012300000B30A000011000000EB0A0000010000EA
+:1012400000F30A000001000000FB0A00000100009A
+:1012500000030B0000020000000B0B000001000067
+:1012600000130B0000020000001B0B000001000037
+:10127000002B0B000067FE1F003B0B00008168ACD9
+:101280000FEB0B000001000000F30B000002000058
+:1012900000FB0B000001000000030C000001000037
+:1012A000000B0C000002000000130C000001000005
+:1012B000001B0C0000010000003B0C0000110000AE
+:1012C00000430C000001000000630F00000200005A
+:1012D00000730F000067FE1F00DB0F00000100001D
+:1012E00000E30F000010000000FB0F0000010000F1
+:1012F0000023100000040000002B10000000040078
+:101300000033100000000300003B1000000110003B
+:1013100000411000000F0000004310000015000005
+:1013200000511000000100000073100000020000D6
+:1013300000BB10000001000000C3100000100000FE
+:1013400000D3100000010000007311000010000025
+:1013500000FB1100000000803F031200000000802D
+:101360003F0B1200000000803F13120000000080BD
+:101370003F1B1200000000803F231200000000808D
+:101380003F2B1200000000803F331200000000805D
+:101390003F3B1200000000803F431200000000802D
+:1013A0003F4B1200000000803F53120000000080FD
+:1013B0003F5B1200000000803F63120000000080CD
+:1013C0003F6B1200000000803F731200000000809D
+:1013D0003F291300000F000000431300001000001D
+:1013E00000531300003F0000008B130000010000B9
+:1013F000009B13000001000000AB1300000100007F
+:10140000001314000011000000531400000F00002E
+:10141000009314000011000000CB14000001000034
+:1014200000D314000001000000DB140000010000E4
+:1014300000E314000002000000EB140000010000B3
+:1014400000F314000002000000FB14000001000083
+:10145000000B15000067FE1F001B1500008168AC23
+:101460000FCB15000001000000D3150000020000A2
+:1014700000DB15000001000000E315000001000082
+:1014800000EB15000002000000F315000001000051
+:1014900000FB150000010000001B160000110000F9
+:1014A00000231600000100000043190000020000A4
+:1014B000005319000067FE1F00BB19000001000067
+:1014C00000C319000010000000DB1900000100003B
+:1014D00000031A0000040000000B1A0000000400C2
+:1014E00000131A0000000300001B1A000001100086
+:1014F00000231A000015000000531A00000200002B
+:10150000009B1A000001000000A31A000010000058
+:1015100000B31A000001000000531B00001000007F
+:1015200000DB1B00000000803FE31B000000008088
+:101530003FEB1B00000000803FF31B000000008019
+:101540003FFB1B00000000803F031C0000000080E8
+:101550003F0B1C00000000803F131C0000000080B7
+:101560003F1B1C00000000803F231C000000008087
+:101570003F2B1C00000000803F331C000000008057
+:101580003F3B1C00000000803F431C000000008027
+:101590003F4B1C00000000803F531C0000000080F7
+:1015A0003F231D000010000000331D00003F00001D
+:1015B000006B1D0000010000007B1D000001000009
+:1015C000008B1D000001000000F31D000011000051
+:1015D00000331E00000F000000731E000011000009
+:1015E00000AB1E000001000000B31E00000100005F
+:1015F00000BB1E000001000000C31E00000200002E
+:1016000000CB1E000001000000D31E0000020000FD
+:1016100000DB1E000001000000EB1E000067FE1F43
+:1016200000FB1E00008168AC0FAB1F000001000032
+:1016300000B31F000002000000BB1F0000010000FB
+:1016400000C31F000001000000CB1F0000020000CB
+:1016500000D31F000001000000DB1F00000100009C
+:1016600000FB1F000011000000032000000100002B
+:1016700000882100002100000090210000010000EE
+:10168000009821000002000000A0210000000100DD
+:1016900000A821000000010000B0210000010000AE
+:1016A00000C821000001000000D02100000200005D
+:1016B00000D821000000010000E02100000001002E
+:1016C00000E82100000100000023230000020000C8
+:1016D000003323000067FE1F009B23000001000071
+:1016E00000A323000010000000BB23000001000045
+:1016F00000E323000004000000EB230000000400CE
+:1017000000F323000000030000FB23000001100091
+:101710000003240000150000003324000002000034
+:10172000007B240000010000008324000010000062
+:101730000093240000010000003325000010000089
+:1017400000BB2500000000803FC325000000008092
+:101750003FCB2500000000803FD325000000008023
+:101760003FDB2500000000803FE3250000000080F3
+:101770003FEB2500000000803FF3250000000080C3
+:101780003FFB2500000000803F0326000000008092
+:101790003F0B2600000000803F1326000000008061
+:1017A0003F1B2600000000803F2326000000008031
+:1017B0003F2B2600000000803F3326000000008001
+:1017C0003F0327000010000000132700003F000027
+:1017D000004B270000010000005B27000001000013
+:1017E000006B27000001000000D32700001100005B
+:1017F00000132800000F0000005328000011000013
+:10180000008B280000010000009328000001000068
+:10181000009B28000001000000A328000002000037
+:1018200000AB28000001000000B328000002000007
+:1018300000BB28000001000000CB28000067FE1F4D
+:1018400000DB2800008168AC0F8B2900000100003C
+:101850000093290000020000009B29000001000005
+:1018600000A329000001000000AB290000020000D5
+:1018700000B329000001000000BB290000010000A6
+:1018800000DB29000011000000E329000001000036
+:1018900000D15400000F0000007955000001000045
+:1018A0000081550000000100008955000000010082
+:1018B000009155000011000000A155000008000033
+:1018C00000D155000001000000E1550000010000BA
+:1018D00000E955000001000000F155000001000082
+:1018E00000F9550000CF0000000156000002000082
+:1018F00000395600000100000049560000010000B8
+:10190000005156000001000000595600000100007F
+:101910000081560000040000009156000001000004
+:10192000009956000015000000B95600008044449C
+:101930000499580000120C1008C158000000010062
+:1019400000D958000001000100E958000001000121
+:1019500000F158000001000000F9580000010001EA
+:1019600000015900000100000009590000040000B6
+:101970000011590000020000002C59000004000072
+:10198000002D590000040000002E59000004000042
+:10199000002F59000004000000345900000300002B
+:1019A0000035590000030000003659000003000014
+:1019B00000375900000300000042590000FFFF3FBC
+:1019C000005A590000FF1F0000C45900000F00001A
+:1019D00000C55900000F000000C65900000F0000AC
+:1019E00000C75900000F000000D25900000000801D
+:1019F0003F0A5A000004000000125A00001A0000BA
+:101A000000245A000004000000255A0000040000D1
+:101A100000265A000004000000275A0000040000BD
+:101A2000002A5A0000010000002C5A0000FFFF00AD
+:101A3000002D5A0000FFFF00002E5A0000FFFF009B
+:101A4000002F5A0000FFFF0000345A0000FFFF0083
+:101A500000355A0000FFFF0000365A0000FFFF006B
+:101A600000375A0000FFFF00003C5A0000FFFF0053
+:101A7000003D5A0000FFFF00003E5A0000FFFF003B
+:101A8000003F5A0000FFFF0000445A0000FFFF0023
+:101A900000455A0000FFFF0000465A0000FFFF000B
+:101AA00000475A0000FFFF00008C5A0000010000B0
+:101AB000008D5A0000010000008E5A000001000055
+:101AC000008F5A000001000000AC5A000001000025
+:101AD00000AD5A000001000000AE5A0000010000F5
+:101AE00000AF5A000001000000C25A000000FFFFD2
+:101AF00000DC5A000001000000DD5A000001000077
+:101B000000DE5A000001000000DF5A000001000062
+:101B100000FA5A00000F0000003A5B00008168AC38
+:101B20000F425B000011000000445B000001000058
+:101B300000455B000001000000465B000001000062
+:101B400000475B0000010000004C5B00000100004A
+:101B5000004D5B0000010000004E5B000001000032
+:101B6000004F5B000001000000545B000002000019
+:101B700000555B000002000000565B000002000000
+:101B800000575B0000020000005C5B0000010000E9
+:101B9000005D5B0000010000005E5B0000010000D2
+:101BA000005F5B000001000000645B0000010000BA
+:101BB00000655B000001000000665B0000010000A2
+:101BC00000675B0000010000006C5B000002000089
+:101BD000006D5B0000020000006E5B000002000070
+:101BE000006F5B000002000000745B000001000059
+:101BF00000755B000001000000765B000001000042
+:101C000000775B000001000000845B000011000011
+:101C100000855B000011000000865B0000110000E1
+:101C200000875B000011000000C25B0000040000A0
+:101C300000C45B00008168AC0FC55B00008168AC2C
+:101C40000FC65B00008168AC0FC75B00008168AC09
+:101C50000FDC5B000004000000DD5B0000040000FE
+:101C600000DE5B000004000000DF5B0000040000F9
+:101C700000EA5B000002000000F25B0000000000D0
+:101C800004FA5B000000000004FC5B00001100008F
+:101C900000FD5B000011000000FE5B000011000071
+:101CA00000FF5B000011000000045C000001000068
+:101CB00000055C000001000000065C00000100005F
+:101CC00000075C000001000000145C0000CF000071
+:101CD00000155C0000CF000000165C0000CF000083
+:101CE00000175C0000CF0000001A5C000005000037
+:101CF000001C5C0000CF0000001D5C0000CF000055
+:101D0000001E5C0000CF0000001F5C0000CF000040
+:101D100000225C000052000000245C0000CF0000A4
+:101D200000255C0000CF000000265C0000CF000012
+:101D300000275C0000CF0000004A5C0000010000AA
+:101D4000007C5C0000010000007D5C0000010000E0
+:101D5000007E5C0000010000007F5C0000010000CC
+:101D600000845C000001000000855C0000010000B0
+:101D700000865C000001000000875C00000100009C
+:101D8000008C5C0000020000008D5C00000200007E
+:101D9000008E5C0000020000008F5C00000200006A
+:101DA00000945C000001000000955C000001000050
+:101DB00000965C000001000000975C00000100003C
+:101DC000009C5C0000010000009D5C000001000020
+:101DD000009E5C0000010000009F5C00000100000C
+:101DE00000A45C000002000000A55C0000020000EE
+:101DF00000A65C000002000000A75C0000020000DA
+:101E000000AC5C000001000000AD5C0000010000BF
+:101E100000AE5C000001000000AF5C0000010000AB
+:101E200000BC5C000001000000BD5C00000100007F
+:101E300000BE5C000001000000BF5C00000100006B
+:101E400000C45C000001000000C55C00000100004F
+:101E500000C65C000001000000C75C00000100003B
+:101E600000CC5C000001000000CD5C00000100001F
+:101E700000CE5C000001000000CF5C00000100000B
+:101E800000D25C00000000803FD45C000001000034
+:101E900000D55C000001000000D65C0000010000DD
+:101EA00000D75C000001000000DA5C000000008048
+:101EB0003FDC5C000001000000DD5C000001000070
+:101EC00000DE5C000001000000DF5C00000100009B
+:101ED00000E25C00000000803FE45C0000010000C4
+:101EE00000E55C000001000000E65C00000100006D
+:101EF00000E75C000001000000EA5C0000000080D8
+:101F00003FEC5C000001000000ED5C0000010000FF
+:101F100000EE5C000001000000EF5C00000100002A
+:101F200000F25C00000000803FF45C000001000053
+:101F300000F55C000001000000F65C0000010000FC
+:101F400000F75C000001000000FA5C000000008067
+:101F50003FFC5C000011000000FD5C00001100006F
+:101F600000FE5C000011000000FF5C00001100009A
+:101F700000025D00000000803F0A5D00000000805C
+:101F80003F125D00000000803F1A5D0000000080ED
+:101F90003F225D00000000803F2A5D0000000080BD
+:101FA0003F325D00000000803F3A5D00000000808D
+:101FB0003F3C5D00008168AC0F3D5D00008168AC76
+:101FC0000F3E5D00008168AC0F3F5D00008168AC92
+:101FD0000F425D00000000803F445D00000F0000E4
+:101FE00000455D00000F000000465D00000F00008E
+:101FF00000475D00000F0000004A5D000000008007
+:102000003F525D000010000000845D000067FE1F6D
+:1020100000855D000067FE1F00865D000067FE1FF3
+:1020200000875D000067FE1F009C5D00001100003E
+:10203000009D5D0000110000009E5D000011000089
+:10204000009F5D000011000000A45D000001000081
+:1020500000A55D000001000000A65D000001000079
+:1020600000A75D000001000000C45D000004000046
+:1020700000C55D000004000000C65D000004000013
+:1020800000C75D000004000000F45D0000010000D6
+:1020900000F55D000001000000F65D000001000099
+:1020A00000F75D0000010000001C5E000011000050
+:1020B000001D5E0000110000001E5E000011000007
+:1020C000001F5E0000110000005C5E00008168AC33
+:1020D0000F5D5E00008168AC0F5E5E00008168AC41
+:1020E0000F5F5E00008168AC0F7C5E000011000095
+:1020F000007D5E0000110000007E5E000011000007
+:10210000007F5E000011000000845E0000010000FE
+:1021100000855E000001000000865E0000010000F6
+:1021200000875E0000010000008A5E0000120C10B3
+:1021300008925E000005000000945E0000010000AF
+:1021400000955E000001000000965E0000010000A6
+:1021500000975E000001000000A45E000001000086
+:1021600000A55E000001000000A65E000001000066
+:1021700000A75E000001000000AA5E000001000050
+:1021800000B45E0000FF070000B55E0000FF07001E
+:1021900000B65E0000FF070000B75E0000FF07000A
+:1021A00000BA5E0000FFFF0000C25E0000FFFF00FB
+:1021B00000C45E000001000000C55E0000010000D8
+:1021C00000C65E000001000000C75E0000010000C4
+:1021D00000CA5E0000FFFF0000D25E0000FFFF00AB
+:1021E00000D45E000001000000D55E000001000088
+:1021F00000D65E000001000000D75E000001000074
+:1022000000DA5E000003000000DA5F000000FFFF5C
+:1022100000E25F00001A000000F25F00000300000F
+:10222000002C600000080000002D60000008000085
+:10223000002E600000080000002F60000008000071
+:102240000034600000080000003560000008000055
+:102250000036600000080000003760000008000041
+:10226000003C600000080000003D60000008000025
+:10227000003E600000080000003F60000008000011
+:1022800000446000000800000045600000080000F5
+:1022900000466000000800000047600000080000E1
+:1022A000004C600000080000004D600000080000C5
+:1022B000004E600000080000004F600000080000B1
+:1022C0000054600000080000005560000008000095
+:1022D0000056600000080000005760000008000081
+:1022E000005C600000080000005D60000008000065
+:1022F000005E600000080000005F60000008000051
+:102300000064600000080000006560000008000034
+:102310000066600000080000006760000008000020
+:10232000006C600000110000006D600000110000F2
+:10233000006E600000110000006F600000110000DE
+:1023400000AC6000008168AC0FAD6000008168AC3B
+:102350000FAE6000008168AC0FAF6000008168AC18
+:102360000FB460000000040000B56000000004002D
+:1023700000B660000000040000B760000000040028
+:1023800000BC60000000040000BD6000000004000C
+:1023900000BE60000000040000BF600000000400F8
+:1023A00000C460000000040000C5600000000400DC
+:1023B00000C660000000040000C7600000000400C8
+:1023C00000CC60000000040000CD600000000400AC
+:1023D00000CE60000000040000CF60000000040098
+:1023E00000D460000000040000D56000000004007C
+:1023F00000D660000000040000D760000000040068
+:1024000000DC60000000040000DD6000000004004B
+:1024100000DE60000000040000DF60000000040037
+:1024200000E460000000040000E56000000004001B
+:1024300000E660000000040000E760000000040007
+:1024400000EC60000000040000ED600000000400EB
+:1024500000EE60000000040000EF600000000400D7
+:1024600000F1600000DFBFE304F46000000003003F
+:1024700000F560000000030000F6600000000300AB
+:1024800000F760000000030000F9600000DFBFE318
+:1024900004FC60000000030000FD60000000030079
+:1024A00000FE60000000030000FF60000000030069
+:1024B000000461000000030000056100000003004B
+:1024C0000006610000000300000761000000030037
+:1024D000000C610000000300000D6100000003001B
+:1024E000000E610000000300000F61000000030007
+:1024F00000146100000003000015610000000300EB
+:1025000000166100000003000017610000000300D6
+:10251000001C610000000300001D610000000300BA
+:10252000001E610000000300001F610000000300A6
+:1025300000216100008168AC0F24610000000300ED
+:102540000025610000000300002661000000030078
+:102550000027610000000300002A61000002010062
+:10256000002C610000000300002D6100000003004A
+:10257000002E610000000300002F61000000030036
+:10258000003461000001000000356100000100001E
+:10259000003661000001000000376100000100000A
+:1025A000003A610000040000003C6100000F0000E0
+:1025B000003D6100000F0000003E6100000F0000C0
+:1025C000003F6100000F00000042610000040000B5
+:1025D000004A610000040000005261000004000095
+:1025E000005A610000040000006261000004000065
+:1025F0000072610000FF0700007C61000020000005
+:10260000007D610000200000007E610000200000CD
+:10261000007F6100002000000081610000DFBFE357
+:1026200004826100000201000084610000110000CA
+:1026300000856100001100000086610000110000AB
+:1026400000876100001100000089610000DFBFE326
+:10265000048C610000000100008D61000000010099
+:10266000008E610000000100008F61000000010089
+:10267000009C610000010000009D6100000100005D
+:10268000009E610000010000009F61000001000049
+:1026900000B461000040000000B56100004000008F
+:1026A00000B661000040000000B76100004000007B
+:1026B00000BC61000000010000BD610000000100DD
+:1026C00000BE61000000010000BF610000000100C9
+:1026D00000CC61000003000000CD61000003000099
+:1026E00000CE61000003000000CF61000003000085
+:1026F00000D261000004000000DA61000004000064
+:1027000000E261000004000000EA61000004000033
+:1027100000F461000067FE1F00F561000067FE1F06
+:1027200000F661000067FE1F00F761000067FE1FF2
+:1027300000146200000200000015620000020000A8
+:102740000016620000020000001762000002000094
+:10275000001C6200008168AC0F1D6200008168AC43
+:102760000F1E6200008168AC0F1F6200008168AC20
+:102770000F6C620000010000006D620000010000AB
+:10278000006E620000010000006F620000010000A6
+:102790000094620000040000009562000004000044
+:1027A0000096620000040000009762000004000030
+:1027B00000A462000001000000A56200000100000A
+:1027C00000A662000001000000A7620000010000F6
+:1027D00000AC62000000040000AD620000000400D4
+:1027E00000AE62000000040000AF620000000400C0
+:1027F00000B462000000030000B5620000000300A6
+:1028000000B662000000030000B762000000030091
+:1028100000BC62000001100000BD62000001100059
+:1028200000BE62000001100000BF62000001100045
+:1028300000DC62000011000000DD620000110000F9
+:1028400000DE62000011000000DF620000110000E5
+:10285000001C6300008168AC0F1D6300008168AC40
+:102860000F1E6300008168AC0F1F6300008168AC1D
+:102870000F246300000F000000256300000F00001C
+:1028800000266300000F000000276300000F000017
+:10289000007A630000140C08009263000004080032
+:1028A00000A263000004000000AA6300000400000E
+:1028B00000B2630000120C1008C2630000040000A4
+:1028C00000CA63000004000000DA6300001000008A
+:1028D00000E463000067FE1F00E563000067FE1F61
+:1028E00000E663000067FE1F00E763000067FE1F4D
+:1028F00000026400000408000004640000110000ED
+:1029000000056400001100000006640000110000D2
+:102910000007640000110000000A640000010000CC
+:1029200000126400001A0000001A6400007F00001A
+:10293000001C640000040000001D6400000400008E
+:10294000001E640000040000001F6400000400007A
+:10295000002A640000010000002C64000001000057
+:10296000002D640000010000002E64000001000042
+:10297000002F6400000100000032640000140C0805
+:102980000034640000010000003564000001000014
+:102990000036640000010000003764000001000000
+:1029A0000042640000120C10084A64000004000099
+:1029B00000526400000400000054640000010000A4
+:1029C0000055640000010000005664000001000092
+:1029D0000057640000010000006264000010000065
+:1029E000007C640000010000007D64000001000024
+:1029F000007E640000010000007F64000001000010
+:102A00000082640000010000008A640000120C10C3
+:102A1000088C640000010000008D640000010000CB
+:102A2000008E640000010000008F640000010000BF
+:102A300000AC6400008824712AAD64000088247111
+:102A40002AAE6400008824712AAF640000882471D3
+:102A50002ABC64000000C08540BD64000000C08541
+:102A600040BE64000000C08540BF64000000C08517
+:102A700040C2640000FF070000C464000040000082
+:102A800000C564000040000000C664000040000073
+:102A900000C764000040000000CA640000140C0875
+:102AA00000CC64000000010000CD640000000100C3
+:102AB00000CE64000000010000CF640000000100AF
+:102AC00000D464000000010100D564000000010191
+:102AD00000D664000000010100D76400000001017D
+:102AE00000DC64000000008002DD64000000008063
+:102AF00002DE64000000008002DF6400000000804D
+:102B00000274650000DFBFE30475650000DFBFE30A
+:102B10000476650000DFBFE30477650000DFBFE3F4
+:102B2000047C650000DFBFE3047D650000DFBFE3D8
+:102B3000047E650000DFBFE3047F650000DFBFE3C4
+:102B400004846500000100000085650000010000AC
+:102B5000008665000001000000876500000100009C
+:102B6000009465000000FFFF009565000000FFFF76
+:102B7000009665000000FFFF009765000000FFFF62
+:102B8000009C650000010000009D65000001000040
+:102B9000009E650000010000009F6500000100002C
+:102BA00000B465000000FFFF00B565000000FFFFF6
+:102BB00000B665000000FFFF00B765000000FFFFE2
+:102BC00000FC65000001000000FD65000001000040
+:102BD00000FE65000001000000FF6500000100002C
+:102BE000000C660000010000000D660000010000FE
+:102BF000000E660000010000000F660000010000EA
+:102C0000001466000000102030156600000010203F
+:102C100030166600000010203017660000001020FB
+:102C2000301C660000405060701D6600004050601F
+:102C3000701E660000405060701F660000405060CB
+:102C400070246600008898A8B8256600008898A8B7
+:102C5000B8266600008898A8B8276600008898A85B
+:102C6000B82C660000C8D8E8F82D660000C8D8E87F
+:102C7000F82E660000C8D8E8F82F660000C8D8E82B
+:102C8000F83C6600001A0000003D6600001A0000D3
+:102C9000003E6600001A0000003F6600001A0000B7
+:102CA000004C660000040000004D660000040000B7
+:102CB000004E660000040000004F660000040000A3
+:102CC000009266000001000000AA660000100000EB
+:102CD00000FC66000004000000FD66000004000027
+:102CE00000FE66000004000000FF66000004000013
+:102CF00000046700000400000005670000040000F5
+:102D000000066700000400000007670000040000E0
+:102D1000000C670000808060000D6700008080600C
+:102D2000000E670000808060000F670000808060F8
+:102D30000034670000040000003567000004000054
+:102D40000036670000040000003767000004000040
+:102D5000004C670000040000004D67000004000004
+:102D6000004E670000040000004F670000040000F0
+:102D700000546700000400000055670000040000D4
+:102D800000566700000400000057670000040000C0
+:102D9000005C670000800000005D670000800000AC
+:102DA000005E670000800000005F67000080000098
+:102DB0000064670000040000006567000004000074
+:102DC0000066670000040000006767000004000060
+:102DD0000072680000880000007A68000088000027
+:102DE000008C680000040000008D680000040000F2
+:102DF000008E680000040000008F680000040000DE
+:102E00000092680000040000009468000080000048
+:102E100000956800008000000096680000800000B7
+:102E20000097680000800000009C6800000400001B
+:102E3000009D680000040000009E6800000400007F
+:102E4000009F68000004000000A468000000010268
+:102E500003A568000000010203A66800000001024B
+:102E600003A768000000010203AC68000003000033
+:102E700000AD68000003000000AE68000003000021
+:102E800000AF68000003000000B468000004000008
+:102E900000B568000004000000B6680000040000EF
+:102EA00000B768000004000000DC680000040000B7
+:102EB00000DD68000004000000DE6800000400007F
+:102EC00000DF68000004000000E468000003000068
+:102ED00000E568000003000000E668000003000051
+:102EE00000E768000003000000046900000400001F
+:102EF00000056900000400000006690000040000ED
+:102F00000007690000040000004A69000026000074
+:102F100000626900000000803F826900001A000022
+:102F2000008A69000010000000D26A000052000010
+:102F300000E26A000026000000F26A0000040000BF
+:102F400000FA6A0000040000000A6B00001A00008A
+:102F500000226B000000FFFF00326B000004000045
+:102F6000003A6B0000040000004A6B000080000083
+:102F700000526B0000040000005A6B0000140C08A3
+:102F8000006A6B0000FF070000306E0000040000C4
+:102F900000386E00000400000082B500000400004C
+:102FA000008AB50000040000009AB500008000000F
+:102FB00000A2B5000004000000AAB5000001000056
+:102FC00000BAB5000027000000CAB50000260000C6
+:102FD00000EAB5000000000004F2B50000000000A7
+:102FE00004FAB500000000000402B6000000000072
+:102FF000040AB600000000000412B6000000000041
+:10300000041AB600000000000422B6000000000010
+:10301000042AB600000000000432B60000000000E0
+:10302000043AB600000000000442B60000000000B0
+:10303000044AB600000000000452B6000000000080
+:10304000045AB600000000000462B6000000000050
+:10305000048AB70000DFBFE30492B70000DFBFE3DC
+:1030600004AAB7000021FE01002CBA0000040000F1
+:10307000002DBA0000040000002EBA000004000079
+:10308000002FBA00000400000034BA000003000062
+:103090000035BA00000300000036BA00000300004B
+:1030A0000037BA000003000000C4BA00000F00009F
+:1030B00000C5BA00000F000000C6BA00000F0000F3
+:1030C00000C7BA00000F00000024BB00000400008D
+:1030D0000025BB00000400000026BB000004000027
+:1030E0000027BB0000040000002CBB0000FFFF0015
+:1030F000002DBB0000FFFF00002EBB0000FFFF0003
+:10310000002FBB0000FFFF000034BB0000FFFF00EA
+:103110000035BB0000FFFF000036BB0000FFFF00D2
+:103120000037BB0000FFFF00003CBB0000FFFF00BA
+:10313000003DBB0000FFFF00003EBB0000FFFF00A2
+:10314000003FBB0000FFFF000044BB0000FFFF008A
+:103150000045BB0000FFFF000046BB0000FFFF0072
+:103160000047BB0000FFFF00008CBB000001000017
+:10317000008DBB0000010000008EBB0000010000BC
+:10318000008FBB000001000000ACBB00000100008C
+:1031900000ADBB000001000000AEBB00000100005C
+:1031A00000AFBB000001000000DCBB00000100001C
+:1031B00000DDBB000001000000DEBB0000010000DC
+:1031C00000DFBB00000100000044BC000001000063
+:1031D0000045BC00000100000046BC0000010000EA
+:1031E0000047BC0000010000004CBC0000010000D2
+:1031F000004DBC0000010000004EBC0000010000BA
+:10320000004FBC00000100000054BC0000020000A0
+:103210000055BC00000200000056BC000002000087
+:103220000057BC0000020000005CBC000001000070
+:10323000005DBC0000010000005EBC000001000059
+:10324000005FBC00000100000064BC000001000041
+:103250000065BC00000100000066BC000001000029
+:103260000067BC0000010000006CBC000002000010
+:10327000006DBC0000020000006EBC0000020000F7
+:10328000006FBC00000200000074BC0000010000E0
+:103290000075BC00000100000076BC0000010000C9
+:1032A0000077BC00000100000084BC000011000099
+:1032B0000085BC00001100000086BC000011000069
+:1032C0000087BC000011000000C4BC00008168AC95
+:1032D0000FC5BC00008168AC0FC6BC00008168ACA3
+:1032E0000FC7BC00008168AC0FDCBC00000400000C
+:1032F00000DDBC000004000000DEBC000004000093
+:1033000000DFBC000004000000FCBC000011000055
+:1033100000FDBC000011000000FEBC000011000018
+:1033200000FFBC00001100000004BD00000100000F
+:103330000005BD00000100000006BD000001000006
+:103340000007BD00000100000014BD0000CF000018
+:103350000015BD0000CF00000016BD0000CF00002A
+:103360000017BD0000CF0000001CBD0000CF000012
+:10337000001DBD0000CF0000001EBD0000CF0000FA
+:10338000001FBD0000CF00000024BD0000CF0000E2
+:103390000025BD0000CF00000026BD0000CF0000CA
+:1033A0000027BD0000CF0000007CBD000001000030
+:1033B000007DBD0000010000007EBD000001000096
+:1033C000007FBD00000100000084BD00000100007E
+:1033D0000085BD00000100000086BD000001000066
+:1033E0000087BD0000010000008CBD00000200004D
+:1033F000008DBD0000020000008EBD000002000034
+:10340000008FBD00000200000094BD00000100001C
+:103410000095BD00000100000096BD000001000005
+:103420000097BD0000010000009CBD0000010000ED
+:10343000009DBD0000010000009EBD0000010000D5
+:10344000009FBD000001000000A4BD0000020000BC
+:1034500000A5BD000002000000A6BD0000020000A3
+:1034600000A7BD000002000000ACBD00000100008C
+:1034700000ADBD000001000000AEBD000001000075
+:1034800000AFBD000001000000BCBD000001000055
+:1034900000BDBD000001000000BEBD000001000035
+:1034A00000BFBD000001000000C4BD00000100001D
+:1034B00000C5BD000001000000C6BD000001000005
+:1034C00000C7BD000001000000CCBD0000010000ED
+:1034D00000CDBD000001000000CEBD0000010000D5
+:1034E00000CFBD000001000000D4BD0000010000BD
+:1034F00000D5BD000001000000D6BD0000010000A5
+:1035000000D7BD000001000000DCBD00000100008C
+:1035100000DDBD000001000000DEBD000001000074
+:1035200000DFBD000001000000E4BD00000100005C
+:1035300000E5BD000001000000E6BD000001000044
+:1035400000E7BD000001000000ECBD00000100002C
+:1035500000EDBD000001000000EEBD000001000014
+:1035600000EFBD000001000000F4BD0000010000FC
+:1035700000F5BD000001000000F6BD0000010000E4
+:1035800000F7BD000001000000FCBD0000110000BC
+:1035900000FDBD000011000000FEBD000011000094
+:1035A00000FFBD0000110000003CBE00008168ACBF
+:1035B0000F3DBE00008168AC0F3EBE00008168ACCC
+:1035C0000F3FBE00008168AC0F44BE00000F00003A
+:1035D0000045BE00000F00000046BE00000F0000C6
+:1035E0000047BE00000F00000084BE000067FE1F01
+:1035F0000085BE000067FE1F0086BE000067FE1F3C
+:103600000087BE000067FE1F009CBE000011000086
+:10361000009DBE0000110000009EBE0000110000D1
+:10362000009FBE000011000000A4BE0000010000C9
+:1036300000A5BE000001000000A6BE0000010000C1
+:1036400000A7BE000001000000C4BE00000400008E
+:1036500000C5BE000004000000C6BE00000400005B
+:1036600000C7BE000004000000F4BE00000100001E
+:1036700000F5BE000001000000F6BE0000010000E1
+:1036800000F7BE0000010000001CBF000011000098
+:10369000001DBF0000110000001EBF00001100004F
+:1036A000001FBF0000110000005CBF00008168AC7B
+:1036B0000F5DBF00008168AC0F5EBF00008168AC89
+:1036C0000F5FBF00008168AC0F7CBF0000110000DD
+:1036D000007DBF0000110000007EBF00001100004F
+:1036E000007FBF00001100000084BF000001000047
+:1036F0000085BF00000100000086BF00000100003F
+:103700000087BF00000100000094BF00000100001E
+:103710000095BF00000100000096BF0000010000FE
+:103720000097BF000001000000A4BF0000010000DE
+:1037300000A5BF000001000000A6BF0000010000BE
+:1037400000A7BF000001000000B4BF0000FF070099
+:1037500000B5BF0000FF070000B6BF0000FF070074
+:1037600000B7BF0000FF070000C4BF000001000059
+:1037700000C5BF000001000000C6BF00000100003E
+:1037800000C7BF000001000000D4BF00000100001E
+:1037900000D5BF000001000000D6BF0000010000FE
+:1037A00000D7BF0000010000002CC100000800008D
+:1037B000002DC10000080000002EC100000800001C
+:1037C000002FC100000800000034C1000008000004
+:1037D0000035C100000800000036C10000080000EC
+:1037E0000037C10000080000003CC10000080000D4
+:1037F000003DC10000080000003EC10000080000BC
+:10380000003FC100000800000044C10000080000A3
+:103810000045C100000800000046C100000800008B
+:103820000047C10000080000004CC1000008000073
+:10383000004DC10000080000004EC100000800005B
+:10384000004FC100000800000054C1000008000043
+:103850000055C100000800000056C100000800002B
+:103860000057C10000080000005CC1000008000013
+:10387000005DC10000080000005EC10000080000FB
+:10388000005FC100000800000064C10000080000E3
+:103890000065C100000800000066C10000080000CB
+:1038A0000067C10000080000006CC10000110000AA
+:1038B000006DC10000110000006EC1000011000089
+:1038C000006FC1000011000000ACC100008168ACB5
+:1038D0000FADC100008168AC0FAEC100008168ACC3
+:1038E0000FAFC100008168AC0FB4C100000004003C
+:1038F00000B5C1000000040000B6C10000000400D3
+:1039000000B7C1000000040000BCC10000000400BA
+:1039100000BDC1000000040000BEC10000000400A2
+:1039200000BFC1000000040000C4C100000004008A
+:1039300000C5C1000000040000C6C1000000040072
+:1039400000C7C1000000040000CCC100000004005A
+:1039500000CDC1000000040000CEC1000000040042
+:1039600000CFC1000000040000D4C100000004002A
+:1039700000D5C1000000040000D6C1000000040012
+:1039800000D7C1000000040000DCC10000000400FA
+:1039900000DDC1000000040000DEC10000000400E2
+:1039A00000DFC1000000040000E4C10000000400CA
+:1039B00000E5C1000000040000E6C10000000400B2
+:1039C00000E7C1000000040000ECC100000004009A
+:1039D00000EDC1000000040000EEC1000000040082
+:1039E00000EFC1000000040000F4C100000003006B
+:1039F00000F5C1000000030000F6C1000000030054
+:103A000000F7C1000000030000FCC100000003003B
+:103A100000FDC1000000030000FEC1000000030023
+:103A200000FFC100000003000004C200000003000A
+:103A30000005C200000003000006C20000000300F1
+:103A40000007C20000000300000CC20000000300D9
+:103A5000000DC20000000300000EC20000000300C1
+:103A6000000FC200000003000014C20000000300A9
+:103A70000015C200000003000016C2000000030091
+:103A80000017C20000000300001CC2000000030079
+:103A9000001DC20000000300001EC2000000030061
+:103AA000001FC200000003000024C2000000030049
+:103AB0000025C200000003000026C2000000030031
+:103AC0000027C20000000300002CC2000000030019
+:103AD000002DC20000000300002EC2000000030001
+:103AE000002FC200000003000034C20000010000EB
+:103AF0000035C200000100000036C20000010000D5
+:103B00000037C20000010000003CC200000F0000AE
+:103B1000003DC200000F0000003EC200000F000088
+:103B2000003FC200000F0000007CC2000020000027
+:103B3000007DC20000200000007EC20000200000C6
+:103B4000007FC200002000000084C20000110000BD
+:103B50000085C200001100000086C20000110000B4
+:103B60000087C20000110000008CC20000000100AC
+:103B7000008DC20000000100008EC20000000100A4
+:103B8000008FC20000000100009CC2000001000084
+:103B9000009DC20000010000009EC2000001000064
+:103BA000009FC2000001000000B4C20000400000FD
+:103BB00000B5C2000040000000B6C2000040000096
+:103BC00000B7C2000040000000BCC20000000100BD
+:103BD00000BDC2000000010000BEC20000000100E4
+:103BE00000BFC2000000010000CCC20000030000C2
+:103BF00000CDC2000003000000CEC20000030000A0
+:103C000000CFC2000003000000F4C2000067FE1FE6
+:103C100000F5C2000067FE1F00F6C2000067FE1F2D
+:103C200000F7C2000067FE1F0014C300000200007E
+:103C30000015C300000200000016C30000020000CF
+:103C40000017C30000020000001CC300008168AC24
+:103C50000F1DC300008168AC0F1EC300008168AC5B
+:103C60000F1FC300008168AC0F6CC300000100008F
+:103C7000006DC30000010000006EC30000010000E1
+:103C8000006FC300000100000094C30000040000A6
+:103C90000095C300000400000096C300000400006B
+:103CA0000097C3000004000000A4C300000100004E
+:103CB00000A5C3000001000000A6C3000001000031
+:103CC00000A7C3000001000000ACC3000000040016
+:103CD00000ADC3000000040000AEC30000000400FB
+:103CE00000AFC3000000040000B4C30000000300E4
+:103CF00000B5C3000000030000B6C30000000300CD
+:103D000000B7C3000000030000BCC30000011000A6
+:103D100000BDC3000001100000BEC3000001100080
+:103D200000BFC3000001100000DCC3000011000050
+:103D300000DDC3000011000000DEC3000011000020
+:103D400000DFC30000110000001CC400008168AC4B
+:103D50000F1DC400008168AC0F1EC400008168AC58
+:103D60000F1FC400008168AC0F24C400000F0000C6
+:103D70000025C400000F00000026C400000F000052
+:103D80000027C400000F000000E4C4000067FE1F0D
+:103D900000E5C4000067FE1F00E6C4000067FE1FC8
+:103DA00000E7C4000067FE1F0004C500001100000A
+:103DB0000005C500001100000006C500001100004C
+:103DC0000007C50000110000001CC5000004000031
+:103DD000001DC50000040000001EC5000004000016
+:103DE000001FC50000040000002CC50000010000F9
+:103DF000002DC50000010000002EC50000010000DC
+:103E0000002FC500000100000034C50000010000C3
+:103E10000035C500000100000036C50000010000AB
+:103E20000037C500000100000054C500000100007B
+:103E30000055C500000100000056C500000100004B
+:103E40000057C50000010000007CC5000001000013
+:103E5000007DC50000010000007EC50000010000DB
+:103E6000007FC50000010000008CC50000010000BB
+:103E7000008DC50000010000008EC500000100009B
+:103E8000008FC5000001000000ACC500008824714F
+:103E90002AADC500008824712AAEC50000882471AF
+:103EA0002AAFC500008824712ABCC5000000C08567
+:103EB00040BDC5000000C08540BEC5000000C085F3
+:103EC00040BFC5000000C08540C4C50000400000E0
+:103ED00000C5C5000040000000C6C500004000004D
+:103EE00000C7C5000040000000CCC5000000010074
+:103EF00000CDC5000000010000CEC500000001009B
+:103F000000CFC5000000010000D4C5000000010181
+:103F100000D5C5000000010100D6C5000000010168
+:103F200000D7C5000000010100DCC50000000080D2
+:103F300002DDC5000000008002DEC5000000008038
+:103F400002DFC500000000800274C60000DFBFE38E
+:103F50000475C60000DFBFE30476C60000DFBFE3E0
+:103F60000477C60000DFBFE3047CC60000DFBFE3C8
+:103F7000047DC60000DFBFE3047EC60000DFBFE3B0
+:103F8000047FC60000DFBFE30484C6000001000018
+:103F90000085C600000100000086C6000001000088
+:103FA0000087C600000100000094C6000000FFFF6B
+:103FB0000095C6000000FFFF0096C6000000FFFF4E
+:103FC0000097C6000000FFFF009CC6000001000033
+:103FD000009DC60000010000009EC6000001000018
+:103FE000009FC6000001000000B4C6000000FFFFF3
+:103FF00000B5C6000000FFFF00B6C6000000FFFFCE
+:1040000000B7C6000000FFFF00FCC6000001000072
+:1040100000FDC6000001000000FEC6000001000017
+:1040200000FFC60000010000000CC70000010000F6
+:10403000000DC70000010000000EC70000010000D5
+:10404000000FC700000100000014C700000010208E
+:104050003015C700000010203016C70000001020E7
+:104060003017C70000001020301CC700004050600F
+:10407000701DC70000405060701EC70000405060B7
+:10408000701FC700004050607024C700008898A8C7
+:10409000B825C700008898A8B826C700008898A847
+:1040A000B827C700008898A8B82CC70000C8D8E86F
+:1040B000F82DC70000C8D8E8F82EC70000C8D8E817
+:1040C000F82FC70000C8D8E8F83CC700001A000065
+:1040D000003DC700001A0000003EC700001A0000A3
+:1040E000003FC700001A00000098500100040000C3
+:1040F00000A050010004000000A8500100120C10A4
+:1041000008B050010003000000C0500100120C1064
+:1041100008D0500100140C0800D850010001000024
+:1041200000E0500100140C0800F8500100120C10BF
+:104130000800510100270000001851010001000093
+:1041400000286F010001000000E06F0100120C1058
+:1041500008487001000000000450700100000000D9
+:104160000460700100800000008070010080000089
+:1041700000907001003F000000E8700100020000A4
+:1041800000F070010000000004F870010000000061
+:10419000044071010004000000607101000400008F
+:1041A00000F071010001000000F871010001100031
+:1041B0000000720100FFFF000008720100FFFF0015
+:1041C0000010720100FFFF000018720100FFFF00E5
+:1041D00000207301000000803F2873010000008070
+:1041E0003F307301000000803F3873010000008001
+:1041F0003F407301000000803F48730100000080D1
+:104200003F507301000000803F58730100000080A0
+:104210003F607301000000803F6873010000008070
+:104220003F707301000000803F7873010000008040
+:104230003F807301000000803F8873010000008010
+:104240003F907301000000803F98730100000080E0
+:104250003FA073010010000000B8730100030000CC
+:104260000000740100120C100809740100800000A5
+:10427000000A740100800000000B7401008000003F
+:10428000000C740100800000000D7401008000002B
+:10429000000E740100800000000F74010080000017
+:1042A000001074010080000000117401000470000F
+:1042B0008012740100047000801374010004700007
+:1042C00080147401000470008015740100047000F3
+:1042D00080167401000470008017740100047000DF
+:1042E000801874010004700080197401000004003B
+:1042F000041A740100000400041B7401000004008F
+:10430000041C740100000400041D7401000004007A
+:10431000041E740100000400041F74010000040066
+:104320000420740100000400042174010000100046
+:10433000002274010000100000237401000010002E
+:10434000002474010000100000257401000010001A
+:104350000026740100001000002774010000100006
+:1043600000287401000010000039740100010000F1
+:10437000003A740100010000003B740100010000DC
+:10438000003C740100010000003D740100010000C8
+:10439000003E740100010000003F740100010000B4
+:1043A0000040740100010000005174010001000090
+:1043B000005274010001000000537401000100006C
+:1043C0000054740100010000005574010001000058
+:1043D0000056740100010000005774010001000044
+:1043E0000058740100010000006174010004000025
+:1043F0000062740100040000006374010004000006
+:1044000000647401000400000065740100040000F1
+:1044100000667401000400000067740100040000DD
+:1044200000687401000400000069740100020000CB
+:10443000006A740100020000006B740100020000B9
+:10444000006C740100020000006D740100020000A5
+:10445000006E740100020000006F74010002000091
+:10446000007074010002000000C9740100800000A7
+:1044700000CA74010080000000CB740100800000BD
+:1044800000CC74010080000000CD740100800000A9
+:1044900000CE74010080000000CF74010080000095
+:1044A00000D074010080000000D17401000470008D
+:1044B00080D274010004700080D374010004700085
+:1044C00080D474010004700080D574010004700071
+:1044D00080D674010004700080D77401000470005D
+:1044E00080D874010004700080D9740100000400B9
+:1044F00004DA74010000040004DB7401000004000D
+:1045000004DC74010000040004DD740100000400F8
+:1045100004DE74010000040004DF740100000400E4
+:1045200004E074010000040004E1740100001000C4
+:1045300000E274010000100000E3740100001000AC
+:1045400000E474010000100000E574010000100098
+:1045500000E674010000100000E774010000100084
+:1045600000E874010000100000F97401000100006F
+:1045700000FA74010001000000FB7401000100005A
+:1045800000FC74010001000000FD74010001000046
+:1045900000FE74010001000000FF74010001000032
+:1045A000000075010001000000117501000100000C
+:1045B00000127501000100000013750100010000E8
+:1045C00000147501000100000015750100010000D4
+:1045D00000167501000100000017750100010000C0
+:1045E00000187501000100000021750100040000A1
+:1045F0000022750100040000002375010004000082
+:10460000002475010004000000257501000400006D
+:104610000026750100040000002775010004000059
+:104620000028750100040000002975010002000047
+:10463000002A750100020000002B75010002000035
+:10464000002C750100020000002D75010002000021
+:10465000002E750100020000002F7501000200000D
+:1046600000307501000200000081750100120C107D
+:104670000882750100120C100883750100120C10DD
+:104680000884750100120C100885750100120C10C9
+:104690000886750100120C100887750100120C10B5
+:1046A0000888750100120C1008B9750100FFFF00A1
+:1046B00000BA750100FFFF0000BB750100FFFF009D
+:1046C00000BC750100FFFF0000BD750100FFFF0089
+:1046D00000BE750100FFFF0000BF750100FFFF0075
+:1046E00000C0750100FFFF0000C1750100FFFF0061
+:1046F00000C2750100FFFF0000C3750100FFFF004D
+:1047000000C4750100FFFF0000C5750100FFFF0038
+:1047100000C6750100FFFF0000C7750100FFFF0024
+:1047200000C8750100FFFF0000C9750100FFFF0010
+:1047300000CA750100FFFF0000CB750100FFFF00FC
+:1047400000CC750100FFFF0000CD750100FFFF00E8
+:1047500000CE750100FFFF0000CF750100FFFF00D4
+:1047600000D0750100FFFF0000D1750100FFFF00C0
+:1047700000D2750100FFFF0000D3750100FFFF00AC
+:1047800000D4750100FFFF0000D5750100FFFF0098
+:1047900000D6750100FFFF0000D7750100FFFF0084
+:1047A00000D8750100FFFF0000D97501000100006D
+:1047B00000DA75010001000000DB75010001000056
+:1047C00000DC75010001000000DD75010001000042
+:1047D00000DE75010001000000DF7501000100002E
+:1047E00000E075010001000000E175010001000119
+:1047F00000E275010001000100E375010001000104
+:1048000000E475010001000100E5750100010001EF
+:1048100000E675010001000100E7750100010001DB
+:1048200000E875010001000100E9750100010001C7
+:1048300000EA75010001000100EB750100010001B3
+:1048400000EC75010001000100ED7501000100019F
+:1048500000EE75010001000100EF7501000100018B
+:1048600000F075010001000100F175010001000078
+:1048700000F275010001000000F375010001000065
+:1048800000F475010001000000F575010001000051
+:1048900000F675010001000000F77501000100003D
+:1048A00000F8750100010000000176010021FE0101
+:1048B000000276010021FE01000376010021FE01C5
+:1048C000000476010021FE01000576010021FE01B1
+:1048D000000676010021FE01000776010021FE019D
+:1048E000000876010021FE010031760100120C1053
+:1048F0000832760100120C100833760100120C10F9
+:104900000834760100120C100835760100120C10E4
+:104910000836760100120C100837760100120C10D0
+:104920000838760100120C100839760100040000E6
+:10493000003A760100040000003B7601000400000C
+:10494000003C760100040000003D760100040000F8
+:10495000003E760100040000003F760100040000E4
+:1049600000407601000400000049760100020000CA
+:10497000004A760100020000004B760100020000B0
+:10498000004C760100020000004D7601000200009C
+:10499000004E760100020000004F76010002000088
+:1049A0000050760100020000005176010011000065
+:1049B0000052760100110000005376010011000042
+:1049C000005476010011000000557601001100002E
+:1049D000005676010011000000577601001100001A
+:1049E000005876010011000000997601008168AC42
+:1049F0000F9A7601008168AC0F9B7601008168AC4C
+:104A00000F9C7601008168AC0F9D7601008168AC37
+:104A10000F9E7601008168AC0F9F7601008168AC23
+:104A20000FA07601008168AC0FC176010004000080
+:104A300000C276010004000000C3760100040000FB
+:104A400000C476010004000000C5760100040000E7
+:104A500000C676010004000000C7760100040000D3
+:104A600000C8760100040000001177010002000078
+:104A7000001277010002000000137701000200001D
+:104A80000014770100020000001577010002000009
+:104A900000167701000200000017770100020000F5
+:104AA00000187701000200000019770100010000E2
+:104AB000001A770100010000001B770100010000CF
+:104AC000001C770100010000001D770100010000BB
+:104AD000001E770100010000001F770100010000A7
+:104AE0000020770100010000002177010001000093
+:104AF000002277010001000000237701000100007F
+:104B0000002477010001000000257701000100006A
+:104B10000026770100010000002777010001000056
+:104B20000028770100010000002977010002000041
+:104B3000002A770100020000002B7701000200002C
+:104B4000002C770100020000002D77010002000018
+:104B5000002E770100020000002F77010002000004
+:104B600000307701000200000031770100010000F1
+:104B700000327701000100000033770100010000DE
+:104B800000347701000100000035770100010000CA
+:104B900000367701000100000037770100010000B6
+:104BA00000387701000100000039770100010000A2
+:104BB000003A770100010000003B7701000100008E
+:104BC000003C770100010000003D7701000100007A
+:104BD000003E770100010000003F77010001000066
+:104BE0000040770100010000004177010001000052
+:104BF000004277010001000000437701000100003E
+:104C00000044770100010000004577010001000029
+:104C10000046770100010000004777010001000015
+:104C200000487701000100000051770100040000F6
+:104C300000527701000400000053770100040000D7
+:104C400000547701000400000055770100040000C3
+:104C500000567701000400000057770100040000AF
+:104C60000058770100040000006994010011000061
+:104C7000006A940100110000006B94010011000013
+:104C8000006C940100110000006D940100110000FF
+:104C9000006E940100110000006F940100110000EB
+:104CA00000709401001100000079940100010000DF
+:104CB000007A940100010000007B940100010000D3
+:104CC000007C940100010000007D940100010000BF
+:104CD000007E940100010000007F940100010000AB
+:094CE000008094010001000000B5
+:00000001FF
diff --git a/firmware/nouveau/nv94.ctxprog.ihex b/firmware/nouveau/nv94.ctxprog.ihex
new file mode 100644
index 0000000..af11ea0
--- /dev/null
+++ b/firmware/nouveau/nv94.ctxprog.ihex
@@ -0,0 +1,79 @@
+:100000004E5643500035018E0070009C0070002059
+:10001000002000080060004C005000890E400000E5
+:100020000020000700600000003000FF00C000005A
+:10003000002000FF008000090070004D32410044A4
+:10004000294000052940000D294000060E41000509
+:10005000006000C5154000110060000B274000C57E
+:100060002140000000700081007000040060004A20
+:1000700000500040942100070060000127C0002EBE
+:1000800000200001008000CB005000FFFF9000FF27
+:10009000FF910020002000080060004C0050000983
+:1000A000006000450E41004D2941009D007000CFC9
+:1000B0002D40009F0070009F005000C02A4000802B
+:1000C000002000080060004F2A4000C02A4000CCF9
+:1000D0003040008100700000002000060060000039
+:1000E000007000FC1B110083007000000030004015
+:1000F00094210007006000010AC0001E00200001DA
+:10010000008000CB005000FF00C000800070008322
+:1001100000700047002000060060000A0211008005
+:100120000320000700600000003000FF00C000FF57
+:1001300000C80007194100D22D2000FF0080008C6C
+:10014000504000CB0050003F02A0004000200006BD
+:100150000060000F007000020217000A0211003256
+:100160000020000D02100042021C000203120002D7
+:1001700004140000051800090513005005150005BA
+:100180000611000F002000070610000007110000F4
+:1001900009110002091200000A1100020B160028C2
+:1001A0000B12002B0B1400010C11000014110005A0
+:1001B00014110007141100091411000B141100CCC4
+:1001C000002000001510000F7940004B79400040DE
+:1001D000722100070060003F042000FF0088008FAC
+:1001E0000070008C794000CB00500000000000053A
+:1001F0001A14000C1A1300001C1300041C12002017
+:100200001C1400251C1100401C1300441C1200602B
+:100210001C1400651C1100801C1300841C1200A01B
+:100220001C1400A51C1100C01C1300C41C1200E00B
+:100230001C1400E51C1100001F1300401F1900E0F2
+:10024000A14000CA01200006006000440020008098
+:10025000201000C6201100C9201500D02019000070
+:100260002112000321120000221600072212008032
+:100270002211000023110002231100802312008BA1
+:10028000231100942311009C231100E1BE40003192
+:100290000220000600600044002000802410000FAF
+:1002A000AF40004BAF400040722100070060003FAC
+:1002B000042000FF0088008F0070008CAF4000CB4E
+:1002C00000500000000000C6241100C9241500D011
+:1002D000241900002512000325120000261600072D
+:1002E000261200802611000027110002271100802D
+:1002F0002712008B271100942711009C271100E280
+:10030000D1400098022000060060004400200080D8
+:10031000281000C6281100C9281500D0281900008F
+:1003200029120003291200002A1600072A12008051
+:100330002A1100002B1100022B1100802B12008BC0
+:100340002B1100942B11009C2B1100E3EE4000FFB9
+:100350000220000600600044002000802C10000FE6
+:10036000DF40004BDF400040722100070060003F8B
+:10037000042000FF0088008F0070008CDF4000CB5D
+:1003800000500000000000C62C1100C92C1500D040
+:100390002C1900002D1200032D1200002E1600074C
+:1003A0002E1200802E1100002F1100022F1100804C
+:1003B0002F12008B2F1100942F11009C2F11000081
+:1003C0000000000FF54000CB0050004072210007F4
+:1003D0000060003F042000FF008800CB0050008731
+:1003E000F840000A0060000000000000074100A083
+:1003F000007000800070008003200007006000048F
+:10040000002000FF00C000FF008000CB0050000073
+:100410000070000000200006006000FE1B11004D6F
+:10042000294100000070000000200006006000FE6E
+:100430001B1100800070001D0070004D11400081F4
+:10044000007000040060004A005000881341000B57
+:100450000060000000200006006000000070000B3B
+:10046000294100FD1B11004D424000D22D2000FD0E
+:10047000008000CB0050000200C000800320000775
+:100480000060006001200002008000CB00500002EC
+:1004900018C000722C200002008000CB0050004DDC
+:1004A0004E40000B0060004D27410001007000032A
+:1004B000007000062D4100052E41000D0060000572
+:1004C0000070000D007000060070000B0070000E40
+:0B04D0000070001C0070000C006000B9
+:00000001FF
diff --git a/firmware/nouveau/nv94.ctxvals.ihex b/firmware/nouveau/nv94.ctxvals.ihex
new file mode 100644
index 0000000..debe8cc
--- /dev/null
+++ b/firmware/nouveau/nv94.ctxvals.ihex
@@ -0,0 +1,761 @@
+:100000004E56435600ED050000430000003000004E
+:10001000004C00000002000000750000000300001A
+:10002000007600000000100000860000000CFE00BA
+:10003000008B000000001000009600000087010007
+:10004000009B000000181000009C000000FF000052
+:1000500000AB00000004000000AC000000DF004D19
+:1000600004AE00000000060000B400000000000024
+:1000700001B5000000FF000000B700000000040010
+:1000800000BD00000001000000BE00000080000074
+:1000900000BF00000004000000C6000000020000D5
+:1000A00000C700000001000000CB000000010000BC
+:1000B00000CC00000000010000D20000000200009F
+:1000C00000D300000001000000D400000001000087
+:1000D00000D800000001000000D9000000FFFF3F31
+:1000E00000DA000000FF1F0000DC0000000100003B
+:1000F00000DD00000001000000DF00000001000042
+:1001000000E000000001000000E10000000100002C
+:1001100000E200000004000000E300000001000015
+:1001200000E400000001000000E500000001000004
+:1001300000E600000007000000E7000000010000EA
+:1001400000E800000007000000E9000000010000D6
+:1001500000EA00000001000000EB000000010000C8
+:1001600000F000000001000000F1000000000100AC
+:1001700000F300000001000000F600000000010094
+:1001800000F700000001000000F80000000001007E
+:1001900000FA00000001000000FD00000000010066
+:1001A00000020100000400000003010000700000D4
+:1001B000000401000080000000090100000C0000A4
+:1001C000000B010000080000000C010000140000FA
+:1001D000000E010000290000000F010000270000B0
+:1001E00000100100002600000011010000080000BE
+:1001F00000120100000400000013010000270000AD
+:1002000000160100000100000017010000020000BC
+:1002100000180100000300000019010000040000A4
+:10022000001A010000050000001B0100000600008C
+:10023000001C010000070000001D0100000100007B
+:10024000002E010000CF0000003A010000800000F5
+:10025000003B010000040000003C0100000400001D
+:10026000003D010000030000003E0100000100000D
+:1002700000410100001200000042010000100000D7
+:1002800000430100000C00000044010000010000D8
+:1002900000480100000400000049010000020000C5
+:1002A000004A010000040000004D010000FFFF3F74
+:1002B000004E010000FF1F00005801000004000074
+:1002C0000059010000140000005A01000001000064
+:1002D000005D01000002000000600100000100005C
+:1002E0000062010000020000006301000000100035
+:1002F0000064010000000E00006501000000100015
+:100300000066010000001E000068010000010000FE
+:100310000069010000010000006A01000001000006
+:10032000006B010000010000006C010000010000F2
+:1003300000700100000002000072010000010000D6
+:1003400000730100007000000074010000800000D4
+:10035000007701000001000000780100007000003B
+:100360000079010000800000007D01000001000014
+:10037000007E010000CF00000080010000010000AD
+:100380000084010000CF0000008601000002000090
+:100390000088010000010000008A01000001000047
+:1003A000008C010000CF0000008D010000CF000094
+:1003B000008E0100000100000090010000801F007D
+:1003C000009601000021F8743B97010000018005B0
+:1003D0008999010000001000009A0100001F000030
+:1003E000009B010000FA107C029C010000C000008C
+:1003F000409D010000802089B7A001000021F87411
+:100400003BA101000001800589A30100000010004C
+:1004100000A40100001F000000A5010000FA107CEC
+:1004200002A6010000C0000040A701000080208952
+:10043000B7AA01000021F8743BAB01000001800560
+:1004400089AD01000000100000AE0100001F000097
+:1004500000AF010000FA107C02B0010000C00000F3
+:1004600040B1010000802089B7B401000021F87478
+:100470003BB501000001800589B7010000001000B4
+:1004800000B80100001F000000B9010000FA107C54
+:1004900002BA010000C0000040BB010000802089BA
+:1004A000B7BE01000040003900C00100002200007A
+:1004B00000C301000040003900C401000022000018
+:1004C00000CA01000000008001CB010000000016FE
+:1004D00000CC01000000008001D0010000FFFF03FC
+:1004E00000D101000000008810DA010000010401C1
+:1004F00000DC01000078000000DE010000BF000009
+:1005000000E001000010120000E101000080000086
+:1005100008EA01000000008001EB01000000001665
+:1005200000EC01000000008001F0010000FFFF036B
+:1005300000F101000000008810FA01000001040130
+:1005400000FC01000078000000FE010000BF000078
+:1005500000000200001012000001020000800000F4
+:10056000080B020000707002000E020000FFFFFF87
+:100570000314020000070412001502000007150909
+:100580000516020000020201051702000001020325
+:10059000001E020000400000001F0200000A0B0CB9
+:1005A0000D200200001012140021020000F00100D2
+:1005B00000220200000100000023020000030000EE
+:1005C0000026020000009E03002702000000010038
+:1005D00000280200000038000029020000404040CE
+:1005E000002A0200000AFF00002C02000005F0773C
+:1005F000002D020000FF7F3F00310200000000805C
+:1006000001320200000000160033020000000080EA
+:100610000137020000FFFF030038020000000088DD
+:1006200010410200000104010043020000780000B4
+:100630000045020000BF0000004702000010120049
+:100640000048020000800000085102000000008005
+:10065000015202000000001600530200000000805A
+:100660000157020000FFFF0300580200000000884D
+:100670001061020000010401006302000078000024
+:100680000065020000BF00000067020000101200B9
+:100690000068020000800000087202000070700212
+:1006A0000075020000FFFFFF037B02000007041239
+:1006B000007C020000071509057D0200000202010E
+:1006C000057E0200000102030085020000400000D8
+:1006D00000860200000A0B0C0D87020000101214A5
+:1006E0000088020000F00100008902000001000003
+:1006F000008A020000030000008D020000009E033B
+:10070000008E020000000100008F0200000038008F
+:10071000009002000040404000910200000AFF00EB
+:10072000009302000005F0770094020000FF7F3F75
+:1007300000980200000000800199020000000016ED
+:10074000009A020000000080019E020000FFFF03EB
+:10075000009F02000000008810A8020000010401B0
+:1007600000AA02000078000000AC020000BF0000F8
+:1007700000AE02000010120000AF02000080000076
+:1007800008B802000000008001B902000000001655
+:1007900000BA02000000008001BE020000FFFF035B
+:1007A00000BF02000000008810C802000001040120
+:1007B00000CA02000078000000CC020000BF000068
+:1007C00000CE02000010120000CF020000800000E6
+:1007D00008D902000070700200DC020000FFFFFF79
+:1007E00003E202000007041200E3020000071509FB
+:1007F00005E402000002020105E502000001020317
+:1008000000EC02000040000000ED0200000A0B0CAA
+:100810000DEE02000010121400EF020000F00100C3
+:1008200000F002000001000000F1020000030000DF
+:1008300000F4020000009E0300F502000000010029
+:1008400000F602000000380000F7020000404040BF
+:1008500000F80200000AFF0000FA02000005F0772D
+:1008600000FB020000FF7F3F00FF0200000000804D
+:1008700001000300000000160001030000000080DA
+:100880000105030000FFFF030006030000000088CD
+:10089000100F0300000104010011030000780000A4
+:1008A0000013030000BF0000001503000010120039
+:1008B0000016030000800000081F030000000080F5
+:1008C000012003000000001600210300000000804A
+:1008D0000125030000FFFF0300260300000000883D
+:1008E000102F030000010401003103000078000014
+:1008F0000033030000BF00000035030000101200A9
+:100900000036030000800000084003000070700201
+:100910000043030000FFFFFF034903000007041228
+:10092000004A030000071509054B030000020201FD
+:10093000054C0300000102030053030000400000C7
+:1009400000540300000A0B0C0D5503000010121494
+:100950000056030000F001000057030000010000F2
+:100960000058030000030000005B030000009E032A
+:10097000005C030000000100005D0300000038007F
+:10098000005E030000404040005F0300000AFF00DB
+:10099000006103000005F0770062030000FF7F3F65
+:1009A000008C030000040000008D03000004000020
+:1009B00000A10300000F000000C3030000020000BC
+:1009C00000C903000020000000D303000067FE1FE1
+:1009D000003B040000010000003C04000004000093
+:1009E000003D04000004000000410400001A000063
+:1009F0000043040000100000004404000004000054
+:100A00000045040000040000004C040000808060E9
+:100A1000004D040000808060005B040000010000C5
+:100A200000740400000400000075040000040000CD
+:100A3000008C040000040000008D0400000400008D
+:100A40000093040000020000009404000004000071
+:100A50000095040000040000009C040000800000D9
+:100A6000009D04000080000000A4040000040000B9
+:100A700000A504000004000000B104000004000010
+:100A800000B904000004000000C9040000040000D4
+:100A900000D104000008000000DB04000001000099
+:100AA00000E1040000FF070000E304000010000064
+:100AB00000F304000001000000490500000F0000E1
+:100AC000009305000010000000CC050000040000A9
+:100AD00000CD05000004000000D4050000800000E7
+:100AE00000D505000080000000DC050000040000C7
+:100AF00000DD05000004000000E405000000010224
+:100B000003E505000000010203EC050000030000FE
+:100B100000ED05000003000000F4050000040000E3
+:100B200000F5050000040000001B06000000008026
+:100B30003F1C060000040000001D06000004000029
+:100B400000230600000000803F2406000003000090
+:100B50000025060000030000002B060000000080B6
+:100B60003F330600000000803F3B0600000000808D
+:100B70003F430600000000803F44060000040000E0
+:100B80000045060000040000004B06000000008045
+:100B90003F530600000000803F5B0600000000801D
+:100BA0003F630600000000803F6B060000000080ED
+:100BB0003F730600000000803F7B060000000080BD
+:100BC0003F830600000000803F8B0600000000808D
+:100BD0003F930600000000803F6307000010000004
+:100BE00000730700003F000000AB07000001000099
+:100BF00000BB07000001000000CB0700000100005F
+:100C0000003308000011000000730800000F00000E
+:100C100000B308000011000000EB08000001000014
+:100C200000F308000001000000FB080000010000C4
+:100C30000003090000020000000B09000001000091
+:100C40000013090000020000001B09000001000061
+:100C5000002B09000067FE1F003B0900008168AC03
+:100C60000FEB09000001000000F309000002000082
+:100C700000FB09000001000000030A000001000061
+:100C8000000B0A000002000000130A00000100002F
+:100C9000001B0A0000010000003B0A0000110000D8
+:100CA00000430A000001000000630D000002000084
+:100CB00000730D000067FE1F00DB0D000001000047
+:100CC00000E30D000010000000FB0D00000100001B
+:100CD00000330E0000020000007B0E000001000047
+:100CE00000810E00000F000000830E0000100000C5
+:100CF00000910E000001000000930E0000010000B2
+:100D000000330F000010000000BB0F000000008047
+:100D10003FC30F00000000803FCB0F0000000080A9
+:100D20003FD30F00000000803FDB0F000000008079
+:100D30003FE30F00000000803FEB0F000000008049
+:100D40003FF30F00000000803FFB0F000000008019
+:100D50003F031000000000803F0B100000000080E7
+:100D60003F131000000000803F1B100000000080B7
+:100D70003F231000000000803F2B10000000008087
+:100D80003F331000000000803F03110000100000FE
+:100D900000131100003F0000004B11000001000093
+:100DA000005B11000001000000691100000F00004D
+:100DB000006B11000001000000D3110000110000C1
+:100DC00000131200000F0000005312000011000079
+:100DD000008B1200000100000093120000010000CF
+:100DE000009B12000001000000A31200000200009E
+:100DF00000AB12000001000000B31200000200006E
+:100E000000BB12000001000000CB12000067FE1FB3
+:100E100000DB1200008168AC0F8B130000010000A2
+:100E20000093130000020000009B1300000100006B
+:100E300000A313000001000000AB1300000200003B
+:100E400000B313000001000000BB1300000100000C
+:100E500000DB13000011000000E31300000100009C
+:100E60000003170000020000001317000067FE1FB8
+:100E7000007B170000010000008317000010000035
+:100E8000009B17000001000000D3170000020000C3
+:100E9000001B1800000100000023180000100000D3
+:100EA000003318000001000000D3180000100000FB
+:100EB000005B1900000000803F6319000000008003
+:100EC0003F6B1900000000803F7319000000008094
+:100ED0003F7B1900000000803F8319000000008064
+:100EE0003F8B1900000000803F9319000000008034
+:100EF0003F9B1900000000803FA319000000008004
+:100F00003FAB1900000000803FB3190000000080D3
+:100F10003FBB1900000000803FC3190000000080A3
+:100F20003FCB1900000000803FD319000000008073
+:100F30003FA31A000010000000B31A00003F000099
+:100F400000EB1A000001000000FB1A000001000085
+:100F5000000B1B000001000000731B0000110000CB
+:100F600000B31B00000F000000F31B000011000085
+:100F7000002B1C000001000000331C0000010000D9
+:100F8000003B1C000001000000431C0000020000A8
+:100F9000004B1C000001000000531C000002000078
+:100FA000005B1C0000010000006B1C000067FE1FBE
+:100FB000007B1C00008168AC0F2B1D0000010000AD
+:100FC00000331D0000020000003B1D000001000076
+:100FD00000431D0000010000004B1D000002000046
+:100FE00000531D0000010000005B1D000001000017
+:100FF000007B1D000011000000831D0000010000A7
+:1010000000C81F000021000000D01F0000010000E8
+:1010100000D81F000002000000E01F0000000100D7
+:1010200000E81F000000010000F01F0000010000A8
+:101030000008200000010000001020000002000055
+:101040000018200000000100002020000000010026
+:10105000002820000001000000A320000002000082
+:1010600000B320000067FE1F001B210000010000EC
+:101070000023210000100000003B210000010000BF
+:10108000007321000002000000BB210000010000ED
+:1010900000C321000010000000D321000001000067
+:1010A000007322000010000000FB220000000080FE
+:1010B0003F032300000000803F0B2300000000805E
+:1010C0003F132300000000803F1B2300000000802E
+:1010D0003F232300000000803F2B230000000080FE
+:1010E0003F332300000000803F3B230000000080CE
+:1010F0003F432300000000803F4B2300000000809E
+:101100003F532300000000803F5B2300000000806D
+:101110003F632300000000803F6B2300000000803D
+:101120003F732300000000803F43240000100000B4
+:1011300000532400003F0000008B24000001000049
+:10114000009B24000001000000AB2400000100000F
+:10115000001325000011000000532500000F0000BF
+:10116000009325000011000000CB250000010000C5
+:1011700000D325000001000000DB25000001000075
+:1011800000E325000002000000EB25000001000044
+:1011900000F325000002000000FB25000001000014
+:1011A000000B26000067FE1F001B2600008168ACB4
+:1011B0000FCB26000001000000D326000002000033
+:1011C00000DB26000001000000E326000001000013
+:1011D00000EB26000002000000F3260000010000E2
+:1011E00000FB260000010000001B2700001100008A
+:1011F000002327000001000000115300000F000031
+:1012000000B953000001000000C1530000000100BC
+:1012100000C953000000010000D15300001100007C
+:1012200000E153000008000000115400000100001C
+:1012300000215400000100000029540000010000BA
+:1012400000315400000100000039540000CF0000BC
+:101250000041540000020000007954000001000029
+:1012600000895400000100000091540000010000BA
+:10127000009954000001000000C154000004000067
+:1012800000D154000001000000D9540000150000F6
+:1012900000F954000080444404D9560000120C1098
+:1012A000080157000000010000195700000100016B
+:1012B0000029570000010001003157000001000023
+:1012C00000395700000100010041570000010000F3
+:1012D00000495700000400000051570000020000C0
+:1012E0000062570000FFFF3F007A570000FF1F0019
+:1012F00000F25700000000803F2A58000004000060
+:1013000000325800001A0000004A58000001000096
+:1013100000E258000000FFFF001A5900000F000013
+:10132000005A5900008168AC0F625900001100009A
+:1013300000E2590000040000000A5A000002000008
+:1013400000125A0000000000041A5A0000000000B9
+:10135000043A5A000005000000425A000052000002
+:10136000006A5A000001000000F25A0000000080EC
+:101370003FFA5A00000000803F025B00000000803E
+:101380003F0A5B00000000803F125B00000000800D
+:101390003F1A5B00000000803F225B0000000080DD
+:1013A0003F2A5B00000000803F325B0000000080AD
+:1013B0003F3A5B00000000803F425B00000000807D
+:1013C0003F4A5B00000000803F525B00000000804D
+:1013D0003F5A5B00000000803F625B00000000801D
+:1013E0003F6A5B00000000803F725B00001000005D
+:1013F00000AA5C0000120C1008B15C0000DFBFE323
+:1014000004B25C000005000000B95C0000DFBFE32F
+:1014100004CA5C000001000000DA5C0000FFFF006D
+:1014200000E15C00008168AC0FE25C0000FFFF009F
+:1014300000EA5C0000FFFF0000F25C0000FFFF001C
+:1014400000FA5C000003000000415D0000DFBFE324
+:1014500004495D0000DFBFE304FA5D000000FFFF08
+:1014600000025E00001A000000125E00000300008F
+:10147000004A5F0000020100005A5F000004000003
+:1014800000625F0000040000006A5F0000040000CA
+:1014900000725F0000040000007A5F00000400009A
+:1014A00000825F000004000000925F0000FF070060
+:1014B00000A25F000002010000F25F0000040000D3
+:1014C00000FA5F0000040000000260000004000059
+:1014D000000A600000040000009A610000140C087B
+:1014E00000B261000004080000C2610000040000B6
+:1014F00000CA61000004000000D2610000120C105C
+:1015000008E261000004000000EA6100000400003D
+:1015100000FA6100001000000022620000040800D0
+:10152000002A62000001000000326200001A000080
+:10153000003A6200007F0000004A620000010000E3
+:101540000052620000140C080062620000120C10CD
+:10155000086A6200000400000072620000040000DB
+:10156000008262000010000000A262000001000082
+:1015700000AA620000120C1008E2620000FF0700DF
+:1015800000EA620000140C0800B2640000010000D0
+:1015900000CA64000010000000926600008800008D
+:1015A000009A66000088000000B266000004000097
+:1015B000006A6700002600000082670000000080CB
+:1015C0003FA26700001A000000AA67000010000098
+:1015D00000F26800005200000002690000260000CE
+:1015E0000012690000040000001A690000040000F5
+:1015F000002A6900001A0000004269000000FFFF95
+:101600000052690000040000005A69000004000054
+:10161000006A690000800000007269000004000098
+:10162000007A690000140C08008A690000FF0700B6
+:1016300000706C000004000000786C0000040000E2
+:10164000006C870000040000006D870000040000AB
+:10165000007487000003000000758700000300008D
+:1016600000048800000F000000058800000F000043
+:101670000064880000040000006588000004000089
+:10168000006C880000FFFF00006D880000FFFF0075
+:101690000074880000FFFF000075880000FFFF0055
+:1016A000007C880000FFFF00007D880000FFFF0035
+:1016B0000084880000FFFF000085880000FFFF0015
+:1016C00000CC88000001000000CD8800000100006F
+:1016D00000EC88000001000000ED8800000100001F
+:1016E000001C890000010000001D890000010000AD
+:1016F00000848900000100000085890000010000CD
+:10170000008C890000010000008D890000010000AC
+:10171000009489000002000000958900000200008A
+:10172000009C890000010000009D8900000100006C
+:1017300000A489000001000000A58900000100004C
+:1017400000AC89000002000000AD8900000200002A
+:1017500000B489000001000000B58900000100000C
+:1017600000C489000011000000C5890000110000BC
+:1017700000048A00008168AC0F058A00008168AC13
+:101780000F1C8A0000040000001D8A0000040000F5
+:10179000003C8A0000110000003D8A00001100009A
+:1017A00000448A000001000000458A00000100009A
+:1017B00000548A0000CF000000558A0000CF0000CE
+:1017C000005C8A0000CF0000005D8A0000CF0000AE
+:1017D00000648A0000CF000000658A0000CF00008E
+:1017E00000BC8A000001000000BD8A00000100006A
+:1017F00000C48A000001000000C58A00000100004A
+:1018000000CC8A000002000000CD8A000002000027
+:1018100000D48A000001000000D58A000001000009
+:1018200000DC8A000001000000DD8A0000010000E9
+:1018300000E48A000002000000E58A0000020000C7
+:1018400000EC8A000001000000ED8A0000010000A9
+:1018500000FC8A000001000000FD8A000001000079
+:1018600000048B000001000000058B000001000057
+:10187000000C8B0000010000000D8B000001000037
+:1018800000148B000001000000158B000001000017
+:10189000001C8B0000010000001D8B0000010000F7
+:1018A00000248B000001000000258B0000010000D7
+:1018B000002C8B0000010000002D8B0000010000B7
+:1018C00000348B000001000000358B000001000097
+:1018D000003C8B0000110000003D8B000011000057
+:1018E000007C8B00008168AC0F7D8B00008168ACB0
+:1018F0000F848B00000F000000858B00000F00009C
+:1019000000C48B000067FE1F00C58B000067FE1F30
+:1019100000DC8B000011000000DD8B0000110000D6
+:1019200000E48B000001000000E58B0000010000D6
+:1019300000048C000004000000058C00000400007E
+:1019400000348C000001000000358C000001000014
+:10195000005C8C0000110000005D8C000011000094
+:10196000009C8C00008168AC0F9D8C00008168ACED
+:101970000FBC8C000011000000BD8C0000110000A5
+:1019800000C48C000001000000C58C0000010000B4
+:1019900000D48C000001000000D58C000001000084
+:1019A00000E48C000001000000E58C000001000054
+:1019B00000F48C0000FF070000F58C0000FF07001A
+:1019C00000048D000001000000058D0000010000F2
+:1019D00000148D000001000000158D0000010000C2
+:1019E000006C8E0000080000006D8E0000080000F2
+:1019F00000748E000008000000758E0000080000D2
+:101A0000007C8E0000080000007D8E0000080000B1
+:101A100000848E000008000000858E000008000091
+:101A2000008C8E0000080000008D8E000008000071
+:101A300000948E000008000000958E000008000051
+:101A4000009C8E0000080000009D8E000008000031
+:101A500000A48E000008000000A58E000008000011
+:101A600000AC8E000011000000AD8E0000110000DF
+:101A700000EC8E00008168AC0FED8E00008168AC38
+:101A80000FF48E000000040000F58E00000004003A
+:101A900000FC8E000000040000FD8E000000040029
+:101AA00000048F000000040000058F000000040007
+:101AB000000C8F0000000400000D8F0000000400E7
+:101AC00000148F000000040000158F0000000400C7
+:101AD000001C8F0000000400001D8F0000000400A7
+:101AE00000248F000000040000258F000000040087
+:101AF000002C8F0000000400002D8F000000040067
+:101B000000348F000000030000358F000000030048
+:101B1000003C8F0000000300003D8F000000030028
+:101B200000448F000000030000458F000000030008
+:101B3000004C8F0000000300004D8F0000000300E8
+:101B400000548F000000030000558F0000000300C8
+:101B5000005C8F0000000300005D8F0000000300A8
+:101B600000648F000000030000658F000000030088
+:101B7000006C8F0000000300006D8F000000030068
+:101B800000748F000001000000758F00000100004C
+:101B9000007C8F00000F0000007D8F00000F000010
+:101BA00000BC8F000020000000BD8F00002000005E
+:101BB00000C48F000011000000C58F00001100005C
+:101BC00000CC8F000000010000CD8F00000001005C
+:101BD00000DC8F000001000000DD8F00000100002C
+:101BE00000F48F000040000000F58F00004000006E
+:101BF00000FC8F000000010000FD8F0000000100CC
+:101C0000000C900000030000000D90000003000095
+:101C1000003490000067FE1F003590000067FE1F33
+:101C200000549000000200000055900000020000E7
+:101C3000005C9000008168AC0F5D9000008168AC92
+:101C40000FAC90000001000000AD9000000100000A
+:101C500000D490000004000000D5900000040000B3
+:101C600000E490000001000000E590000001000089
+:101C700000EC90000000040000ED90000000040063
+:101C800000F490000000030000F590000000030045
+:101C900000FC90000001100000FD90000001100009
+:101CA000001C910000110000001D910000110000B7
+:101CB000005C9100008168AC0F5D9100008168AC10
+:101CC0000F649100000F000000659100000F0000FC
+:101CD000002492000067FE1F002592000067FE1F8F
+:101CE0000044920000110000004592000011000025
+:101CF000005C920000040000005D920000040000FF
+:101D0000006C920000010000006D920000010000D4
+:101D100000749200000100000075920000010000B4
+:101D20000094920000010000009592000001000064
+:101D300000BC92000001000000BD92000001000004
+:101D400000CC92000001000000CD920000010000D4
+:101D500000EC9200008824712AED92000088247122
+:101D60002AFC92000000C08540FD92000000C08562
+:101D70004004930000400000000593000040000074
+:101D8000000C930000000100000D93000000010012
+:101D900000149300000001010015930000000101F0
+:101DA000001C930000000080021D930000000080D2
+:101DB00002B4930000DFBFE304B5930000DFBFE38C
+:101DC00004BC930000DFBFE304BD930000DFBFE36A
+:101DD00004C493000001000000C59300000100004E
+:101DE00000D493000000FFFF00D593000000FFFF28
+:101DF00000DC93000001000000DD93000001000002
+:101E000000F493000000FFFF00F593000000FFFFC7
+:101E1000003C940000010000003D9400000100001F
+:101E2000004C940000010000004D940000010000EF
+:101E30000054940000001020305594000000102041
+:101E4000305C940000405060705D94000040506031
+:101E500070649400008898A8B8659400008898A8D9
+:101E6000B86C940000C8D8E8F86D940000C8D8E8B1
+:101E7000F87C9400001A0000007D9400001A000015
+:101E8000008C940000040000008D94000004000009
+:101E9000003C950000040000003D95000004000097
+:101EA0000044950000040000004595000004000077
+:101EB000004C950000808060004D9500008080609F
+:101EC00000749500000400000075950000040000F7
+:101ED000008C950000040000008D950000040000B7
+:101EE0000094950000040000009595000004000097
+:101EF000009C950000800000009D9500008000007F
+:101F000000A495000004000000A595000004000056
+:101F100000CC96000004000000CD960000040000F4
+:101F200000D496000080000000D5960000800000DC
+:101F300000DC96000004000000DD960000040000B4
+:101F400000E496000000010203E596000000010293
+:101F500003EC96000003000000ED96000003000073
+:101F600000F496000004000000F596000004000054
+:101F7000001C970000040000001D970000040000F2
+:101F800000249700000300000025970000030000D4
+:101F90000044970000040000004597000004000082
+:101FA00000A2B3000004000000AAB3000004000077
+:101FB00000BAB3000080000000C2B30000040000BB
+:101FC00000CAB3000001000000DAB30000270000DF
+:101FD00000EAB30000260000000AB4000000000080
+:101FE0000412B40000000000041AB4000000000055
+:101FF0000422B40000000000042AB4000000000025
+:102000000432B40000000000043AB40000000000F4
+:102010000442B40000000000044AB40000000000C4
+:102020000452B40000000000045AB4000000000094
+:102030000462B40000000000046AB4000000000064
+:102040000472B40000000000047AB4000000000034
+:102050000482B4000000000004AAB50000DFBFE362
+:1020600004B2B50000DFBFE304CAB5000021FE01E1
+:10207000006C180100040000006D1801000400004D
+:10208000007418010003000000751801000300002F
+:1020900000041901000F000000051901000F0000E5
+:1020A000006419010004000000651901000400002B
+:1020B000006C190100FFFF00006D190100FFFF0017
+:1020C0000074190100FFFF000075190100FFFF00F7
+:1020D000007C190100FFFF00007D190100FFFF00D7
+:1020E0000084190100FFFF000085190100FFFF00B7
+:1020F00000CC19010001000000CD19010001000011
+:1021000000EC19010001000000ED190100010000C0
+:10211000001C1A0100010000001D1A01000100004E
+:1021200000841A010001000000851A01000100006E
+:10213000008C1A0100010000008D1A01000100004E
+:1021400000941A010002000000951A01000200002C
+:10215000009C1A0100010000009D1A01000100000E
+:1021600000A41A010001000000A51A0100010000EE
+:1021700000AC1A010002000000AD1A0100020000CC
+:1021800000B41A010001000000B51A0100010000AE
+:1021900000C41A010011000000C51A01001100005E
+:1021A00000041B01008168AC0F051B01008168ACB5
+:1021B0000F1C1B0100040000001D1B010004000097
+:1021C000003C1B0100110000003D1B01001100003C
+:1021D00000441B010001000000451B01000100003C
+:1021E00000541B0100CF000000551B0100CF000070
+:1021F000005C1B0100CF0000005D1B0100CF000050
+:1022000000641B0100CF000000651B0100CF00002F
+:1022100000BC1B010001000000BD1B01000100000B
+:1022200000C41B010001000000C51B0100010000EB
+:1022300000CC1B010002000000CD1B0100020000C9
+:1022400000D41B010001000000D51B0100010000AB
+:1022500000DC1B010001000000DD1B01000100008B
+:1022600000E41B010002000000E51B010002000069
+:1022700000EC1B010001000000ED1B01000100004B
+:1022800000FC1B010001000000FD1B01000100001B
+:1022900000041C010001000000051C0100010000F9
+:1022A000000C1C0100010000000D1C0100010000D9
+:1022B00000141C010001000000151C0100010000B9
+:1022C000001C1C0100010000001D1C010001000099
+:1022D00000241C010001000000251C010001000079
+:1022E000002C1C0100010000002D1C010001000059
+:1022F00000341C010001000000351C010001000039
+:10230000003C1C0100110000003D1C0100110000F8
+:10231000007C1C01008168AC0F7D1C01008168AC51
+:102320000F841C01000F000000851C01000F00003D
+:1023300000C41C010067FE1F00C51C010067FE1FD2
+:1023400000DC1C010011000000DD1C010011000078
+:1023500000E41C010001000000E51C010001000078
+:1023600000041D010004000000051D010004000020
+:1023700000341D010001000000351D0100010000B6
+:10238000005C1D0100110000005D1D010011000036
+:10239000009C1D01008168AC0F9D1D01008168AC8F
+:1023A0000FBC1D010011000000BD1D010011000047
+:1023B00000C41D010001000000C51D010001000056
+:1023C00000D41D010001000000D51D010001000026
+:1023D00000E41D010001000000E51D0100010000F6
+:1023E00000F41D0100FF070000F51D0100FF0700BC
+:1023F00000041E010001000000051E010001000094
+:1024000000141E010001000000151E010001000063
+:10241000006C1F0100080000006D1F010008000093
+:1024200000741F010008000000751F010008000073
+:10243000007C1F0100080000007D1F010008000053
+:1024400000841F010008000000851F010008000033
+:10245000008C1F0100080000008D1F010008000013
+:1024600000941F010008000000951F0100080000F3
+:10247000009C1F0100080000009D1F0100080000D3
+:1024800000A41F010008000000A51F0100080000B3
+:1024900000AC1F010011000000AD1F010011000081
+:1024A00000EC1F01008168AC0FED1F01008168ACDA
+:1024B0000FF41F010000040000F51F0100000400DC
+:1024C00000FC1F010000040000FD1F0100000400CB
+:1024D00000042001000004000005200100000400A9
+:1024E000000C200100000400000D20010000040089
+:1024F0000014200100000400001520010000040069
+:10250000001C200100000400001D20010000040048
+:102510000024200100000400002520010000040028
+:10252000002C200100000400002D20010000040008
+:1025300000342001000003000035200100000300EA
+:10254000003C200100000300003D200100000300CA
+:1025500000442001000003000045200100000300AA
+:10256000004C200100000300004D2001000003008A
+:10257000005420010000030000552001000003006A
+:10258000005C200100000300005D2001000003004A
+:10259000006420010000030000652001000003002A
+:1025A000006C200100000300006D2001000003000A
+:1025B00000742001000100000075200100010000EE
+:1025C000007C2001000F0000007D2001000F0000B2
+:1025D00000BC20010020000000BD20010020000000
+:1025E00000C420010011000000C5200100110000FE
+:1025F00000CC20010000010000CD200100000100FE
+:1026000000DC20010001000000DD200100010000CD
+:1026100000F420010040000000F52001004000000F
+:1026200000FC20010000010000FD2001000001006D
+:10263000000C210100030000000D21010003000037
+:10264000003421010067FE1F003521010067FE1FD5
+:102650000054210100020000005521010002000089
+:10266000005C2101008168AC0F5D2101008168AC34
+:102670000FAC21010001000000AD210100010000AC
+:1026800000D421010004000000D521010004000055
+:1026900000E421010001000000E52101000100002B
+:1026A00000EC21010000040000ED21010000040005
+:1026B00000F421010000030000F5210100000300E7
+:1026C00000FC21010001100000FD210100011000AB
+:1026D000001C220100110000001D22010011000059
+:1026E000005C2201008168AC0F5D2201008168ACB2
+:1026F0000F642201000F000000652201000F00009E
+:10270000002423010067FE1F002523010067FE1F30
+:1027100000442301001100000045230100110000C6
+:10272000005C230100040000005D230100040000A0
+:10273000006C230100010000006D23010001000076
+:102740000074230100010000007523010001000056
+:102750000094230100010000009523010001000006
+:1027600000BC23010001000000BD230100010000A6
+:1027700000CC23010001000000CD23010001000076
+:1027800000EC2301008824712AED230100882471C4
+:102790002AFC23010000C08540FD23010000C08504
+:1027A0004004240100400000000524010040000016
+:1027B000000C240100000100000D240100000100B4
+:1027C0000014240100000101001524010000010192
+:1027D000001C240100000080021D24010000008074
+:1027E00002B4240100DFBFE304B5240100DFBFE32E
+:1027F00004BC240100DFBFE304BD240100DFBFE30C
+:1028000004C424010001000000C5240100010000EF
+:1028100000D424010000FFFF00D524010000FFFFC9
+:1028200000DC24010001000000DD240100010000A3
+:1028300000F424010000FFFF00F524010000FFFF69
+:10284000003C250100010000003D250100010000C1
+:10285000004C250100010000004D25010001000091
+:1028600000542501000010203055250100001020E3
+:10287000305C250100405060705D250100405060D3
+:1028800070642501008898A8B8652501008898A87B
+:10289000B86C250100C8D8E8F86D250100C8D8E853
+:1028A000F87C2501001A0000007D2501001A0000B7
+:1028B00000D84E010004000000E04E0100040000BA
+:1028C00000E84E0100120C1008F04E010003000059
+:1028D00000004F0100120C1008104F0100140C08EA
+:1028E00000184F010001000000204F0100140C08E7
+:1028F00000384F0100120C1008404F010027000063
+:1029000000584F010001000000686D010001000047
+:1029100000206E0100120C1008886E0100000000FB
+:1029200004906E010000000004A06E010080000011
+:1029300000C06E010080000000D06E01003F00006A
+:1029400000286F010002000000306F01000000004D
+:1029500004386F010000000004806F0100040000D3
+:1029600000A06F01000400000030700100010000B1
+:1029700000387001000110000040700100FFFF00EE
+:102980000048700100FFFF000050700100FFFF00D1
+:102990000058700100FFFF0000607101000000801E
+:1029A0003F687101000000803F70710100000080ED
+:1029B0003F787101000000803F80710100000080BD
+:1029C0003F887101000000803F907101000000808D
+:1029D0003F987101000000803FA07101000000805D
+:1029E0003FA87101000000803FB07101000000802D
+:1029F0003FB87101000000803FC0710100000080FD
+:102A00003FC87101000000803FD0710100000080CC
+:102A10003FD87101000000803FE07101001000000C
+:102A200000F87101000300000040720100120C1058
+:102A30000849720100800000004A72010080000015
+:102A4000004B720100800000005072010080000005
+:102A50000051720100047000805272010004700085
+:102A600080537201000470008058720100047000ED
+:102A70008059720100000400045A72010000040031
+:102A8000045B720100000400046072010000040095
+:102A90000461720100001000006272010000100069
+:102AA0000063720100001000006872010000100055
+:102AB0000079720100010000007A7201000100003B
+:102AC000007B720100010000008072010001000023
+:102AD00000917201000100000092720100010000EB
+:102AE00000937201000100000098720100010000D3
+:102AF00000A172010004000000A2720100040000A5
+:102B000000A372010004000000A87201000400008C
+:102B100000A972010002000000AA72010002000078
+:102B200000AB72010002000000B072010002000060
+:102B30000009730100800000000A7301008000009A
+:102B4000000B730100800000001073010080000082
+:102B50000011730100047000801273010004700002
+:102B6000801373010004700080187301000470006A
+:102B70008019730100000400041A730100000400AE
+:102B8000041B730100000400042073010000040012
+:102B900004217301000010000022730100001000E6
+:102BA00000237301000010000028730100001000D2
+:102BB0000039730100010000003A730100010000B8
+:102BC000003B7301000100000040730100010000A0
+:102BD0000051730100010000005273010001000068
+:102BE0000053730100010000005873010001000050
+:102BF0000061730100040000006273010004000022
+:102C00000063730100040000006873010004000009
+:102C10000069730100020000006A730100020000F5
+:102C2000006B7301000200000070730100020000DD
+:102C300000C1730100120C1008C2730100120C10C5
+:102C400008C3730100120C1008C8730100120C10A5
+:102C500008F9730100FFFF0000FA730100FFFF0095
+:102C600000FB730100FFFF000000740100FFFF0084
+:102C70000001740100FFFF000002740100FFFF006B
+:102C80000003740100FFFF000008740100FFFF0053
+:102C90000009740100FFFF00000A740100FFFF003B
+:102CA000000B740100FFFF000010740100FFFF0023
+:102CB0000011740100FFFF000012740100FFFF000B
+:102CC0000013740100FFFF000018740100FFFF00F3
+:102CD0000019740100010000001A740100010000D5
+:102CE000001B7401000100000020740100010000BD
+:102CF00000217401000100010022740100010001A3
+:102D0000002374010001000100287401000100018A
+:102D10000029740100010001002A74010001000172
+:102D2000002B74010001000100307401000100015A
+:102D30000031740100010000003274010001000044
+:102D4000003374010001000000387401000100002C
+:102D5000004174010021FE01004274010021FE01C6
+:102D6000004374010021FE01004874010021FE01AE
+:102D70000071740100120C100872740100120C1022
+:102D80000873740100120C100878740100120C1002
+:102D90000879740100040000007A74010004000046
+:102DA000007B740100040000008074010004000036
+:102DB0000089740100020000008A74010002000012
+:102DC000008B7401000200000090740100020000FA
+:102DD00000917401001100000092740100110000C4
+:102DE00000937401001100000098740100110000AC
+:102DF00000D97401008168AC0FDA7401008168ACFD
+:102E00000FDB7401008168AC0FE07401008168ACD5
+:102E10000F017501000400000002750100040000AC
+:102E200000037501000400000008750100040000A3
+:102E300000517501000200000052750100020000FF
+:102E400000537501000200000058750100020000E7
+:102E50000059750100010000005A750100010000D1
+:102E6000005B7501000100000060750100010000B9
+:102E700000617501000100000062750100010000A1
+:102E80000063750100010000006875010001000089
+:102E90000069750100020000006A7501000200006F
+:102EA000006B750100020000007075010002000057
+:102EB0000071750100010000007275010001000041
+:102EC0000073750100010000007875010001000029
+:102ED0000079750100010000007A75010001000011
+:102EE000007B7501000100000080750100010000F9
+:102EF00000817501000100000082750100010000E1
+:102F000000837501000100000088750100010000C8
+:102F1000009175010004000000927501000400009A
+:102F20000093750100040000009875010004000082
+:102F300000B192010011000000B2920100110000E6
+:102F400000B392010011000000B8920100110000CE
+:102F500000C192010001000000C2920100010000C6
+:102F600000C392010001000000C8920100010000AE
+:012F70000060
+:00000001FF
diff --git a/firmware/nouveau/nv96.ctxprog.ihex b/firmware/nouveau/nv96.ctxprog.ihex
new file mode 100644
index 0000000..af11ea0
--- /dev/null
+++ b/firmware/nouveau/nv96.ctxprog.ihex
@@ -0,0 +1,79 @@
+:100000004E5643500035018E0070009C0070002059
+:10001000002000080060004C005000890E400000E5
+:100020000020000700600000003000FF00C000005A
+:10003000002000FF008000090070004D32410044A4
+:10004000294000052940000D294000060E41000509
+:10005000006000C5154000110060000B274000C57E
+:100060002140000000700081007000040060004A20
+:1000700000500040942100070060000127C0002EBE
+:1000800000200001008000CB005000FFFF9000FF27
+:10009000FF910020002000080060004C0050000983
+:1000A000006000450E41004D2941009D007000CFC9
+:1000B0002D40009F0070009F005000C02A4000802B
+:1000C000002000080060004F2A4000C02A4000CCF9
+:1000D0003040008100700000002000060060000039
+:1000E000007000FC1B110083007000000030004015
+:1000F00094210007006000010AC0001E00200001DA
+:10010000008000CB005000FF00C000800070008322
+:1001100000700047002000060060000A0211008005
+:100120000320000700600000003000FF00C000FF57
+:1001300000C80007194100D22D2000FF0080008C6C
+:10014000504000CB0050003F02A0004000200006BD
+:100150000060000F007000020217000A0211003256
+:100160000020000D02100042021C000203120002D7
+:1001700004140000051800090513005005150005BA
+:100180000611000F002000070610000007110000F4
+:1001900009110002091200000A1100020B160028C2
+:1001A0000B12002B0B1400010C11000014110005A0
+:1001B00014110007141100091411000B141100CCC4
+:1001C000002000001510000F7940004B79400040DE
+:1001D000722100070060003F042000FF0088008FAC
+:1001E0000070008C794000CB00500000000000053A
+:1001F0001A14000C1A1300001C1300041C12002017
+:100200001C1400251C1100401C1300441C1200602B
+:100210001C1400651C1100801C1300841C1200A01B
+:100220001C1400A51C1100C01C1300C41C1200E00B
+:100230001C1400E51C1100001F1300401F1900E0F2
+:10024000A14000CA01200006006000440020008098
+:10025000201000C6201100C9201500D02019000070
+:100260002112000321120000221600072212008032
+:100270002211000023110002231100802312008BA1
+:10028000231100942311009C231100E1BE40003192
+:100290000220000600600044002000802410000FAF
+:1002A000AF40004BAF400040722100070060003FAC
+:1002B000042000FF0088008F0070008CAF4000CB4E
+:1002C00000500000000000C6241100C9241500D011
+:1002D000241900002512000325120000261600072D
+:1002E000261200802611000027110002271100802D
+:1002F0002712008B271100942711009C271100E280
+:10030000D1400098022000060060004400200080D8
+:10031000281000C6281100C9281500D0281900008F
+:1003200029120003291200002A1600072A12008051
+:100330002A1100002B1100022B1100802B12008BC0
+:100340002B1100942B11009C2B1100E3EE4000FFB9
+:100350000220000600600044002000802C10000FE6
+:10036000DF40004BDF400040722100070060003F8B
+:10037000042000FF0088008F0070008CDF4000CB5D
+:1003800000500000000000C62C1100C92C1500D040
+:100390002C1900002D1200032D1200002E1600074C
+:1003A0002E1200802E1100002F1100022F1100804C
+:1003B0002F12008B2F1100942F11009C2F11000081
+:1003C0000000000FF54000CB0050004072210007F4
+:1003D0000060003F042000FF008800CB0050008731
+:1003E000F840000A0060000000000000074100A083
+:1003F000007000800070008003200007006000048F
+:10040000002000FF00C000FF008000CB0050000073
+:100410000070000000200006006000FE1B11004D6F
+:10042000294100000070000000200006006000FE6E
+:100430001B1100800070001D0070004D11400081F4
+:10044000007000040060004A005000881341000B57
+:100450000060000000200006006000000070000B3B
+:10046000294100FD1B11004D424000D22D2000FD0E
+:10047000008000CB0050000200C000800320000775
+:100480000060006001200002008000CB00500002EC
+:1004900018C000722C200002008000CB0050004DDC
+:1004A0004E40000B0060004D27410001007000032A
+:1004B000007000062D4100052E41000D0060000572
+:1004C0000070000D007000060070000B0070000E40
+:0B04D0000070001C0070000C006000B9
+:00000001FF
diff --git a/firmware/nouveau/nv96.ctxvals.ihex b/firmware/nouveau/nv96.ctxvals.ihex
new file mode 100644
index 0000000..6b78611
--- /dev/null
+++ b/firmware/nouveau/nv96.ctxvals.ihex
@@ -0,0 +1,761 @@
+:100000004E56435600ED050000430000003000004E
+:10001000004C00000002000000750000000300001A
+:10002000007600000000100000860000000CFE00BA
+:10003000008B000000001000009600000087010007
+:10004000009B000000181000009C000000FF000052
+:1000500000AB00000004000000AC000000DF002541
+:1000600004AE00000000060000B400000000000024
+:1000700001B5000000FF000000B700000000040010
+:1000800000BD00000001000000BE00000080000074
+:1000900000BF00000004000000C6000000020000D5
+:1000A00000C700000001000000CB000000010000BC
+:1000B00000CC00000000010000D20000000200009F
+:1000C00000D300000001000000D400000001000087
+:1000D00000D800000001000000D9000000FFFF3F31
+:1000E00000DA000000FF1F0000DC0000000100003B
+:1000F00000DD00000001000000DF00000001000042
+:1001000000E000000001000000E10000000100002C
+:1001100000E200000004000000E300000001000015
+:1001200000E400000001000000E500000001000004
+:1001300000E600000007000000E7000000010000EA
+:1001400000E800000007000000E9000000010000D6
+:1001500000EA00000001000000EB000000010000C8
+:1001600000F000000001000000F1000000000100AC
+:1001700000F300000001000000F600000000010094
+:1001800000F700000001000000F80000000001007E
+:1001900000FA00000001000000FD00000000010066
+:1001A00000020100000400000003010000700000D4
+:1001B000000401000080000000090100000C0000A4
+:1001C000000B010000080000000C010000140000FA
+:1001D000000E010000290000000F010000270000B0
+:1001E00000100100002600000011010000080000BE
+:1001F00000120100000400000013010000270000AD
+:1002000000160100000100000017010000020000BC
+:1002100000180100000300000019010000040000A4
+:10022000001A010000050000001B0100000600008C
+:10023000001C010000070000001D0100000100007B
+:10024000002E010000CF0000003A010000800000F5
+:10025000003B010000040000003C0100000400001D
+:10026000003D010000030000003E0100000100000D
+:1002700000410100001200000042010000100000D7
+:1002800000430100000C00000044010000010000D8
+:1002900000480100000400000049010000020000C5
+:1002A000004A010000040000004D010000FFFF3F74
+:1002B000004E010000FF1F00005801000004000074
+:1002C0000059010000140000005A01000001000064
+:1002D000005D01000002000000600100000100005C
+:1002E0000062010000020000006301000000100035
+:1002F0000064010000000E00006501000000100015
+:100300000066010000001E000068010000010000FE
+:100310000069010000010000006A01000001000006
+:10032000006B010000010000006C010000010000F2
+:1003300000700100000002000072010000010000D6
+:1003400000730100007000000074010000800000D4
+:10035000007701000001000000780100007000003B
+:100360000079010000800000007D01000001000014
+:10037000007E010000CF00000080010000010000AD
+:100380000084010000CF0000008601000002000090
+:100390000088010000010000008A01000001000047
+:1003A000008C010000CF0000008D010000CF000094
+:1003B000008E0100000100000090010000801F007D
+:1003C000009601000021F8743B97010000018005B0
+:1003D0008999010000001000009A0100001F000030
+:1003E000009B010000FA107C029C010000C000008C
+:1003F000409D010000802089B7A001000021F87411
+:100400003BA101000001800589A30100000010004C
+:1004100000A40100001F000000A5010000FA107CEC
+:1004200002A6010000C0000040A701000080208952
+:10043000B7AA01000021F8743BAB01000001800560
+:1004400089AD01000000100000AE0100001F000097
+:1004500000AF010000FA107C02B0010000C00000F3
+:1004600040B1010000802089B7B401000021F87478
+:100470003BB501000001800589B7010000001000B4
+:1004800000B80100001F000000B9010000FA107C54
+:1004900002BA010000C0000040BB010000802089BA
+:1004A000B7BE01000040003900C00100002200007A
+:1004B00000C301000040003900C401000022000018
+:1004C00000CA01000000008001CB010000000016FE
+:1004D00000CC01000000008001D0010000FFFF03FC
+:1004E00000D101000000008C11DA010000010401BC
+:1004F00000DC01000078000000DE010000BF000009
+:1005000000E001000010120000E101000080000086
+:1005100008EA01000000008001EB01000000001665
+:1005200000EC01000000008001F0010000FFFF036B
+:1005300000F101000000008C11FA0100000104012B
+:1005400000FC01000078000000FE010000BF000078
+:1005500000000200001012000001020000800000F4
+:10056000080B020000707002000E020000FFFFFF87
+:100570000314020000070412001502000007150909
+:100580000516020000020201051702000001020325
+:10059000001E020000400000001F0200000A0B0CB9
+:1005A0000D200200001012140021020000F00100D2
+:1005B00000220200000100000023020000030000EE
+:1005C0000026020000009E03002702000000010038
+:1005D00000280200000038000029020000404040CE
+:1005E000002A0200000AFF00002C02000005F0773C
+:1005F000002D020000FF7F3F00310200000000805C
+:1006000001320200000000160033020000000080EA
+:100610000137020000FFFF03003802000000008CD9
+:1006200011410200000104010043020000780000B3
+:100630000045020000BF0000004702000010120049
+:100640000048020000800000085102000000008005
+:10065000015202000000001600530200000000805A
+:100660000157020000FFFF03005802000000008C49
+:100670001161020000010401006302000078000023
+:100680000065020000BF00000067020000101200B9
+:100690000068020000800000087202000070700212
+:1006A0000075020000FFFFFF037B02000007041239
+:1006B000007C020000071509057D0200000202010E
+:1006C000057E0200000102030085020000400000D8
+:1006D00000860200000A0B0C0D87020000101214A5
+:1006E0000088020000F00100008902000001000003
+:1006F000008A020000030000008D020000009E033B
+:10070000008E020000000100008F0200000038008F
+:10071000009002000040404000910200000AFF00EB
+:10072000009302000005F0770094020000FF7F3F75
+:1007300000980200000000800199020000000016ED
+:10074000009A020000000080019E020000FFFF03EB
+:10075000009F02000000008C11A8020000010401AB
+:1007600000AA02000078000000AC020000BF0000F8
+:1007700000AE02000010120000AF02000080000076
+:1007800008B802000000008001B902000000001655
+:1007900000BA02000000008001BE020000FFFF035B
+:1007A00000BF02000000008C11C80200000104011B
+:1007B00000CA02000078000000CC020000BF000068
+:1007C00000CE02000010120000CF020000800000E6
+:1007D00008D902000070700200DC020000FFFFFF79
+:1007E00003E202000007041200E3020000071509FB
+:1007F00005E402000002020105E502000001020317
+:1008000000EC02000040000000ED0200000A0B0CAA
+:100810000DEE02000010121400EF020000F00100C3
+:1008200000F002000001000000F1020000030000DF
+:1008300000F4020000009E0300F502000000010029
+:1008400000F602000000380000F7020000404040BF
+:1008500000F80200000AFF0000FA02000005F0772D
+:1008600000FB020000FF7F3F00FF0200000000804D
+:1008700001000300000000160001030000000080DA
+:100880000105030000FFFF03000603000000008CC9
+:10089000110F0300000104010011030000780000A3
+:1008A0000013030000BF0000001503000010120039
+:1008B0000016030000800000081F030000000080F5
+:1008C000012003000000001600210300000000804A
+:1008D0000125030000FFFF03002603000000008C39
+:1008E000112F030000010401003103000078000013
+:1008F0000033030000BF00000035030000101200A9
+:100900000036030000800000084003000070700201
+:100910000043030000FFFFFF034903000007041228
+:10092000004A030000071509054B030000020201FD
+:10093000054C0300000102030053030000400000C7
+:1009400000540300000A0B0C0D5503000010121494
+:100950000056030000F001000057030000010000F2
+:100960000058030000030000005B030000009E032A
+:10097000005C030000000100005D0300000038007F
+:10098000005E030000404040005F0300000AFF00DB
+:10099000006103000005F0770062030000FF7F3F65
+:1009A000008C030000040000008D03000004000020
+:1009B00000A10300000F000000C3030000020000BC
+:1009C00000C903000020000000D303000067FE1FE1
+:1009D000003B040000010000003C04000004000093
+:1009E000003D04000004000000410400001A000063
+:1009F0000043040000100000004404000004000054
+:100A00000045040000040000004C040000808060E9
+:100A1000004D040000808060005B040000010000C5
+:100A200000740400000400000075040000040000CD
+:100A3000008C040000040000008D0400000400008D
+:100A40000093040000020000009404000004000071
+:100A50000095040000040000009C040000800000D9
+:100A6000009D04000080000000A4040000040000B9
+:100A700000A504000004000000B104000004000010
+:100A800000B904000004000000C9040000040000D4
+:100A900000D104000008000000DB04000001000099
+:100AA00000E1040000FF070000E304000010000064
+:100AB00000F304000001000000490500000F0000E1
+:100AC000009305000010000000CC050000040000A9
+:100AD00000CD05000004000000D4050000800000E7
+:100AE00000D505000080000000DC050000040000C7
+:100AF00000DD05000004000000E405000000010224
+:100B000003E505000000010203EC050000030000FE
+:100B100000ED05000003000000F4050000040000E3
+:100B200000F5050000040000001B06000000008026
+:100B30003F1C060000040000001D06000004000029
+:100B400000230600000000803F2406000003000090
+:100B50000025060000030000002B060000000080B6
+:100B60003F330600000000803F3B0600000000808D
+:100B70003F430600000000803F44060000040000E0
+:100B80000045060000040000004B06000000008045
+:100B90003F530600000000803F5B0600000000801D
+:100BA0003F630600000000803F6B060000000080ED
+:100BB0003F730600000000803F7B060000000080BD
+:100BC0003F830600000000803F8B0600000000808D
+:100BD0003F930600000000803F6307000010000004
+:100BE00000730700003F000000AB07000001000099
+:100BF00000BB07000001000000CB0700000100005F
+:100C0000003308000011000000730800000F00000E
+:100C100000B308000011000000EB08000001000014
+:100C200000F308000001000000FB080000010000C4
+:100C30000003090000020000000B09000001000091
+:100C40000013090000020000001B09000001000061
+:100C5000002B09000067FE1F003B0900008168AC03
+:100C60000FEB09000001000000F309000002000082
+:100C700000FB09000001000000030A000001000061
+:100C8000000B0A000002000000130A00000100002F
+:100C9000001B0A0000010000003B0A0000110000D8
+:100CA00000430A000001000000630D000002000084
+:100CB00000730D000067FE1F00DB0D000001000047
+:100CC00000E30D000010000000FB0D00000100001B
+:100CD00000330E0000020000007B0E000001000047
+:100CE00000810E00000F000000830E0000100000C5
+:100CF00000910E000001000000930E0000010000B2
+:100D000000330F000010000000BB0F000000008047
+:100D10003FC30F00000000803FCB0F0000000080A9
+:100D20003FD30F00000000803FDB0F000000008079
+:100D30003FE30F00000000803FEB0F000000008049
+:100D40003FF30F00000000803FFB0F000000008019
+:100D50003F031000000000803F0B100000000080E7
+:100D60003F131000000000803F1B100000000080B7
+:100D70003F231000000000803F2B10000000008087
+:100D80003F331000000000803F03110000100000FE
+:100D900000131100003F0000004B11000001000093
+:100DA000005B11000001000000691100000F00004D
+:100DB000006B11000001000000D3110000110000C1
+:100DC00000131200000F0000005312000011000079
+:100DD000008B1200000100000093120000010000CF
+:100DE000009B12000001000000A31200000200009E
+:100DF00000AB12000001000000B31200000200006E
+:100E000000BB12000001000000CB12000067FE1FB3
+:100E100000DB1200008168AC0F8B130000010000A2
+:100E20000093130000020000009B1300000100006B
+:100E300000A313000001000000AB1300000200003B
+:100E400000B313000001000000BB1300000100000C
+:100E500000DB13000011000000E31300000100009C
+:100E60000003170000020000001317000067FE1FB8
+:100E7000007B170000010000008317000010000035
+:100E8000009B17000001000000D3170000020000C3
+:100E9000001B1800000100000023180000100000D3
+:100EA000003318000001000000D3180000100000FB
+:100EB000005B1900000000803F6319000000008003
+:100EC0003F6B1900000000803F7319000000008094
+:100ED0003F7B1900000000803F8319000000008064
+:100EE0003F8B1900000000803F9319000000008034
+:100EF0003F9B1900000000803FA319000000008004
+:100F00003FAB1900000000803FB3190000000080D3
+:100F10003FBB1900000000803FC3190000000080A3
+:100F20003FCB1900000000803FD319000000008073
+:100F30003FA31A000010000000B31A00003F000099
+:100F400000EB1A000001000000FB1A000001000085
+:100F5000000B1B000001000000731B0000110000CB
+:100F600000B31B00000F000000F31B000011000085
+:100F7000002B1C000001000000331C0000010000D9
+:100F8000003B1C000001000000431C0000020000A8
+:100F9000004B1C000001000000531C000002000078
+:100FA000005B1C0000010000006B1C000067FE1FBE
+:100FB000007B1C00008168AC0F2B1D0000010000AD
+:100FC00000331D0000020000003B1D000001000076
+:100FD00000431D0000010000004B1D000002000046
+:100FE00000531D0000010000005B1D000001000017
+:100FF000007B1D000011000000831D0000010000A7
+:1010000000C81F000021000000D01F0000010000E8
+:1010100000D81F000002000000E01F0000000100D7
+:1010200000E81F000000010000F01F0000010000A8
+:101030000008200000010000001020000002000055
+:101040000018200000000100002020000000010026
+:10105000002820000001000000A320000002000082
+:1010600000B320000067FE1F001B210000010000EC
+:101070000023210000100000003B210000010000BF
+:10108000007321000002000000BB210000010000ED
+:1010900000C321000010000000D321000001000067
+:1010A000007322000010000000FB220000000080FE
+:1010B0003F032300000000803F0B2300000000805E
+:1010C0003F132300000000803F1B2300000000802E
+:1010D0003F232300000000803F2B230000000080FE
+:1010E0003F332300000000803F3B230000000080CE
+:1010F0003F432300000000803F4B2300000000809E
+:101100003F532300000000803F5B2300000000806D
+:101110003F632300000000803F6B2300000000803D
+:101120003F732300000000803F43240000100000B4
+:1011300000532400003F0000008B24000001000049
+:10114000009B24000001000000AB2400000100000F
+:10115000001325000011000000532500000F0000BF
+:10116000009325000011000000CB250000010000C5
+:1011700000D325000001000000DB25000001000075
+:1011800000E325000002000000EB25000001000044
+:1011900000F325000002000000FB25000001000014
+:1011A000000B26000067FE1F001B2600008168ACB4
+:1011B0000FCB26000001000000D326000002000033
+:1011C00000DB26000001000000E326000001000013
+:1011D00000EB26000002000000F3260000010000E2
+:1011E00000FB260000010000001B2700001100008A
+:1011F000002327000001000000115300000F000031
+:1012000000B953000001000000C1530000000100BC
+:1012100000C953000000010000D15300001100007C
+:1012200000E153000008000000115400000100001C
+:1012300000215400000100000029540000010000BA
+:1012400000315400000100000039540000CF0000BC
+:101250000041540000020000007954000001000029
+:1012600000895400000100000091540000010000BA
+:10127000009954000001000000C154000004000067
+:1012800000D154000001000000D9540000150000F6
+:1012900000F954000080444404D9560000120C1098
+:1012A000080157000000010000195700000100016B
+:1012B0000029570000010001003157000001000023
+:1012C00000395700000100010041570000010000F3
+:1012D00000495700000400000051570000020000C0
+:1012E0000062570000FFFF3F007A570000FF1F0019
+:1012F00000F25700000000803F2A58000004000060
+:1013000000325800001A0000004A58000001000096
+:1013100000E258000000FFFF001A5900000F000013
+:10132000005A5900008168AC0F625900001100009A
+:1013300000E2590000040000000A5A000002000008
+:1013400000125A0000000000041A5A0000000000B9
+:10135000043A5A000005000000425A000052000002
+:10136000006A5A000001000000F25A0000000080EC
+:101370003FFA5A00000000803F025B00000000803E
+:101380003F0A5B00000000803F125B00000000800D
+:101390003F1A5B00000000803F225B0000000080DD
+:1013A0003F2A5B00000000803F325B0000000080AD
+:1013B0003F3A5B00000000803F425B00000000807D
+:1013C0003F4A5B00000000803F525B00000000804D
+:1013D0003F5A5B00000000803F625B00000000801D
+:1013E0003F6A5B00000000803F725B00001000005D
+:1013F00000AA5C0000120C1008B15C0000DFBFE323
+:1014000004B25C000005000000B95C0000DFBFE32F
+:1014100004CA5C000001000000DA5C0000FFFF006D
+:1014200000E15C00008168AC0FE25C0000FFFF009F
+:1014300000EA5C0000FFFF0000F25C0000FFFF001C
+:1014400000FA5C000003000000415D0000DFBFE324
+:1014500004495D0000DFBFE304FA5D000000FFFF08
+:1014600000025E00001A000000125E00000300008F
+:10147000004A5F0000020100005A5F000004000003
+:1014800000625F0000040000006A5F0000040000CA
+:1014900000725F0000040000007A5F00000400009A
+:1014A00000825F000004000000925F0000FF070060
+:1014B00000A25F000002010000F25F0000040000D3
+:1014C00000FA5F0000040000000260000004000059
+:1014D000000A600000040000009A610000140C087B
+:1014E00000B261000004080000C2610000040000B6
+:1014F00000CA61000004000000D2610000120C105C
+:1015000008E261000004000000EA6100000400003D
+:1015100000FA6100001000000022620000040800D0
+:10152000002A62000001000000326200001A000080
+:10153000003A6200007F0000004A620000010000E3
+:101540000052620000140C080062620000120C10CD
+:10155000086A6200000400000072620000040000DB
+:10156000008262000010000000A262000001000082
+:1015700000AA620000120C1008E2620000FF0700DF
+:1015800000EA620000140C0800B2640000010000D0
+:1015900000CA64000010000000926600008800008D
+:1015A000009A66000088000000B266000004000097
+:1015B000006A6700002600000082670000000080CB
+:1015C0003FA26700001A000000AA67000010000098
+:1015D00000F26800005200000002690000260000CE
+:1015E0000012690000040000001A690000040000F5
+:1015F000002A6900001A0000004269000000FFFF95
+:101600000052690000040000005A69000004000054
+:10161000006A690000800000007269000004000098
+:10162000007A690000140C08008A690000FF0700B6
+:1016300000706C000004000000786C0000040000E2
+:10164000006C870000040000006D870000040000AB
+:10165000007487000003000000758700000300008D
+:1016600000048800000F000000058800000F000043
+:101670000064880000040000006588000004000089
+:10168000006C880000FFFF00006D880000FFFF0075
+:101690000074880000FFFF000075880000FFFF0055
+:1016A000007C880000FFFF00007D880000FFFF0035
+:1016B0000084880000FFFF000085880000FFFF0015
+:1016C00000CC88000001000000CD8800000100006F
+:1016D00000EC88000001000000ED8800000100001F
+:1016E000001C890000010000001D890000010000AD
+:1016F00000848900000100000085890000010000CD
+:10170000008C890000010000008D890000010000AC
+:10171000009489000002000000958900000200008A
+:10172000009C890000010000009D8900000100006C
+:1017300000A489000001000000A58900000100004C
+:1017400000AC89000002000000AD8900000200002A
+:1017500000B489000001000000B58900000100000C
+:1017600000C489000011000000C5890000110000BC
+:1017700000048A00008168AC0F058A00008168AC13
+:101780000F1C8A0000040000001D8A0000040000F5
+:10179000003C8A0000110000003D8A00001100009A
+:1017A00000448A000001000000458A00000100009A
+:1017B00000548A0000CF000000558A0000CF0000CE
+:1017C000005C8A0000CF0000005D8A0000CF0000AE
+:1017D00000648A0000CF000000658A0000CF00008E
+:1017E00000BC8A000001000000BD8A00000100006A
+:1017F00000C48A000001000000C58A00000100004A
+:1018000000CC8A000002000000CD8A000002000027
+:1018100000D48A000001000000D58A000001000009
+:1018200000DC8A000001000000DD8A0000010000E9
+:1018300000E48A000002000000E58A0000020000C7
+:1018400000EC8A000001000000ED8A0000010000A9
+:1018500000FC8A000001000000FD8A000001000079
+:1018600000048B000001000000058B000001000057
+:10187000000C8B0000010000000D8B000001000037
+:1018800000148B000001000000158B000001000017
+:10189000001C8B0000010000001D8B0000010000F7
+:1018A00000248B000001000000258B0000010000D7
+:1018B000002C8B0000010000002D8B0000010000B7
+:1018C00000348B000001000000358B000001000097
+:1018D000003C8B0000110000003D8B000011000057
+:1018E000007C8B00008168AC0F7D8B00008168ACB0
+:1018F0000F848B00000F000000858B00000F00009C
+:1019000000C48B000067FE1F00C58B000067FE1F30
+:1019100000DC8B000011000000DD8B0000110000D6
+:1019200000E48B000001000000E58B0000010000D6
+:1019300000048C000004000000058C00000400007E
+:1019400000348C000001000000358C000001000014
+:10195000005C8C0000110000005D8C000011000094
+:10196000009C8C00008168AC0F9D8C00008168ACED
+:101970000FBC8C000011000000BD8C0000110000A5
+:1019800000C48C000001000000C58C0000010000B4
+:1019900000D48C000001000000D58C000001000084
+:1019A00000E48C000001000000E58C000001000054
+:1019B00000F48C0000FF070000F58C0000FF07001A
+:1019C00000048D000001000000058D0000010000F2
+:1019D00000148D000001000000158D0000010000C2
+:1019E000006C8E0000080000006D8E0000080000F2
+:1019F00000748E000008000000758E0000080000D2
+:101A0000007C8E0000080000007D8E0000080000B1
+:101A100000848E000008000000858E000008000091
+:101A2000008C8E0000080000008D8E000008000071
+:101A300000948E000008000000958E000008000051
+:101A4000009C8E0000080000009D8E000008000031
+:101A500000A48E000008000000A58E000008000011
+:101A600000AC8E000011000000AD8E0000110000DF
+:101A700000EC8E00008168AC0FED8E00008168AC38
+:101A80000FF48E000000040000F58E00000004003A
+:101A900000FC8E000000040000FD8E000000040029
+:101AA00000048F000000040000058F000000040007
+:101AB000000C8F0000000400000D8F0000000400E7
+:101AC00000148F000000040000158F0000000400C7
+:101AD000001C8F0000000400001D8F0000000400A7
+:101AE00000248F000000040000258F000000040087
+:101AF000002C8F0000000400002D8F000000040067
+:101B000000348F000000030000358F000000030048
+:101B1000003C8F0000000300003D8F000000030028
+:101B200000448F000000030000458F000000030008
+:101B3000004C8F0000000300004D8F0000000300E8
+:101B400000548F000000030000558F0000000300C8
+:101B5000005C8F0000000300005D8F0000000300A8
+:101B600000648F000000030000658F000000030088
+:101B7000006C8F0000000300006D8F000000030068
+:101B800000748F000001000000758F00000100004C
+:101B9000007C8F00000F0000007D8F00000F000010
+:101BA00000BC8F000020000000BD8F00002000005E
+:101BB00000C48F000011000000C58F00001100005C
+:101BC00000CC8F000000010000CD8F00000001005C
+:101BD00000DC8F000001000000DD8F00000100002C
+:101BE00000F48F000040000000F58F00004000006E
+:101BF00000FC8F000000010000FD8F0000000100CC
+:101C0000000C900000030000000D90000003000095
+:101C1000003490000067FE1F003590000067FE1F33
+:101C200000549000000200000055900000020000E7
+:101C3000005C9000008168AC0F5D9000008168AC92
+:101C40000FAC90000001000000AD9000000100000A
+:101C500000D490000004000000D5900000040000B3
+:101C600000E490000001000000E590000001000089
+:101C700000EC90000000040000ED90000000040063
+:101C800000F490000000030000F590000000030045
+:101C900000FC90000001100000FD90000001100009
+:101CA000001C910000110000001D910000110000B7
+:101CB000005C9100008168AC0F5D9100008168AC10
+:101CC0000F649100000F000000659100000F0000FC
+:101CD000002492000067FE1F002592000067FE1F8F
+:101CE0000044920000110000004592000011000025
+:101CF000005C920000040000005D920000040000FF
+:101D0000006C920000010000006D920000010000D4
+:101D100000749200000100000075920000010000B4
+:101D20000094920000010000009592000001000064
+:101D300000BC92000001000000BD92000001000004
+:101D400000CC92000001000000CD920000010000D4
+:101D500000EC9200008824712AED92000088247122
+:101D60002AFC92000000C08540FD92000000C08562
+:101D70004004930000400000000593000040000074
+:101D8000000C930000000100000D93000000010012
+:101D900000149300000001010015930000000101F0
+:101DA000001C930000000080021D930000000080D2
+:101DB00002B4930000DFBFE304B5930000DFBFE38C
+:101DC00004BC930000DFBFE304BD930000DFBFE36A
+:101DD00004C493000001000000C59300000100004E
+:101DE00000D493000000FFFF00D593000000FFFF28
+:101DF00000DC93000001000000DD93000001000002
+:101E000000F493000000FFFF00F593000000FFFFC7
+:101E1000003C940000010000003D9400000100001F
+:101E2000004C940000010000004D940000010000EF
+:101E30000054940000001020305594000000102041
+:101E4000305C940000405060705D94000040506031
+:101E500070649400008898A8B8659400008898A8D9
+:101E6000B86C940000C8D8E8F86D940000C8D8E8B1
+:101E7000F87C9400001A0000007D9400001A000015
+:101E8000008C940000040000008D94000004000009
+:101E9000003C950000040000003D95000004000097
+:101EA0000044950000040000004595000004000077
+:101EB000004C950000808060004D9500008080609F
+:101EC00000749500000400000075950000040000F7
+:101ED000008C950000040000008D950000040000B7
+:101EE0000094950000040000009595000004000097
+:101EF000009C950000800000009D9500008000007F
+:101F000000A495000004000000A595000004000056
+:101F100000CC96000004000000CD960000040000F4
+:101F200000D496000080000000D5960000800000DC
+:101F300000DC96000004000000DD960000040000B4
+:101F400000E496000000010203E596000000010293
+:101F500003EC96000003000000ED96000003000073
+:101F600000F496000004000000F596000004000054
+:101F7000001C970000040000001D970000040000F2
+:101F800000249700000300000025970000030000D4
+:101F90000044970000040000004597000004000082
+:101FA00000A2B3000004000000AAB3000004000077
+:101FB00000BAB3000080000000C2B30000040000BB
+:101FC00000CAB3000001000000DAB30000270000DF
+:101FD00000EAB30000260000000AB4000000000080
+:101FE0000412B40000000000041AB4000000000055
+:101FF0000422B40000000000042AB4000000000025
+:102000000432B40000000000043AB40000000000F4
+:102010000442B40000000000044AB40000000000C4
+:102020000452B40000000000045AB4000000000094
+:102030000462B40000000000046AB4000000000064
+:102040000472B40000000000047AB4000000000034
+:102050000482B4000000000004AAB50000DFBFE362
+:1020600004B2B50000DFBFE304CAB5000021FE01E1
+:10207000006C180100040000006D1801000400004D
+:10208000007418010003000000751801000300002F
+:1020900000041901000F000000051901000F0000E5
+:1020A000006419010004000000651901000400002B
+:1020B000006C190100FFFF00006D190100FFFF0017
+:1020C0000074190100FFFF000075190100FFFF00F7
+:1020D000007C190100FFFF00007D190100FFFF00D7
+:1020E0000084190100FFFF000085190100FFFF00B7
+:1020F00000CC19010001000000CD19010001000011
+:1021000000EC19010001000000ED190100010000C0
+:10211000001C1A0100010000001D1A01000100004E
+:1021200000841A010001000000851A01000100006E
+:10213000008C1A0100010000008D1A01000100004E
+:1021400000941A010002000000951A01000200002C
+:10215000009C1A0100010000009D1A01000100000E
+:1021600000A41A010001000000A51A0100010000EE
+:1021700000AC1A010002000000AD1A0100020000CC
+:1021800000B41A010001000000B51A0100010000AE
+:1021900000C41A010011000000C51A01001100005E
+:1021A00000041B01008168AC0F051B01008168ACB5
+:1021B0000F1C1B0100040000001D1B010004000097
+:1021C000003C1B0100110000003D1B01001100003C
+:1021D00000441B010001000000451B01000100003C
+:1021E00000541B0100CF000000551B0100CF000070
+:1021F000005C1B0100CF0000005D1B0100CF000050
+:1022000000641B0100CF000000651B0100CF00002F
+:1022100000BC1B010001000000BD1B01000100000B
+:1022200000C41B010001000000C51B0100010000EB
+:1022300000CC1B010002000000CD1B0100020000C9
+:1022400000D41B010001000000D51B0100010000AB
+:1022500000DC1B010001000000DD1B01000100008B
+:1022600000E41B010002000000E51B010002000069
+:1022700000EC1B010001000000ED1B01000100004B
+:1022800000FC1B010001000000FD1B01000100001B
+:1022900000041C010001000000051C0100010000F9
+:1022A000000C1C0100010000000D1C0100010000D9
+:1022B00000141C010001000000151C0100010000B9
+:1022C000001C1C0100010000001D1C010001000099
+:1022D00000241C010001000000251C010001000079
+:1022E000002C1C0100010000002D1C010001000059
+:1022F00000341C010001000000351C010001000039
+:10230000003C1C0100110000003D1C0100110000F8
+:10231000007C1C01008168AC0F7D1C01008168AC51
+:102320000F841C01000F000000851C01000F00003D
+:1023300000C41C010067FE1F00C51C010067FE1FD2
+:1023400000DC1C010011000000DD1C010011000078
+:1023500000E41C010001000000E51C010001000078
+:1023600000041D010004000000051D010004000020
+:1023700000341D010001000000351D0100010000B6
+:10238000005C1D0100110000005D1D010011000036
+:10239000009C1D01008168AC0F9D1D01008168AC8F
+:1023A0000FBC1D010011000000BD1D010011000047
+:1023B00000C41D010001000000C51D010001000056
+:1023C00000D41D010001000000D51D010001000026
+:1023D00000E41D010001000000E51D0100010000F6
+:1023E00000F41D0100FF070000F51D0100FF0700BC
+:1023F00000041E010001000000051E010001000094
+:1024000000141E010001000000151E010001000063
+:10241000006C1F0100080000006D1F010008000093
+:1024200000741F010008000000751F010008000073
+:10243000007C1F0100080000007D1F010008000053
+:1024400000841F010008000000851F010008000033
+:10245000008C1F0100080000008D1F010008000013
+:1024600000941F010008000000951F0100080000F3
+:10247000009C1F0100080000009D1F0100080000D3
+:1024800000A41F010008000000A51F0100080000B3
+:1024900000AC1F010011000000AD1F010011000081
+:1024A00000EC1F01008168AC0FED1F01008168ACDA
+:1024B0000FF41F010000040000F51F0100000400DC
+:1024C00000FC1F010000040000FD1F0100000400CB
+:1024D00000042001000004000005200100000400A9
+:1024E000000C200100000400000D20010000040089
+:1024F0000014200100000400001520010000040069
+:10250000001C200100000400001D20010000040048
+:102510000024200100000400002520010000040028
+:10252000002C200100000400002D20010000040008
+:1025300000342001000003000035200100000300EA
+:10254000003C200100000300003D200100000300CA
+:1025500000442001000003000045200100000300AA
+:10256000004C200100000300004D2001000003008A
+:10257000005420010000030000552001000003006A
+:10258000005C200100000300005D2001000003004A
+:10259000006420010000030000652001000003002A
+:1025A000006C200100000300006D2001000003000A
+:1025B00000742001000100000075200100010000EE
+:1025C000007C2001000F0000007D2001000F0000B2
+:1025D00000BC20010020000000BD20010020000000
+:1025E00000C420010011000000C5200100110000FE
+:1025F00000CC20010000010000CD200100000100FE
+:1026000000DC20010001000000DD200100010000CD
+:1026100000F420010040000000F52001004000000F
+:1026200000FC20010000010000FD2001000001006D
+:10263000000C210100030000000D21010003000037
+:10264000003421010067FE1F003521010067FE1FD5
+:102650000054210100020000005521010002000089
+:10266000005C2101008168AC0F5D2101008168AC34
+:102670000FAC21010001000000AD210100010000AC
+:1026800000D421010004000000D521010004000055
+:1026900000E421010001000000E52101000100002B
+:1026A00000EC21010000040000ED21010000040005
+:1026B00000F421010000030000F5210100000300E7
+:1026C00000FC21010001100000FD210100011000AB
+:1026D000001C220100110000001D22010011000059
+:1026E000005C2201008168AC0F5D2201008168ACB2
+:1026F0000F642201000F000000652201000F00009E
+:10270000002423010067FE1F002523010067FE1F30
+:1027100000442301001100000045230100110000C6
+:10272000005C230100040000005D230100040000A0
+:10273000006C230100010000006D23010001000076
+:102740000074230100010000007523010001000056
+:102750000094230100010000009523010001000006
+:1027600000BC23010001000000BD230100010000A6
+:1027700000CC23010001000000CD23010001000076
+:1027800000EC2301008824712AED230100882471C4
+:102790002AFC23010000C08540FD23010000C08504
+:1027A0004004240100400000000524010040000016
+:1027B000000C240100000100000D240100000100B4
+:1027C0000014240100000101001524010000010192
+:1027D000001C240100000080021D24010000008074
+:1027E00002B4240100DFBFE304B5240100DFBFE32E
+:1027F00004BC240100DFBFE304BD240100DFBFE30C
+:1028000004C424010001000000C5240100010000EF
+:1028100000D424010000FFFF00D524010000FFFFC9
+:1028200000DC24010001000000DD240100010000A3
+:1028300000F424010000FFFF00F524010000FFFF69
+:10284000003C250100010000003D250100010000C1
+:10285000004C250100010000004D25010001000091
+:1028600000542501000010203055250100001020E3
+:10287000305C250100405060705D250100405060D3
+:1028800070642501008898A8B8652501008898A87B
+:10289000B86C250100C8D8E8F86D250100C8D8E853
+:1028A000F87C2501001A0000007D2501001A0000B7
+:1028B00000D84E010004000000E04E0100040000BA
+:1028C00000E84E0100120C1008F04E010003000059
+:1028D00000004F0100120C1008104F0100140C08EA
+:1028E00000184F010001000000204F0100140C08E7
+:1028F00000384F0100120C1008404F010027000063
+:1029000000584F010001000000686D010001000047
+:1029100000206E0100120C1008886E0100000000FB
+:1029200004906E010000000004A06E010080000011
+:1029300000C06E010080000000D06E01003F00006A
+:1029400000286F010002000000306F01000000004D
+:1029500004386F010000000004806F0100040000D3
+:1029600000A06F01000400000030700100010000B1
+:1029700000387001000110000040700100FFFF00EE
+:102980000048700100FFFF000050700100FFFF00D1
+:102990000058700100FFFF0000607101000000801E
+:1029A0003F687101000000803F70710100000080ED
+:1029B0003F787101000000803F80710100000080BD
+:1029C0003F887101000000803F907101000000808D
+:1029D0003F987101000000803FA07101000000805D
+:1029E0003FA87101000000803FB07101000000802D
+:1029F0003FB87101000000803FC0710100000080FD
+:102A00003FC87101000000803FD0710100000080CC
+:102A10003FD87101000000803FE07101001000000C
+:102A200000F87101000300000040720100120C1058
+:102A30000849720100800000004A72010080000015
+:102A4000004B720100800000005072010080000005
+:102A50000051720100047000805272010004700085
+:102A600080537201000470008058720100047000ED
+:102A70008059720100000400045A72010000040031
+:102A8000045B720100000400046072010000040095
+:102A90000461720100001000006272010000100069
+:102AA0000063720100001000006872010000100055
+:102AB0000079720100010000007A7201000100003B
+:102AC000007B720100010000008072010001000023
+:102AD00000917201000100000092720100010000EB
+:102AE00000937201000100000098720100010000D3
+:102AF00000A172010004000000A2720100040000A5
+:102B000000A372010004000000A87201000400008C
+:102B100000A972010002000000AA72010002000078
+:102B200000AB72010002000000B072010002000060
+:102B30000009730100800000000A7301008000009A
+:102B4000000B730100800000001073010080000082
+:102B50000011730100047000801273010004700002
+:102B6000801373010004700080187301000470006A
+:102B70008019730100000400041A730100000400AE
+:102B8000041B730100000400042073010000040012
+:102B900004217301000010000022730100001000E6
+:102BA00000237301000010000028730100001000D2
+:102BB0000039730100010000003A730100010000B8
+:102BC000003B7301000100000040730100010000A0
+:102BD0000051730100010000005273010001000068
+:102BE0000053730100010000005873010001000050
+:102BF0000061730100040000006273010004000022
+:102C00000063730100040000006873010004000009
+:102C10000069730100020000006A730100020000F5
+:102C2000006B7301000200000070730100020000DD
+:102C300000C1730100120C1008C2730100120C10C5
+:102C400008C3730100120C1008C8730100120C10A5
+:102C500008F9730100FFFF0000FA730100FFFF0095
+:102C600000FB730100FFFF000000740100FFFF0084
+:102C70000001740100FFFF000002740100FFFF006B
+:102C80000003740100FFFF000008740100FFFF0053
+:102C90000009740100FFFF00000A740100FFFF003B
+:102CA000000B740100FFFF000010740100FFFF0023
+:102CB0000011740100FFFF000012740100FFFF000B
+:102CC0000013740100FFFF000018740100FFFF00F3
+:102CD0000019740100010000001A740100010000D5
+:102CE000001B7401000100000020740100010000BD
+:102CF00000217401000100010022740100010001A3
+:102D0000002374010001000100287401000100018A
+:102D10000029740100010001002A74010001000172
+:102D2000002B74010001000100307401000100015A
+:102D30000031740100010000003274010001000044
+:102D4000003374010001000000387401000100002C
+:102D5000004174010021FE01004274010021FE01C6
+:102D6000004374010021FE01004874010021FE01AE
+:102D70000071740100120C100872740100120C1022
+:102D80000873740100120C100878740100120C1002
+:102D90000879740100040000007A74010004000046
+:102DA000007B740100040000008074010004000036
+:102DB0000089740100020000008A74010002000012
+:102DC000008B7401000200000090740100020000FA
+:102DD00000917401001100000092740100110000C4
+:102DE00000937401001100000098740100110000AC
+:102DF00000D97401008168AC0FDA7401008168ACFD
+:102E00000FDB7401008168AC0FE07401008168ACD5
+:102E10000F017501000400000002750100040000AC
+:102E200000037501000400000008750100040000A3
+:102E300000517501000200000052750100020000FF
+:102E400000537501000200000058750100020000E7
+:102E50000059750100010000005A750100010000D1
+:102E6000005B7501000100000060750100010000B9
+:102E700000617501000100000062750100010000A1
+:102E80000063750100010000006875010001000089
+:102E90000069750100020000006A7501000200006F
+:102EA000006B750100020000007075010002000057
+:102EB0000071750100010000007275010001000041
+:102EC0000073750100010000007875010001000029
+:102ED0000079750100010000007A75010001000011
+:102EE000007B7501000100000080750100010000F9
+:102EF00000817501000100000082750100010000E1
+:102F000000837501000100000088750100010000C8
+:102F1000009175010004000000927501000400009A
+:102F20000093750100040000009875010004000082
+:102F300000B192010011000000B2920100110000E6
+:102F400000B392010011000000B8920100110000CE
+:102F500000C192010001000000C2920100010000C6
+:102F600000C392010001000000C8920100010000AE
+:012F70000060
+:00000001FF
diff --git a/firmware/nouveau/nv98.ctxprog.ihex b/firmware/nouveau/nv98.ctxprog.ihex
new file mode 100644
index 0000000..a3fa595
--- /dev/null
+++ b/firmware/nouveau/nv98.ctxprog.ihex
@@ -0,0 +1,57 @@
+:100000004E56435000DC008E0070009C00700020B3
+:10001000002000080060004C005000890E400000E5
+:100020000020000700600000003000FF00C000005A
+:10003000002000FF008000090070004DD9400044FE
+:10004000294000052940000D29400006B540000563
+:10005000006000C5154000110060000B274000C57E
+:100060002140000000700081007000040060004A20
+:10007000005000406C2100070060000127C0002EE6
+:1000800000200001008000CB005000FFFF9000FF27
+:10009000FF910020002000080060004C0050000983
+:1000A00000600045B540004DD040009D007000CF7D
+:1000B0002D40009F0070009F005000C02A4000802B
+:1000C000002000080060004F2A4000C02A4000CCF9
+:1000D0003040008100700000002000060060000039
+:1000E000007000FC1B110083007000000030004015
+:1000F0006C210007006000010AC0001E0020000102
+:10010000008000CB005000FF00C000800070008322
+:1001100000700047002000060060000A0211004045
+:100120000220000700600000003000FF00C000FF58
+:1001300000C80007C0400012292000FF0080008C8A
+:10014000504000CB0050003F02A0004000200006BD
+:100150000060000F007000020217000A0211003256
+:100160000020000D02100042021C000203120002D7
+:1001700004140000051800090513005005150005BA
+:100180000611000F002000070610000007110000F4
+:1001900009110002091200000A1100020B160028C2
+:1001A0000B12002B0B1400010C11000014110005A0
+:1001B00014110007141100091411000B141100CCC4
+:1001C000002000001510000F7940004B794000001E
+:1001D0004B21000700600025042000FF0088008FED
+:1001E0000070008C794000CB00500000000000053A
+:1001F0001A14000C1A1300001C1300041C12002017
+:100200001C1400251C1100001F1300401F1900E0E2
+:10021000954000AC012000060060004400200080F2
+:10022000201000C6201100C9201500D020190000A0
+:100230002112000321120000221600072212008062
+:100240002211000023110002231100802312008BD1
+:10025000231100942311009C231100000000000FC3
+:100260009C4000CB005000004B210007006000259F
+:10027000042000FF008800CB005000879F40000A48
+:100280000060000000000000AE4000A00070008090
+:10029000007000400220000700600004002000FF02
+:1002A00000C000FF008000CB005000000070000084
+:1002B00000200006006000FE1B11004DD040000031
+:1002C0000070000000200006006000FE1B1100808E
+:1002D0000070001D0070004D11400081007000048E
+:1002E0000060004A00500088BA40000B0060000027
+:1002F00000200006006000000070000BD04000FDF0
+:100300001B11004D42400012292000FD008000CB4F
+:100310000050000200C000400220000700600060A2
+:1003200001200002008000CB0050000218C000B283
+:1003300027200002008000CB0050004D4E40000BF3
+:100340000060004DCE400001007000030070000608
+:10035000D4400005D540000D006000050070000D80
+:10036000007000060070000B0070000E0070001C92
+:070370000070000C006000AA
+:00000001FF
diff --git a/firmware/nouveau/nv98.ctxvals.ihex b/firmware/nouveau/nv98.ctxvals.ihex
new file mode 100644
index 0000000..9eb39ff
--- /dev/null
+++ b/firmware/nouveau/nv98.ctxvals.ihex
@@ -0,0 +1,326 @@
+:100000004E564356008702000043000000300000B7
+:10001000004C00000002000000750000000300001A
+:10002000007600000000100000860000000CFE00BA
+:10003000008B000000001000009600000087010007
+:10004000009B000000181000009C000000FF000052
+:1000500000AB00000004000000AC000000DF002541
+:1000600004AE00000000060000B400000000000024
+:1000700001B5000000FF000000B700000000040010
+:1000800000BD00000001000000BE00000080000074
+:1000900000BF00000004000000C6000000020000D5
+:1000A00000C700000001000000CB000000010000BC
+:1000B00000CC00000000010000D20000000200009F
+:1000C00000D300000001000000D400000001000087
+:1000D00000D800000001000000D9000000FFFF3F31
+:1000E00000DA000000FF1F0000DC0000000100003B
+:1000F00000DD00000001000000DF00000001000042
+:1001000000E000000001000000E10000000100002C
+:1001100000E200000004000000E300000001000015
+:1001200000E400000001000000E500000001000004
+:1001300000E600000007000000E7000000010000EA
+:1001400000E800000007000000E9000000010000D6
+:1001500000EA00000001000000EB000000010000C8
+:1001600000F000000001000000F1000000000100AC
+:1001700000F300000001000000F600000000010094
+:1001800000F700000001000000F80000000001007E
+:1001900000FA00000001000000FD00000000010066
+:1001A00000020100000400000003010000700000D4
+:1001B000000401000080000000090100000C0000A4
+:1001C000000B010000080000000C010000140000FA
+:1001D000000E010000290000000F010000270000B0
+:1001E00000100100002600000011010000080000BE
+:1001F00000120100000400000013010000270000AD
+:1002000000160100000100000017010000020000BC
+:1002100000180100000300000019010000040000A4
+:10022000001A010000050000001B0100000600008C
+:10023000001C010000070000001D0100000100007B
+:10024000002E010000CF0000003A010000800000F5
+:10025000003B010000040000003C0100000400001D
+:10026000003D010000030000003E0100000100000D
+:1002700000410100001200000042010000100000D7
+:1002800000430100000C00000044010000010000D8
+:1002900000480100000400000049010000020000C5
+:1002A000004A010000040000004D010000FFFF3F74
+:1002B000004E010000FF1F00005801000004000074
+:1002C0000059010000140000005A01000001000064
+:1002D000005D01000002000000600100000100005C
+:1002E0000062010000020000006301000000100035
+:1002F0000064010000000E00006501000000100015
+:100300000066010000001E000068010000010000FE
+:100310000069010000010000006A01000001000006
+:10032000006B010000010000006C010000010000F2
+:1003300000700100000002000072010000010000D6
+:1003400000730100007000000074010000800000D4
+:10035000007701000001000000780100007000003B
+:100360000079010000800000007D01000001000014
+:10037000007E010000CF00000080010000010000AD
+:100380000084010000CF0000008601000002000090
+:100390000088010000010000008A01000001000047
+:1003A000008C010000CF0000008D010000CF000094
+:1003B000008E0100000100000090010000800F008D
+:1003C000009601000021F8743B97010000018005B0
+:1003D0008999010000001000009A0100001F000030
+:1003E000009B010000FA107C029C010000C000008C
+:1003F000409D010000802089B7A001000040003925
+:1004000000A201000022000000A501000040003809
+:1004100000AC01000000008001AD010000000016EA
+:1004200000AE01000000008001B2010000FFFF03E8
+:1004300000B301000000008C11BC010000010401A8
+:1004400000BE01000078000000C0010000BF0000F5
+:1004500000C201000010120000C301000080000073
+:1004600008CC01000000008001CD01000000001652
+:1004700000CE01000000008001D2010000FFFF0358
+:1004800000D301000000008C11DC01000001040118
+:1004900000DE01000078000000E0010000BF000065
+:1004A00000E201000010120000E3010000800000E3
+:1004B00008ED01000070700200F0010000FFFFFF76
+:1004C00003F601000007041200F7010000071509F8
+:1004D00005F801000002020105F901000001020314
+:1004E000000002000040000000010200000A0B0CA6
+:1004F0000D020200001012140003020000F00100BF
+:1005000000040200000100000005020000030000DA
+:100510000008020000009E03000902000000010024
+:10052000000A020000003800000B020000404040BA
+:10053000000C0200000AFF00000E02000005F07728
+:10054000000F020000FF7F3F004C0200000400008B
+:1005500000610200000F00000083020000020000A2
+:100560000089020000200000009302000067FE1FC7
+:1005700000FB02000001000000FC0200000400007B
+:1005800000010300001A0000000303000010000037
+:100590000004030000040000000C030000808060E1
+:1005A000001B0300000100000034030000040000F1
+:1005B0000043030000040000004B0300000004009F
+:1005C000004C03000004000000530300000003007F
+:1005D0000054030000040000005B03000001100051
+:1005E000005C0300008000000063030000150000B1
+:1005F0000064030000001E00006C03000004000003
+:1006000000710300000400000079030000040000F2
+:1006100000890300000400000091030000080000AE
+:10062000009303000002000000A1030000FF070088
+:1006300000DB03000001000000E3030000100000E5
+:1006400000F303000001000000090400000F000097
+:100650000093040000100000009404000004000057
+:10066000009C04000080000000A4040000040000BE
+:1006700000AC04000000010203B404000003000009
+:1006800000BC040000001E0000C4040000040000C0
+:1006900000EC04000004000000F40400000300006B
+:1006A0000014050000040000001B0500000000808D
+:1006B0003F230500000000803F2B05000000008064
+:1006C0003F330500000000803F3B05000000008034
+:1006D0003F430500000000803F4B05000000008004
+:1006E0003F530500000000803F5B050000000080D4
+:1006F0003F630500000000803F6B050000000080A4
+:100700003F730500000000803F7B05000000008073
+:100710003F830500000000803F8B05000000008043
+:100720003F930500000000803F63060000100000BA
+:1007300000730600003F000000AB0600000100004F
+:1007400000BB06000001000000CB06000001000015
+:10075000003307000011000000730700000F0000C5
+:1007600000B307000011000000EB070000010000CB
+:1007700000F307000001000000FB0700000100007B
+:100780000003080000020000000B08000001000048
+:100790000013080000020000001B08000001000018
+:1007A000002B08000067FE1F003B0800008168ACBA
+:1007B0000FEB08000001000000F308000002000039
+:1007C00000FB080000010000000309000001000018
+:1007D000000B0900000200000013090000010000E6
+:1007E000001B090000010000003B0900001100008F
+:1007F000004309000001000000410D00000F00004F
+:1008000000510D000001000000291000000F000041
+:1008100000881E000021000000901E000001000062
+:1008200000981E000002000000A01E000000010051
+:1008300000A81E000000010000B01E000001000022
+:1008400000C81E000001000000D01E0000020000D1
+:1008500000D81E000000010000E01E0000000100A2
+:1008600000E81E0000010000003045000004000008
+:10087000003845000004000000D15100000F0000C6
+:1008800000795200000100000081520000000100C8
+:100890000089520000000100009152000011000088
+:1008A00000A152000008000000D152000001000029
+:1008B00000E152000001000000E9520000010000C8
+:1008C00000F152000001000000F9520000CF0000CA
+:1008D0000001530000020000003953000001000035
+:1008E00000495300000100000051530000010000C6
+:1008F0000059530000010000008153000004000073
+:100900000091530000010000009953000015000001
+:1009100000B95300008044440499550000120C10A3
+:1009200008C155000000010000D955000001000178
+:1009300000E955000001000100F155000001000030
+:1009400000F95500000100010001560000010000FF
+:1009500000095600000400000011560000020000CB
+:100960000012560000FFFF3F002A560000FF1F0044
+:10097000003C560000040000004456000003000044
+:1009800000A25600000000803FD45600000F000077
+:1009900000DA56000004000000E25600001A0000D1
+:1009A00000FA560000010000003457000004000067
+:1009B000003C570000FFFF000044570000FFFF000D
+:1009C000004C570000FFFF000054570000FFFF00DD
+:1009D000009257000000FFFF009C5700000100003C
+:1009E00000BC57000001000000CA5700000F0000C3
+:1009F00000EC570000010000000A5800008168ACBC
+:100A00000F125800001100000054580000010000AF
+:100A1000005C580000010000006458000002000063
+:100A2000006C580000010000007458000001000034
+:100A3000007C580000020000008458000001000003
+:100A400000925800000400000094580000110000BB
+:100A500000BA58000002000000C258000000000068
+:100A600004CA58000000000004D45800008168AC9B
+:100A70000FEA58000005000000EC580000040000D8
+:100A800000F2580000520000000C59000011000054
+:100A90000014590000010000001A59000001000074
+:100AA0000024590000CF0000002C590000CF0000A6
+:100AB0000034590000CF00000071590000DFBFE38F
+:100AC0000479590000DFBFE3048C590000010000E5
+:100AD0000094590000010000009C59000002000031
+:100AE00000A15900008168AC0FA2590000000080ED
+:100AF0003FA459000001000000AA59000000008036
+:100B00003FAC59000001000000B259000000008015
+:100B10003FB459000002000000BA590000000080F4
+:100B20003FBC59000001000000C2590000000080D5
+:100B30003FCA5900000000803FCC5900000100006E
+:100B400000D25900000000803FD45900000100008D
+:100B500000DA5900000000803FDC5900000100006D
+:100B600000E25900000000803FE45900000100004D
+:100B700000EA5900000000803FEC5900000100002D
+:100B800000F25900000000803FF45900000100000D
+:100B900000FA5900000000803FFC590000010000ED
+:100BA00000015A0000DFBFE304025A000000008089
+:100BB0003F045A000001000000095A0000DFBFE3B3
+:100BC000040A5A00000000803F0C5A000011000087
+:100BD00000125A00000000803F1A5A0000000080F6
+:100BE0003F225A0000100000004C5A00008168ACFF
+:100BF0000F545A00000F000000945A000067FE1FB7
+:100C000000AC5A000011000000B45A0000010000BE
+:100C100000D45A000004000000045B000001000042
+:100C2000002C5B0000110000005A5B0000120C1049
+:100C300008625B0000050000006C5B00008168AC8E
+:100C40000F7A5B0000010000008A5B0000FFFF00DC
+:100C5000008C5B000011000000925B0000FFFF00B1
+:100C600000945B0000010000009A5B0000FFFF00A1
+:100C700000A25B0000FFFF0000A45B000001000079
+:100C800000AA5B000003000000B45B00000100004C
+:100C900000C45B0000FF070000D45B0000010000FF
+:100CA00000E45B000001000000AA5C000000FFFF00
+:100CB00000B25C00001A000000C25C0000030000EB
+:100CC000003C5D000008000000445D0000080000DA
+:100CD000004C5D000008000000545D0000080000AA
+:100CE000005C5D000008000000645D00000800007A
+:100CF000006C5D000008000000745D00000800004A
+:100D0000007C5D000011000000BC5D00008168AC4B
+:100D10000FC45D000000040000CC5D000000040072
+:100D200000D45D000000040000DC5D000000040051
+:100D300000E45D000000040000EC5D000000040021
+:100D400000F45D000000040000FA5D0000020100F4
+:100D500000FC5D000000040000045E0000000300D1
+:100D6000000A5E0000040000000C5E0000000300AA
+:100D700000125E000004000000145E00000003008A
+:100D8000001A5E0000040000001C5E00000003006A
+:100D900000225E000004000000245E00000003004A
+:100DA000002A5E0000040000002C5E00000003002A
+:100DB00000325E000004000000345E00000003000A
+:100DC000003C5E000000030000425E0000FF0700E0
+:100DD00000445E0000010000004C5E00000F0000B7
+:100DE00000525E0000020100008C5E000020000046
+:100DF00000945E0000110000009C5E0000000100F5
+:100E000000A25E000004000000AA5E0000040000D2
+:100E100000AC5E000001000000B25E0000040000B3
+:100E200000BA5E000004000000C45E000040000044
+:100E300000CC5E000000010000DC5E00000300004A
+:100E400000045F000067FE1F00245F000002000036
+:100E5000002C5F00008168AC0F7C5F000001000087
+:100E600000A45F000004000000B45F000001000067
+:100E700000BC5F000000040000C45F00000003002D
+:100E800000CC5F000001100000EC5F0000110000CA
+:100E9000002C6000008168AC0F346000000F00007F
+:100EA000004A600000140C080062600000040800A2
+:100EB0000072600000040000007A6000000400007E
+:100EC0000082600000120C10089260000004000014
+:100ED000009A60000004000000AA600000100000FA
+:100EE00000D260000004080000DA60000001000089
+:100EF00000E26000001A000000EA6000007F0000CD
+:100F000000F460000067FE1F00FA600000010000AE
+:100F10000002610000140C080012610000120C10A5
+:100F20000814610000110000001A610000040000B4
+:100F30000022610000040000002C61000004000099
+:100F40000032610000100000003C61000001000060
+:100F50000044610000010000005261000001000037
+:100F6000005A610000120C100864610000010000CA
+:100F7000008C6100000100000092610000FF07008A
+:100F8000009A610000140C08009C61000001000040
+:100F900000BC6100008824712ACC61000000C0857B
+:100FA00040D461000040000000DC6100000001004E
+:100FB00000E461000000010100EC6100000000801D
+:100FC0000284620000DFBFE3048C620000DFBFE345
+:100FD000049462000001000000A462000000FFFF12
+:100FE00000AC62000001000000C462000000FFFFCE
+:100FF000000C630000010000001C63000001000001
+:101000000024630000001020302C6300004050607A
+:1010100070346300008898A8B83C630000C8D8E822
+:10102000F84C6300001A0000006263000001000039
+:10103000007A630000100000004265000088000094
+:10104000004A65000088000000626500000400009E
+:10105000001A6600002600000032660000000080D2
+:101060003F526600001A0000005A6600001000009F
+:1010700000A267000052000000B2670000260000D6
+:1010800000C267000004000000CA670000040000FE
+:1010900000DA6700001A000000F267000000FFFF9E
+:1010A0000002680000040000000A6800000400005C
+:1010B000001A6800008000000022680000040000A0
+:1010C000002A680000140C08003A680000FF0700BE
+:1010D0000052920000040000005A92000004000038
+:1010E000006A92000080000000729200000400007C
+:1010F000007A920000010000008A920000270000A0
+:10110000009A92000026000000BA92000000000041
+:1011100004C292000000000004CA92000000000017
+:1011200004D292000000000004DA920000000000E7
+:1011300004E292000000000004EA920000000000B7
+:1011400004F292000000000004FA92000000000087
+:101150000402930000000000040A93000000000055
+:101160000412930000000000041A93000000000025
+:101170000422930000000000042A930000000000F5
+:101180000432930000000000045A940000DFBFE323
+:101190000462940000DFBFE3047A94000021FE01A2
+:1011A000009827010004000000A0270100040000AF
+:1011B00000A8270100120C1008B02701000300004E
+:1011C00000C0270100120C1008D0270100140C08E1
+:1011D00000D827010001000000E0270100140C08DE
+:1011E00000F8270100120C10080028010027000059
+:1011F000001828010001000000284601000100003D
+:1012000000E0460100120C100848470100000000F1
+:101210000450470100000000046047010080000006
+:10122000008047010080000000904701003F00005F
+:1012300000E847010002000000F047010000000044
+:1012400004F84701000000000440480100040000C9
+:10125000006048010004000000F0480100010000A7
+:1012600000F84801000110000000490100FFFF00E4
+:101270000008490100FFFF000010490100FFFF00C6
+:101280000018490100FFFF0000204A010000008013
+:101290003F284A01000000803F304A0100000080E2
+:1012A0003F384A01000000803F404A0100000080B2
+:1012B0003F484A01000000803F504A010000008082
+:1012C0003F584A01000000803F604A010000008052
+:1012D0003F684A01000000803F704A010000008022
+:1012E0003F784A01000000803F804A0100000080F2
+:1012F0003F884A01000000803F904A0100000080C2
+:101300003F984A01000000803FA04A010010000001
+:1013100000B84A010003000000004B0100120C104D
+:1013200008104B010080000000184B010004700001
+:1013300080204B010000040004284B010000100035
+:1013400000404B0100000E0000484B0100001E0051
+:1013500000504B010001000000684B01000100003B
+:1013600000784B010004000000804B0100020000E7
+:1013700000D84B0100120C1008104C0100FFFF00B8
+:1013800000184C0100FFFF0000204C0100FFFF008F
+:1013900000284C0100FFFF0000304C01000100005C
+:1013A00000384C010001000100404C010001000127
+:1013B00000484C010001000000584C010021FE01D2
+:1013C00000884C0100120C1008904C010004000031
+:1013D00000A04C010002000000A84C010011000018
+:1013E00000F04C01008168AC0F184D0100040000B2
+:1013F00000684D010002000000704D010001000076
+:1014000000784D010001000000804D010002000045
+:1014100000884D010001000000904D010001000016
+:1014200000984D010001000000A84D0100040000DB
+:1014300000A86A010011000000B86A010001000064
+:0114400000AB
+:00000001FF
diff --git a/firmware/nouveau/nva0.ctxprog.ihex b/firmware/nouveau/nva0.ctxprog.ihex
new file mode 100644
index 0000000..f1133e3
--- /dev/null
+++ b/firmware/nouveau/nva0.ctxprog.ihex
@@ -0,0 +1,89 @@
+:100000004E564350005D019C007000000030000916
+:100010002C4500092D400051204100440A400005B4
+:100020000A40000D0A40008E0070004D1240009DF5
+:100030000070004D3B450097007000213C4500A139
+:100040004644004D9144004D9D44001D0070000643
+:1000500018400005006000454444008B30440045D2
+:100060001840004D23400081007000CF1C40009FCD
+:100070000070009F0050004D174500170070000BE6
+:100080002340004D984400213D4500A1564400A066
+:10009000007000010070000300700006274000059A
+:1000A0002840000D006000050070000D0070000683
+:1000B000007000020070000B0070000E0070001C49
+:1000C0000070000C00600000000000FFFF9000FFC7
+:1000D000FF91004D0F4500090060004D004800965B
+:1000E000007000CF3A40009F0070009F0050005108
+:1000F000204100C036400080002000080060004F12
+:10010000364000C0364000CC3E400051364000161C
+:100110000070004D004800110060004D0048004D87
+:100120003644008E007000810070004D8B44004DFD
+:100130009844008300700000003000807C2100079C
+:10014000006000010AC0002200200001008000CBF6
+:10015000005000FF00C0004D5E44004D0048000804
+:100160000945004D8E44004DA644004D5E44004DAF
+:100170001D45004D9144004D9D44004D00480083B5
+:100180000070004D3E45003F02A0004000200006E8
+:100190000060004D3745004DA844002B0220006050
+:1001A000EF4400BA0220000100300061EF44004932
+:1001B0000320000200300062EF4400D80320000357
+:1001C00000300063EF440067042000040030006446
+:1001D000EF4400F60420000500300065EF44008580
+:1001E0000520000600300066EF44001406200007DA
+:1001F00000300067EF4400A30620000800300068CC
+:10020000EF4400320720000900300069EF4400008D
+:10021000082000FFFF38004D04450000003000CBEF
+:100220000050004D564500CB005000070B45004DD7
+:100230000048004D944400FC1B11004D0048004D47
+:10024000944400FD1B11004D0048004D944400FEF5
+:100250001B11004D00480000002000000070000647
+:100260000060004D00480001002000060060004DC5
+:100270003745000A0211004D00480000003000FF21
+:10028000FFC30000002000070060000000700008AD
+:10029000002000FF008000CB0050004D004800000F
+:1002A0000000004D0048000000000002021700326C
+:1002B0000020000D02100042021E00C002110002C8
+:1002C0000312000204150000051800090513005070
+:1002D0000515000506110013002000070610000098
+:1002E0000711000009110002091200000A110002A2
+:1002F0000B1600280B12002B0B1400010C1100012F
+:100300000D1100001411000514110007141100094B
+:100310001411000B141100D400200000151000056A
+:100320001A14000C1A1300001C1300041C130020E4
+:100330001C1400251C1300401C1300441C130060F7
+:100340001C1400651C1300801C1300841C1300A0E7
+:100350001C1400A51C1300C01C1300C41C1300E0D7
+:100360001C1400E51C1300001D1300041D130020C5
+:100370001D1400251D1300401D1300441D130060B3
+:100380001D1400651D1300801D1300841D1300A0A3
+:100390001D1400A51D1300C01D1300C41D1300E093
+:1003A0001D1400E51D1300001F1300041F13000897
+:1003B0001F11000B1F110015002000401F10004DE1
+:1003C000004800060060004D564500202011002224
+:1003D0002011006000200040201000C0201500C83F
+:1003E000201100CA201400CF201B0000211200039E
+:1003F000211200402116004721120053211200A0B3
+:10040000211100C0211200CB211100D4211100D8EC
+:100410002115004D0048000000000000007000069B
+:100420000060004D3745004D0048000B0060004D56
+:100430000048000A0060004D0048000B0060004DBD
+:100440000D410020002000080060004C0050004DCD
+:10045000004800E8032000080060004C0050004DF8
+:10046000004800040060004A0050004D004800FFB2
+:1004700000C000FF00C8004D004800FF00C000FFA2
+:1004800000C8004D004800160070008E0070008209
+:10049000007000410050004D13450095007000D1E0
+:1004A000005000160060005200500002007000155D
+:1004B0000070004D2840008E0070004D0F45000078
+:1004C0000020000700600000003000FF00C00000B6
+:1004D000002000FF008000090070000E0070004D39
+:1004E0000048008000700017004800000070004DB8
+:1004F0000048004D0048004D0048004D0048008E67
+:100500000070004D0F4500830070004D1A45004DEE
+:100510004745000F0070008C464100CB0050004D55
+:100520000048000008200007006000874B45004D90
+:10053000004800000000006C2120004D374500FFFE
+:100540000080004D0048008013210007006000205B
+:100550000D20004D374500FF0088004D0048000F7A
+:100560000048004B0048004D5045008F0070008C43
+:0B057000004800CB0050004D00480088
+:00000001FF
diff --git a/firmware/nouveau/nva0.ctxvals.ihex b/firmware/nouveau/nva0.ctxvals.ihex
new file mode 100644
index 0000000..19c647e
--- /dev/null
+++ b/firmware/nouveau/nva0.ctxvals.ihex
@@ -0,0 +1,1836 @@
+:100000004E56435600530E000043000000300000DF
+:10001000004B00000002000000740000000300001C
+:10002000007500000000100000880000000CFE00B9
+:10003000008E000000001000009900000087010001
+:10004000009E000000181000009F000000FF00004C
+:1000500000B200000004000000B3000000DF002533
+:1000600004B500000000060000BB00000000000016
+:1000700001BC000000FF000000BE000000000800FE
+:1000800000C400000001000000C5000000010000E5
+:1000900000C600000080000E00C700000004000041
+:1000A00000CE00000002000000CF000000010000B0
+:1000B00000D300000001000000D400000000010097
+:1000C00000DA00000002000000DB00000001000078
+:1000D00000DC00000001000000E000000001000062
+:1000E00000E1000000FFFF3F00E2000000FF1F00F2
+:1000F00000E400000001000000E500000001000035
+:1001000000E700000001000000E80000000100001E
+:1001100000E900000001000000EA00000004000007
+:1001200000EB00000001000000EC000000010000F6
+:1001300000ED00000001000000EE000000070000DC
+:1001400000EF00000001000000F0000000070000C8
+:1001500000F100000001000000F2000000010000BA
+:1001600000F300000001000000F8000000010000A2
+:1001700000F900000000010000FB00000001000089
+:1001800000FE00000000010000FF00000001000070
+:100190000000010000000100000201000001000059
+:1001A0000005010000000100000A01000004000039
+:1001B000000B010000700000000C01000080000036
+:1001C00000110100000C00000013010000080000F5
+:1001D00000140100001400000016010000290000B6
+:1001E0000017010000270000001801000026000091
+:1001F0000019010000080000001A010000040000BE
+:10020000001B010000270000001E0100000100008B
+:10021000001F010000020000002001000003000098
+:100220000021010000040000002201000005000080
+:100230000023010000060000002401000007000068
+:1002400000250100000100000036010000CF000081
+:100250000042010000800000004301000004000093
+:1002600000440100000400000045010000030000FC
+:1002700000460100000100000049010000120000DA
+:10028000004A010000100000004B0100000C0000BB
+:10029000004C0100000100000050010000040000BB
+:1002A00000510100000200000052010000040000A3
+:1002B0000056010000FFFF3F0057010000FF1F0034
+:1002C0000061010000010000006201000001000067
+:1002D000006301000002000000650100000400004E
+:1002E000006601000014000000670100000100002A
+:1002F000006A010000020000006F01000001000020
+:1003000000710100000200000072010000001000F6
+:100310000073010000000E000074010000001000D6
+:100320000075010000001E000077010000010000C0
+:1003300000780100000100000079010000010000C8
+:10034000007A010000010000007B010000010000B4
+:10035000007F010000000200008101000001000098
+:100360000082010000F000000083010000FF000097
+:1003700000860100000100000087010000F000007D
+:100380000088010000FF0000008A01000009000051
+:10039000008D010000010000008E010000CF000070
+:1003A00000900100000100000094010000CF000057
+:1003B000009601000002000000980100000100000A
+:1003C000009A010000010000009C010000CF000025
+:1003D000009D010000CF0000009E01000001000010
+:1003E00000A0010000801F0000A601000021F87499
+:1003F0003BA701000001800589A901000000100051
+:1004000000AA010000FF000000AC010000FA107C0F
+:1004100002AD010000C0000040AE01000080208954
+:10042000B7B301000021F8743BB40100000180055E
+:1004300089B601000000100000B7010000FF0000B5
+:1004400000B9010000FA107C02BA010000C00000EF
+:1004500040BB010000802089B7C001000021F87472
+:100460003BC101000001800589C3010000001000AC
+:1004700000C4010000FF000000C6010000FA107C6B
+:1004800002C7010000C0000040C8010000802089B0
+:10049000B7CD01000021F8743BCE010000018005BA
+:1004A00089D001000000100000D1010000FF000011
+:1004B00000D3010000FA107C02D4010000C000004B
+:1004C00040D5010000802089B7DA01000021F874CE
+:1004D0003BDB01000001800589DD01000000100008
+:1004E00000DE010000FF000000E0010000FA107CC7
+:1004F00002E1010000C0000040E20100008020890C
+:10050000B7E701000021F8743BE801000001800515
+:1005100089EA01000000100000EB010000FF00006C
+:1005200000ED010000FA107C02EE010000C00000A6
+:1005300040EF010000802089B7F401000021F87429
+:100540003BF501000001800589F701000000100063
+:1005500000F8010000FF000000FA010000FA107C22
+:1005600002FB010000C0000040FC01000080208967
+:10057000B70102000021F8743B020200000180056F
+:1005800089040200000010000005020000FF0000C6
+:100590000007020000FA107C0208020000C0000000
+:1005A0004009020000802089B70E02000040003D93
+:1005B0000010020000220000001802000040003D70
+:1005C0000019020000220000002B0200000AFF00B8
+:1005D000002D020000000080012E02000000001625
+:1005E000002F0200000000800133020000FFFF0323
+:1005F000003402000000000C313D02000001040143
+:10060000003F0200007800000041020000BF00002F
+:1006100000430200001012000044020000800000AD
+:1006200008470200003E0000004D0200000000806C
+:10063000014E020000000016004F02000000008082
+:100640000153020000FFFF03005402000000000CF1
+:10065000315D020000010401005F0200007800002B
+:100660000061020000BF00000063020000101200E1
+:10067000006402000080000008670200003E0000E5
+:10068000006D020000000080016E020000000016F4
+:10069000006F0200000000800173020000FFFF03F2
+:1006A000007402000000000C317D02000001040112
+:1006B000007F0200007800000081020000BF0000FF
+:1006C000008302000010120000840200008000007D
+:1006D00008870200003E0000008E020000707012C9
+:1006E0000192020000FFFFFF0799020000070412B9
+:1006F000009A020000071509059B02000002020192
+:10070000059C02000001020300A30200004000005B
+:1007100000A40200000A0B0C0DA502000010121428
+:1007200000A6020000F0010000A702000001000086
+:1007300000A802000003000000AB020000009E03BE
+:1007400000AC02000000010000AD02000000380013
+:1007500000AE02000006E03F00AF02000000E03FF4
+:1007600000B002000040404000B102000007F0F776
+:100770000CB2020000FF7FBF02BA0200000AFF00B5
+:1007800000BC02000000008001BD02000000001655
+:1007900000BE02000000008001C2020000FFFF0353
+:1007A00000C302000000000C31CC02000001040173
+:1007B00000CE02000078000000D0020000BF000060
+:1007C00000D202000010120000D3020000800000DE
+:1007D00008D60200003E000000DC0200000000809D
+:1007E00001DD02000000001600DE020000000080B3
+:1007F00001E2020000FFFF0300E302000000000C22
+:1008000031EC02000001040100EE0200007800005B
+:1008100000F0020000BF000000F202000010120011
+:1008200000F302000080000008F60200003E000015
+:1008300000FC02000000008001FD02000000001624
+:1008400000FE0200000000800102030000FFFF0321
+:10085000000303000000000C310C03000001040140
+:10086000000E0300007800000010030000BF00002D
+:1008700000120300001012000013030000800000AB
+:1008800008160300003E0000001D030000707012F7
+:100890000121030000FFFFFF0728030000070412E7
+:1008A0000029030000071509052A030000020201C0
+:1008B000052B03000001020300320300004000008A
+:1008C00000330300000A0B0C0D3403000010121457
+:1008D0000035030000F001000036030000010000B5
+:1008E0000037030000030000003A030000009E03ED
+:1008F000003B030000000100003C03000000380042
+:10090000003D03000006E03F003E03000000E03F22
+:10091000003F030000404040004003000007F0F7A4
+:100920000C41030000FF7FBF02490300000AFF00E3
+:10093000004B030000000080014C03000000001683
+:10094000004D0300000000800151030000FFFF0381
+:10095000005203000000000C315B030000010401A1
+:10096000005D030000780000005F030000BF00008E
+:10097000006103000010120000620300008000000C
+:1009800008650300003E0000006B030000000080CB
+:10099000016C030000000016006D030000000080E1
+:1009A0000171030000FFFF03007203000000000C50
+:1009B000317B030000010401007D0300007800008A
+:1009C000007F030000BF0000008103000010120040
+:1009D000008203000080000008850300003E000044
+:1009E000008B030000000080018C03000000001653
+:1009F000008D0300000000800191030000FFFF0351
+:100A0000009203000000000C319B03000001040170
+:100A1000009D030000780000009F030000BF00005D
+:100A200000A103000010120000A2030000800000DB
+:100A300008A50300003E000000AC03000070701227
+:100A400001B0030000FFFFFF07B703000007041217
+:100A500000B803000007150905B9030000020201F0
+:100A600005BA03000001020300C1030000400000BA
+:100A700000C20300000A0B0C0DC303000010121487
+:100A800000C4030000F0010000C5030000010000E5
+:100A900000C603000003000000C9030000009E031D
+:100AA00000CA03000000010000CB03000000380072
+:100AB00000CC03000006E03F00CD03000000E03F53
+:100AC00000CE03000040404000CF03000007F0F7D5
+:100AD0000CD0030000FF7FBF02D80300000AFF0014
+:100AE00000DA03000000008001DB030000000016B4
+:100AF00000DC03000000008001E0030000FFFF03B2
+:100B000000E103000000000C31EA030000010401D1
+:100B100000EC03000078000000EE030000BF0000BE
+:100B200000F003000010120000F10300008000003C
+:100B300008F40300003E000000FA030000000080FB
+:100B400001FB03000000001600FC03000000008011
+:100B50000100040000FFFF03000104000000000C7E
+:100B6000310A040000010401000C040000780000B8
+:100B7000000E040000BF000000100400001012006E
+:100B8000001104000080000008140400003E000072
+:100B9000001A040000000080011B04000000001681
+:100BA000001C0400000000800120040000FFFF037F
+:100BB000002104000000000C312A0400000104019F
+:100BC000002C040000780000002E040000BF00008C
+:100BD000003004000010120000310400008000000A
+:100BE00008340400003E0000003B04000070701256
+:100BF000013F040000FFFFFF074604000007041246
+:100C0000004704000007150905480400000202011E
+:100C100005490400000102030050040000400000E8
+:100C200000510400000A0B0C0D52040000101214B5
+:100C30000053040000F00100005404000001000013
+:100C400000550400000300000058040000009E034B
+:100C50000059040000000100005A040000003800A0
+:100C6000005B04000006E03F005C04000000E03F81
+:100C7000005D040000404040005E04000007F0F703
+:100C80000C5F040000FF7FBF02670400000AFF0042
+:100C90000069040000000080016A040000000016E2
+:100CA000006B040000000080016F040000FFFF03E0
+:100CB000007004000000000C317904000001040100
+:100CC000007B040000780000007D040000BF0000ED
+:100CD000007F04000010120000800400008000006B
+:100CE00008830400003E000000890400000000802A
+:100CF000018A040000000016008B04000000008040
+:100D0000018F040000FFFF03009004000000000CAE
+:100D10003199040000010401009B040000780000E8
+:100D2000009D040000BF0000009F0400001012009E
+:100D300000A004000080000008A30400003E0000A2
+:100D400000A904000000008001AA040000000016B1
+:100D500000AB04000000008001AF040000FFFF03AF
+:100D600000B004000000000C31B9040000010401CF
+:100D700000BB04000078000000BD040000BF0000BC
+:100D800000BF04000010120000C00400008000003A
+:100D900008C30400003E000000CA04000070701286
+:100DA00001CE040000FFFFFF07D504000007041276
+:100DB00000D604000007150905D70400000202014F
+:100DC00005D804000001020300DF04000040000019
+:100DD00000E00400000A0B0C0DE1040000101214E6
+:100DE00000E2040000F0010000E304000001000044
+:100DF00000E404000003000000E7040000009E037C
+:100E000000E804000000010000E9040000003800D0
+:100E100000EA04000006E03F00EB04000000E03FB1
+:100E200000EC04000040404000ED04000007F0F733
+:100E30000CEE040000FF7FBF02F60400000AFF0072
+:100E400000F804000000008001F904000000001612
+:100E500000FA04000000008001FE040000FFFF0310
+:100E600000FF04000000000C31080500000104012F
+:100E7000000A050000780000000C050000BF00001B
+:100E8000000E050000101200000F05000080000099
+:100E900008120500003E0000001805000000008058
+:100EA0000119050000000016001A0500000000806E
+:100EB000011E050000FFFF03001F05000000000CDD
+:100EC0003128050000010401002A05000078000017
+:100ED000002C050000BF0000002E050000101200CD
+:100EE000002F05000080000008320500003E0000D1
+:100EF00000380500000000800139050000000016E0
+:100F0000003A050000000080013E050000FFFF03DD
+:100F1000003F05000000000C3148050000010401FD
+:100F2000004A050000780000004C050000BF0000EA
+:100F3000004E050000101200004F05000080000068
+:100F400008520500003E00000059050000707012B4
+:100F5000015D050000FFFFFF0764050000070412A4
+:100F6000006505000007150905660500000202017D
+:100F70000567050000010203006E05000040000047
+:100F8000006F0500000A0B0C0D7005000010121414
+:100F90000071050000F00100007205000001000072
+:100FA00000730500000300000076050000009E03AA
+:100FB00000770500000001000078050000003800FF
+:100FC000007905000006E03F007A05000000E03FE0
+:100FD000007B050000404040007C05000007F0F762
+:100FE0000C7D050000FF7FBF02850500000AFF00A1
+:100FF0000087050000000080018805000000001641
+:101000000089050000000080018D050000FFFF033E
+:10101000008E05000000000C31970500000104015E
+:101020000099050000780000009B050000BF00004B
+:10103000009D050000101200009E050000800000C9
+:1010400008A10500003E000000A705000000008088
+:1010500001A805000000001600A90500000000809E
+:1010600001AD050000FFFF0300AE05000000000C0D
+:1010700031B705000001040100B905000078000047
+:1010800000BB050000BF000000BD050000101200FD
+:1010900000BE05000080000008C10500003E000001
+:1010A00000C705000000008001C805000000001610
+:1010B00000C905000000008001CD050000FFFF030E
+:1010C00000CE05000000000C31D70500000104012E
+:1010D00000D905000078000000DB050000BF00001B
+:1010E00000DD05000010120000DE05000080000099
+:1010F00008E10500003E000000E8050000707012E5
+:1011000001EC050000FFFFFF07F3050000070412D4
+:1011100000F405000007150905F5050000020201AD
+:1011200005F605000001020300FD05000040000077
+:1011300000FE0500000A0B0C0DFF05000010121444
+:101140000000060000F001000001060000010000A0
+:1011500000020600000300000005060000009E03D8
+:10116000000606000000010000070600000038002D
+:10117000000806000006E03F000906000000E03F0E
+:10118000000A060000404040000B06000007F0F790
+:101190000C0C060000FF7FBF02140600000AFF00CF
+:1011A000001606000000008001170600000000166F
+:1011B0000018060000000080011C060000FFFF036D
+:1011C000001D06000000000C31260600000104018D
+:1011D0000028060000780000002A060000BF00007A
+:1011E000002C060000101200002D060000800000F8
+:1011F00008300600003E00000036060000000080B7
+:1012000001370600000000160038060000000080CC
+:10121000013C060000FFFF03003D06000000000C3B
+:101220003146060000010401004806000078000075
+:10123000004A060000BF0000004C0600001012002B
+:10124000004D06000080000008500600003E00002F
+:10125000005606000000008001570600000000163E
+:101260000058060000000080015C060000FFFF033C
+:10127000005D06000000000C31660600000104015C
+:101280000068060000780000006A060000BF000049
+:10129000006C060000101200006D060000800000C7
+:1012A00008700600003E0000007706000070701213
+:1012B000017B060000FFFFFF078206000007041203
+:1012C00000830600000715090584060000020201DC
+:1012D0000585060000010203008C060000400000A6
+:1012E000008D0600000A0B0C0D8E06000010121473
+:1012F000008F060000F001000090060000010000D1
+:1013000000910600000300000094060000009E0308
+:10131000009506000000010000960600000038005D
+:10132000009706000006E03F009806000000E03F3E
+:101330000099060000404040009A06000007F0F7C0
+:101340000C9B060000FF7FBF02A30600000AFF00FF
+:1013500000A506000000008001A60600000000169F
+:1013600000A706000000008001AB060000FFFF039D
+:1013700000AC06000000000C31B5060000010401BD
+:1013800000B706000078000000B9060000BF0000AA
+:1013900000BB06000010120000BC06000080000028
+:1013A00008BF0600003E000000C5060000000080E7
+:1013B00001C606000000001600C7060000000080FD
+:1013C00001CB060000FFFF0300CC06000000000C6C
+:1013D00031D506000001040100D7060000780000A6
+:1013E00000D9060000BF000000DB0600001012005C
+:1013F00000DC06000080000008DF0600003E000060
+:1014000000E506000000008001E60600000000166E
+:1014100000E706000000008001EB060000FFFF036C
+:1014200000EC06000000000C31F50600000104018C
+:1014300000F706000078000000F9060000BF000079
+:1014400000FB06000010120000FC060000800000F7
+:1014500008FF0600003E0000000607000070701242
+:10146000010A070000FFFFFF071107000007041231
+:10147000001207000007150905130700000202010A
+:101480000514070000010203001B070000400000D4
+:10149000001C0700000A0B0C0D1D070000101214A1
+:1014A000001E070000F00100001F070000010000FF
+:1014B00000200700000300000023070000009E0337
+:1014C000002407000000010000250700000038008C
+:1014D000002607000006E03F002707000000E03F6D
+:1014E0000028070000404040002907000007F0F7EF
+:1014F0000C2A070000FF7FBF02320700000AFF002E
+:1015000000340700000000800135070000000016CD
+:101510000036070000000080013A070000FFFF03CB
+:10152000003B07000000000C3144070000010401EB
+:1015300000460700007800000048070000BF0000D8
+:10154000004A070000101200004B07000080000056
+:10155000084E0700003E0000005407000000008015
+:10156000015507000000001600560700000000802B
+:10157000015A070000FFFF03005B07000000000C9A
+:1015800031640700000104010066070000780000D4
+:101590000068070000BF0000006A0700001012008A
+:1015A000006B070000800000086E0700003E00008E
+:1015B000007407000000008001750700000000169D
+:1015C0000076070000000080017A070000FFFF039B
+:1015D000007B07000000000C3184070000010401BB
+:1015E00000860700007800000088070000BF0000A8
+:1015F000008A070000101200008B07000080000026
+:10160000088E0700003E0000009507000070701271
+:101610000199070000FFFFFF07A007000007041261
+:1016200000A107000007150905A20700000202013A
+:1016300005A307000001020300AA07000040000004
+:1016400000AB0700000A0B0C0DAC070000101214D1
+:1016500000AD070000F0010000AE0700000100002F
+:1016600000AF07000003000000B2070000009E0367
+:1016700000B307000000010000B4070000003800BC
+:1016800000B507000006E03F00B607000000E03F9D
+:1016900000B707000040404000B807000007F0F71F
+:1016A0000CB9070000FF7FBF020108000004000022
+:1016B00000060800003F00000009080000040000C8
+:1016C000000B080000010000000D0800008168AC5C
+:1016D0000F19080000800000001F08000001000032
+:1016E00000210800000400000029080000140C0874
+:1016F000002A080000140C08002F08000001000058
+:1017000000330800000F00000039080000FF070048
+:101710000042080000040800004F080000882471FF
+:101720002A52080000040000005A080000040000CB
+:10173000005B080000200000005E080000020000BE
+:10174000005F08000000C0854062080000120C1015
+:101750000866080000000000046708000040000060
+:10176000006D080000DFBFE3046E08000000000009
+:10177000046F08000000010000720800000400006F
+:101780000075080000DFBFE30477080000000101D6
+:10179000007A080000040000007F080000000080BC
+:1017A000028A080000100000009D080000DFBFE36F
+:1017B00004A5080000DFBFE304B20800000408002D
+:1017C00000B608000004000000BA08000001000094
+:1017D00000C20800001A000000CA0800007F0000D4
+:1017E00000D608000004000000DA08000001000034
+:1017F00000DB0800001A000000E2080000140C08DA
+:1018000000F2080000120C1008FA080000040000A2
+:1018100000020900000400000005090000020000A9
+:101820000012090000100000001509000067FE1FEB
+:101830000032090000010000003A090000120C10FB
+:10184000084B0900000400000053090000040000D8
+:10185000005F0900000F00000063090000040000A1
+:101860000066090000010000006B0900000800008C
+:10187000006E0900000110000072090000FF07005F
+:1018800000750900001500000076090000FFFF0048
+:10189000007A090000140C08007B090000FF070013
+:1018A000007E090000FFFF00008509000001000024
+:1018B0000086090000FFFF00008D090000100000F5
+:1018C000008E090000FFFF0000A5090000010000D4
+:1018D00000BF09000004000000C7090000FFFF006E
+:1018E00000CD09000004000000CF090000FFFF0048
+:1018F00000D509000000040000D7090000FFFF0028
+:1019000000DD09000000030000DF090000FFFF0008
+:1019100000E30900000F000000E5090000011000CD
+:1019200000150A000002000000270A000001000064
+:1019300000470A0000010000005D0A0000010000ED
+:1019400000650A000010000000750A000001000098
+:1019500000770A0000010000008F0A00000100006B
+:1019600000960A00000000803F9E0A0000000080F0
+:101970003FA60A00000000803FAE0A000000008081
+:101980003FB60A00000000803FBE0A000000008051
+:101990003FC60A00000000803FCE0A000000008021
+:1019A0003FD60A00000000803FDE0A0000000080F1
+:1019B0003FE60A00000000803FE70A000001000047
+:1019C00000EE0A00000000803FEF0A000001000066
+:1019D00000F60A00000000803FF70A000002000045
+:1019E00000FE0A00000000803FFF0A000001000026
+:1019F00000060B00000000803F070B000001000004
+:101A0000000E0B00000000803F0F0B0000020000E2
+:101A100000150B000010000000160B000010000065
+:101A200000170B000001000000270B000011000050
+:101A3000002E0B000003000000420B00000100001C
+:101A4000005A0B000010000000670B00008168AC1A
+:101A50000F7F0B0000040000009D0B0000000080C1
+:101A60003F9E0B0000000000049F0B0000110000CF
+:101A700000A50B00000000803FA60B000000000046
+:101A800004A70B000001000000AD0B000000008067
+:101A90003FB50B00000000803FB60B000080000047
+:101AA00000B70B0000CF000000BD0B00000000805D
+:101AB0003FBF0B0000CF000000C50B0000000080FE
+:101AC0003FC70B0000CF000000CD0B0000000080DE
+:101AD0003FD50B00000000803FD60B0000800000C7
+:101AE00000DD0B00000000803FE50B0000000080DF
+:101AF0003FED0B00000000803FF50B000000008070
+:101B00003FFD0B00000000803F050C00000000803E
+:101B10003F0D0C00000000803F0E0C000001000093
+:101B200000150C00000000803F160C0000000100B2
+:101B3000001E0C0000000100001F0C00000100004E
+:101B400000260C000011000000270C00000100001E
+:101B5000002F0C000002000000360C0000080000FE
+:101B600000370C0000010000003F0C0000010000E5
+:101B700000470C0000020000004F0C0000010000B4
+:101B8000005F0C000001000000660C000001000076
+:101B900000670C0000010000006F0C000001000055
+:101BA00000760C000001000000770C00000100002E
+:101BB000007E0C0000010000007F0C00000100000E
+:101BC00000860C000001000000870C0000010000EE
+:101BD000008E0C0000CF0000008F0C000001000000
+:101BE00000960C000002000000970C0000010000AD
+:101BF000009F0C000011000000CE0C00000100004E
+:101C000000DE0C000001000000DF0C00008168AC69
+:101C10000FE50C000010000000E60C0000010000C1
+:101C200000E70C00000F000000EE0C0000010000B7
+:101C300000F50C00003F000000160D00000400003D
+:101C400000220D000088000000260D0000010000A9
+:101C500000270D000067FE1F002A0D00008800000D
+:101C6000002D0D0000010000002E0D0000150000E9
+:101C7000003D0D0000010000003F0D0000110000BC
+:101C800000420D000004000000470D0000010000AC
+:101C9000004D0D0000010000004E0D000080444486
+:101CA00004650D000001100000670D000004000035
+:101CB00000970D000001000000BF0D0000110000A2
+:101CC00000C50D000011000000FA0D000026000004
+:101CD00000FF0D00008168AC0F050E00000F000032
+:101CE00000120E00000000803F1F0E0000110000D7
+:101CF00000270E000001000000320E00001A000054
+:101D000000370E0000010000003A0E000010000035
+:101D100000450E000011000000470E000001000009
+:101D200000570E0000FF070000670E0000010000D2
+:101D300000770E0000010000007D0E000001000091
+:101D400000850E0000010000008D0E000001000063
+:101D500000950E0000020000009D0E000001000032
+:101D600000A50E000002000000AD0E000001000002
+:101D700000BD0E000067FE1F00CD0E00008168ACA4
+:101D80000F260F000001000000360F0000010000C8
+:101D900000560F00008824712A660F000000C085DD
+:101DA000406E0F000040000000760F0000000100B0
+:101DB000007E0F000000010100820F0000520000B1
+:101DC00000860F000000008002920F000026000035
+:101DD00000A20F000004000000AA0F000004000091
+:101DE00000AD0F000001000000B50F000002000070
+:101DF00000BA0F00001A000000BD0F000001000033
+:101E000000C50F000001000000CD0F00000200001F
+:101E100000CF0F000008000000D20F000000FFFFFD
+:101E200000D50F000001000000D70F0000080000DF
+:101E300000DD0F000001000000DF0F0000080000BF
+:101E400000E70F000008000000EF0F00000800008E
+:101E500000F70F000008000000FF0F00000800005E
+:101E6000000510000011000000071000000800002D
+:101E7000000D100000010000000F10000011000014
+:101E8000004F1000008168AC0F57100000000400E4
+:101E9000005F10000000040000661000000F00004A
+:101EA0000067100000000400006F10000000040034
+:101EB0000077100000000400007F10000000040004
+:101EC0000087100000000400008F100000000400D4
+:101ED0000097100000000300009F100000000300A6
+:101EE00000A710000000030000AF10000000030076
+:101EF00000B710000000030000BF10000000030046
+:101F000000C610000004000000C71000000003001D
+:101F100000CE100000FFFF0000CF10000000030003
+:101F200000D6100000FFFF0000D7100000010000E5
+:101F300000DE100000FFFF0000DF1000000F0000B7
+:101F400000E6100000FFFF00001F1100002000004D
+:101F50000027110000110000002E110000010000F8
+:101F6000002F110000000100003F110000010000DF
+:101F7000004E110000010000005711000040000059
+:101F8000005F110000000100006F1100000300005D
+:101F9000007E11000001000000921100000400000A
+:101FA0000096110000010000009711000067FE1F5D
+:101FB000009A11000004000000B7110000020000A8
+:101FC00000BF1100008168AC0FEE1100000100009D
+:101FD00000F611000001000000FE110000020000E8
+:101FE0000006120000010000000E120000010000B7
+:101FF000000F120000010000001612000002000095
+:10200000001E120000010000002E1200001100004E
+:102010000037120000040000004712000001000019
+:10202000004F1200000004000057120000000300DF
+:10203000005F120000011000006E1200008168AC09
+:102040000F7F120000110000008612000004000043
+:1020500000A612000011000000AE120000010000F6
+:1020600000BE120000CF000000BF1200008168AC6B
+:102070000FC6120000CF000000C71200000F0000C2
+:1020800000CE120000CF0000000B1300000F000074
+:10209000001B1300000100000026130000010000D7
+:1020A000002D130000020000002E130000010000AC
+:1020B0000036130000020000003D13000067FE1F01
+:1020C000003E130000010000004613000001000064
+:1020D000004E130000020000005613000001000033
+:1020E0000066130000010000006E130000010000F4
+:1020F0000076130000010000007E130000010000C4
+:10210000008613000001000000871300008168AC06
+:102110000F8E130000010000008F13000067FE1FE8
+:102120000096130000010000009D13000015000040
+:10213000009E13000001000000A613000011000023
+:1021400000AD13000001000000AF130000110000FB
+:1021500000B513000010000000C7130000040000C9
+:1021600000CD13000001000000D7130000010000A3
+:1021700000DF13000001000000E61300008168ACDE
+:102180000FEE1300000F000000F513000004000024
+:1021900000FD13000000040000FF13000001000018
+:1021A0000005140000000300000D140000011000E1
+:1021B00000271400008168AC0F2E14000067FE1F7A
+:1021C000003D140000020000004614000011000051
+:1021D000004E140000010000004F14000004000035
+:1021E000005F1400000100000067140000010000FF
+:1021F000006E140000040000007F140000010000C5
+:102200000085140000010000008D14000010000083
+:10221000009D140000010000009E14000001000059
+:1022200000C614000011000000D7140000010000D7
+:1022300000DF14000001000000E7140000010000AE
+:1022400000EF14000001000000F71400000100007E
+:1022500000FF14000001000000061500008168ACBA
+:102260000F07150000010000000F1500000100001D
+:1022700000171500001100000026150000110000D5
+:10228000002E150000010000003D150000100000A8
+:10229000003E150000010000004E15000001000086
+:1022A00000571500008168AC0F5E150000FF0700A5
+:1022B000005F1500000F0000006E15000001000017
+:1022C000007E150000010000009F150000110000B5
+:1022D00000A715000001000000C5150000000080E7
+:1022E0003FCD1500000000803FD5150000000080A4
+:1022F0003FDD1500000000803FE515000000008074
+:102300003FED1500000000803FF31500000F0000B6
+:1023100000F51500000000803FFD15000000008062
+:102320003F051600000000803F07160000DFBFE3F6
+:10233000040D1600000000803F0F160000DFBFE311
+:1023400004151600000000803F1716000001000071
+:10235000001D1600000000803F25160000000080D0
+:102360003F2716000000FFFF002D16000000008030
+:102370003F2F16000001000000351600000000800D
+:102380003F3D1600000000803F4716000000FFFFA1
+:10239000008F160000010000009F160000010000E1
+:1023A00000A716000000102030AF1600004050605B
+:1023B00070B71600008898A8B8BF160000C8D8E803
+:1023C000F8CF1600001A000000D616000008000022
+:1023D00000DE16000008000000DF16000004000008
+:1023E00000E616000008000000EE160000080000DD
+:1023F00000F616000008000000FE160000080000AD
+:102400000006170000080000000D17000010000073
+:10241000000E170000080000001617000011000051
+:10242000001D1700003F00000055170000010000CC
+:1024300000561700008168AC0F5E17000000040012
+:10244000006517000001000000661700000004008E
+:10245000006E170000000400007517000001000066
+:102460000076170000000400007E17000000040042
+:102470000086170000000400008717000004000019
+:10248000008D170000011000008E170000000400EE
+:10249000008F1700000400000096170000000400E1
+:1024A0000097170000000102039E170000000300C0
+:1024B00000A617000000030000AE17000000030094
+:1024C00000B617000000030000BE17000000030064
+:1024D00000BF17000004000000C617000000030042
+:1024E00000CE17000000030000D617000000030014
+:1024F00000D717000004000000DE170000010000F4
+:1025000000DF17000004000000E61700000F0000C5
+:1025100000E717000080000000ED17000011000028
+:1025200000EF170000040000002618000020000043
+:10253000002D1800000F0000002E180000110000F0
+:1025400000361800000001000046180000010000DD
+:10255000005E180000400000006618000000010046
+:10256000006D180000110000007618000003000044
+:10257000009E18000067FE1F00A518000001000063
+:1025800000AD18000001000000B5180000010000B7
+:1025900000BD18000002000000BE1800000200008C
+:1025A00000C518000001000000C61800008168ACDA
+:1025B0000FCD18000002000000D518000001000037
+:1025C00000E518000067FE1F00F51800008168ACE8
+:1025D0000F16190000010000001719000004000088
+:1025E000001F1900008000000027190000040000EF
+:1025F000002F19000000010203371900000300003A
+:10260000003E190000040000003F19000004000013
+:10261000004E1900000100000056190000000400DF
+:10262000005E1900000003000066190000011000A0
+:102630000067190000040000006F1900000300008B
+:102640000086190000110000008F1900000400002E
+:1026500000C61900008168AC0FCE1900000F000001
+:1026600000D519000001000000DD19000002000083
+:1026700000E519000001000000ED19000001000054
+:1026800000F519000002000000FD19000001000023
+:1026900000051A0000010000002D1A0000110000C2
+:1026A00000351A0000010000008E1A00008168AC9D
+:1026B0000F961A000067FE1F00B61A0000110000F6
+:1026C00000CE1A000004000000DE1A000001000025
+:1026D00000E61A000001000000061B0000010000D7
+:1026E000002E1B00008168AC0F561B000004000088
+:1026F00000661B0000010000006E1B0000010000CE
+:1027000000861B000001000000DE1B00000100002D
+:1027100000E61B000001000000EE1B0000010000AD
+:1027200000F61B000001000000FE1B00000100007D
+:1027300000061C0000010000000E1C00000100004B
+:1027400000161C0000010000001E1C00001100000B
+:10275000005E1C00008168AC0F661C00000F0000CA
+:1027600000A61C000011000000AE1C0000010000CB
+:10277000000E1D0000DFBFE304161D0000DFBFE3F5
+:10278000041E1D0000010000002E1D000000FFFFC0
+:1027900000361D0000010000004E1D000000FFFF7C
+:1027A00000551D000002000000651D000067FE1FAF
+:1027B00000961D000001000000A61D0000010000A1
+:1027C00000AE1D000000102030B61D00004050601B
+:1027D00070BE1D00008898A8B8C51D000015000037
+:1027E00000C61D0000C8D8E8F8D51D000001000093
+:1027F00000D61D00001A000000DD1D0000100000C2
+:1028000000E61D000004000000F51D0000010000AE
+:10281000001D1E000004000000251E000000040032
+:10282000002D1E000000030000351E0000011000F6
+:1028300000651E0000020000008E1E000004000063
+:1028400000961E0000040000009E1E000000010211
+:1028500003AD1E000001000000B51E0000100000C6
+:1028600000C51E000001000000C61E00000400009C
+:1028700000DE1E000004000000E61E000004000050
+:1028800000EE1E000080000000F61E0000040000A4
+:1028900000651F000010000000ED1F000000008018
+:1028A0003FF51F00000000803FFD1F00000000807A
+:1028B0003F052000000000803F0D20000000008048
+:1028C0003F152000000000803F1D20000000008018
+:1028D0003F1E2000000400000025200000000080B2
+:1028E0003F26200000800000002D20000000008016
+:1028F0003F2E200000040000003520000000008072
+:102900003F36200000000102033D2000000000804F
+:102910003F3E200000030000004520000000008032
+:102920003F46200000040000004D20000000008011
+:102930003F552000000000803F5D20000000008027
+:102940003F652000000000803F6E20000004000072
+:102950000076200000030000009620000004000024
+:10296000003521000010000000452100003F00005C
+:10297000007D210000010000008D21000001000009
+:10298000009D21000001000000B5210000011000A1
+:10299000001522000011000000552200000F000069
+:1029A000009522000011000000CD2200000100006F
+:1029B00000D522000001000000DD2200000100001F
+:1029C00000E522000002000000ED220000010000EE
+:1029D00000F522000002000000FD220000010000BE
+:1029E000000D23000067FE1F001D2300008168AC5E
+:1029F0000FFD23000001000000052400000200007C
+:102A0000000D24000001000000152400000100005A
+:102A1000001D240000020000002524000001000029
+:102A2000002D2400000100000055240000110000CA
+:102A3000005D240000010000006824000021000067
+:102A40000070240000010000007824000002000053
+:102A50000080240000000100008824000000010024
+:102A6000009024000001000000A8240000010000E4
+:102A700000B024000002000000B8240000000100A3
+:102A800000C024000000010000C824000001000074
+:102A9000007D270000020000008D27000067FE1F58
+:102AA00000ED27000015000000FD270000010000D8
+:102AB0000005280000100000001D28000001000093
+:102AC0000045280000040000004D2800000004001C
+:102AD0000055280000000300005D280000011000E0
+:102AE000008D28000002000000D528000001000031
+:102AF00000DD28000010000000ED280000010000AB
+:102B0000008D29000010000000152A000000008040
+:102B10003F1D2A00000000803F252A0000000080A1
+:102B20003F2D2A00000000803F352A000000008071
+:102B30003F372A0000040000003D2A00000000800A
+:102B40003F3F2A000003000000452A0000000080EB
+:102B50003F4D2A00000000803F552A000000008001
+:102B60003F5D2A00000000803F652A0000000080D1
+:102B70003F6D2A00000000803F6F2A000001000026
+:102B800000752A00000000803F7D2A0000000080C0
+:102B90003F7F2A000001000000852A00000000801D
+:102BA0003F8D2A00000000803F9F2A00008824718A
+:102BB0002AAF2A000000C08540B72A00004000006C
+:102BC00000BF2A000000010000C72A000000010128
+:102BD00000CF2A0000000080025D2B0000100000E2
+:102BE000006D2B00003F000000A52B00000100003D
+:102BF00000AF2B00000F000000B52B00000100000B
+:102C000000C52B000001000000DD2B0000011000BA
+:102C1000000F2C000004000000172C0000FFFF0034
+:102C2000001F2C0000FFFF0000272C0000FFFF000A
+:102C3000002F2C0000FFFF00003D2C0000110000C1
+:102C400000772C0000010000007D2C00000F000028
+:102C500000972C000001000000BD2C0000110000B6
+:102C600000C72C000001000000DF2C000001000064
+:102C700000F52C000001000000FD2C000001000008
+:102C800000052D0000010000000D2D0000020000D5
+:102C900000152D0000010000001D2D0000020000A5
+:102CA00000252D000001000000352D000067FE1FEB
+:102CB00000372D0000010000003F2D000001000042
+:102CC00000452D00008168AC0F472D000002000078
+:102CD000004F2D000001000000572D0000010000F2
+:102CE000005F2D000002000000672D0000010000C1
+:102CF00000772D000011000000B72D00008168ACA6
+:102D00000FCF2D000004000000EF2D000011000087
+:102D100000F72D000001000000072E0000CF00008A
+:102D2000000F2E0000CF000000172E0000CF000083
+:102D300000252E0000010000002D2E0000020000E2
+:102D400000352E0000010000003D2E0000010000B3
+:102D500000452E0000020000004D2E000001000082
+:102D600000552E0000010000006F2E000001000041
+:102D700000772E0000010000007D2E0000110000F1
+:102D8000007F2E000002000000852E0000010000E0
+:102D900000872E0000010000008F2E0000010000BF
+:102DA00000972E0000020000009F2E00000100008E
+:102DB00000AF2E000001000000B72E00000100004F
+:102DC00000BF2E000001000000C72E00000100001F
+:102DD00000CF2E000001000000D72E0000010000EF
+:102DE00000DF2E000001000000E72E0000010000BF
+:102DF00000EF2E0000110000002F2F00008168ACB2
+:102E00000F372F00000F000000772F000067FE1F14
+:102E1000008F2F000011000000972F00000100001C
+:102E200000B72F000004000000E72F0000010000A1
+:102E3000000F300000110000004F3000008168AC2E
+:102E40000F6F30000011000000773000000100001B
+:102E500000873000000100000097300000010000F2
+:102E600000A7300000FF070000B73000000100009D
+:102E700000C7300000010000003E310000040000E7
+:102E80000046310000030000007631000001000020
+:102E9000008631000001000000A5310000020000A2
+:102EA00000A63100008824712AB531000067FE1F9A
+:102EB00000B631000000C08540BE31000040000077
+:102EC00000C631000000010000CE31000000010109
+:102ED00000D631000000008002153200001500000D
+:102EE000001F320000080000002532000001000031
+:102EF0000027320000080000002D32000010000002
+:102F0000002F3200000800000037320000080000E7
+:102F1000003F3200000800000045320000010000C0
+:102F20000047320000080000004F32000008000097
+:102F30000057320000080000005F3200001100005E
+:102F4000006D320000040000007532000000040033
+:102F5000007D3200000003000085320000011000F7
+:102F6000009F3200008168AC0FA73200000004000F
+:102F700000AF32000000040000B532000002000083
+:102F800000B63200000F000000B73200000004005D
+:102F900000BF32000000040000C73200000004003F
+:102FA00000CF32000000040000D73200000004000F
+:102FB00000DF32000000040000E7320000000300E0
+:102FC00000EF32000000030000F7320000000300B1
+:102FD00000FD32000001000000FF3200000003008D
+:102FE000000533000010000000073300000003005C
+:102FF000000F330000000300001533000001000043
+:103000000016330000040000001733000000030026
+:10301000001E330000FFFF00001F3300000003000C
+:103020000026330000FFFF000027330000010000EE
+:10303000002E330000FFFF00002F3300000F0000C0
+:103040000036330000FFFF00006F33000020000057
+:103050000077330000110000007E33000001000003
+:10306000007F330000000100008F330000010000EA
+:10307000009E33000001000000A733000040000064
+:1030800000AF33000000010000B533000010000065
+:1030900000BF33000003000000CE33000001000039
+:1030A00000E633000001000000E733000067FE1F68
+:1030B0000007340000020000000F3400008168ACFB
+:1030C0000F3D3400000000803F3E3400000100004E
+:1030D00000453400000000803F463400000100003D
+:1030E000004D3400000000803F4E3400000200001C
+:1030F00000553400000000803F56340000010000FD
+:10310000005D3400000000803F5E340000010000DC
+:10311000005F340000010000006534000000008002
+:103120003F66340000020000006D340000000080A3
+:103130003F6E340000010000007534000000008084
+:103140003F7D3400000000803F7E3400001100000D
+:1031500000853400000000803F8734000004000038
+:10316000008D3400000000803F9534000000008096
+:103170003F97340000010000009D340000000080F3
+:103180003F9F34000000040000A5340000000080D0
+:103190003FA734000000030000AD340000000080B1
+:1031A0003FAF34000001100000B534000000008083
+:1031B0003FBE3400008168AC0FCF34000011000026
+:1031C00000D634000004000000F6340000110000B6
+:1031D00000FE340000010000000E350000CF0000AA
+:1031E000000F3500008168AC0F16350000CF0000DD
+:1031F00000173500000F0000001E350000CF000052
+:103200000076350000010000007E3500000100005E
+:103210000085350000100000008635000002000027
+:10322000008E35000001000000953500003F0000D1
+:103230000096350000010000009E350000020000ED
+:1032400000A635000001000000B6350000010000B6
+:1032500000BE35000001000000C63500000100007E
+:1032600000CD35000001000000CE35000001000057
+:1032700000D635000001000000D73500008168ACA1
+:103280000FDD35000001000000DE35000001000008
+:1032900000DF35000067FE1F00E63500000100007A
+:1032A00000ED35000001000000EE350000010000D7
+:1032B00000F635000011000000FF3500001100008D
+:1032C0000005360000011000001736000004000061
+:1032D0000027360000010000002F3600000100002A
+:1032E00000363600008168AC0F3E3600000F00004B
+:1032F000004F36000001000000653600001100009C
+:1033000000773600008168AC0F7E36000067FE1F34
+:103310000096360000110000009E360000010000FB
+:10332000009F36000004000000A53600000F0000DA
+:1033300000AF36000001000000B7360000010000B9
+:1033400000BE36000004000000CF3600000100007F
+:1033500000E536000011000000EE3600000100001C
+:103360000016370000110000001D370000010000AA
+:103370000025370000010000002737000001000091
+:10338000002D370000010000002F37000001000071
+:103390000035370000020000003737000001000050
+:1033A000003D370000010000003F37000001000031
+:1033B0000045370000020000004737000001000010
+:1033C000004D370000010000004F370000010000F1
+:1033D00000563700008168AC0F573700000100002D
+:1033E000005D37000067FE1F005F3700000100002E
+:1033F0000067370000110000006D3700008168ACE5
+:103400000F76370000110000007E37000001000039
+:10341000008E370000010000009E37000001000010
+:1034200000A73700008168AC0FAE370000FF07002F
+:1034300000AF3700000F000000BE370000010000A1
+:1034400000CE37000001000000EF3700001100003F
+:1034500000F7370000010000004D380000010000B7
+:1034600000553800000200000057380000DFBFE3BD
+:10347000045D380000010000005F380000DFBFE39A
+:1034800004653800000100000067380000010000FA
+:10349000006D3800000200000075380000010000D7
+:1034A000007738000000FFFF007D380000010000B9
+:1034B000007F380000010000009738000000FFFF87
+:1034C00000A538000011000000AD38000001000028
+:1034D00000DF38000001000000EF380000010000AC
+:1034E00000F738000000102030FF38000040506026
+:1034F00070073900008898A8B80F390000C8D8E8CC
+:10350000F81F3900001A00000026390000080000EA
+:10351000002E390000080000002F390000040000D0
+:103520000036390000080000003E390000080000A5
+:103530000046390000080000004E39000008000075
+:103540000056390000080000005E39000008000045
+:10355000006639000011000000A63900008168AC47
+:103560000FAE39000000040000B63900000004006E
+:1035700000BE39000000040000C63900000004004D
+:1035800000CE39000000040000D63900000004001D
+:1035900000D739000004000000DE390000000400FC
+:1035A00000DF39000004000000E6390000000400DC
+:1035B00000E739000000010203EE390000000300BB
+:1035C00000F639000000030000FE3900000003008F
+:1035D00000063A0000000300000E3A00000003005D
+:1035E000000F3A000004000000163A00000003003B
+:1035F000001E3A000000030000263A00000003000D
+:1036000000273A0000040000002E3A0000010000EC
+:10361000002F3A000004000000363A00000F0000BE
+:1036200000373A0000800000003F3A00000400002C
+:1036300000763A0000200000007E3A0000110000F1
+:1036400000863A000000010000963A0000010000E8
+:1036500000AE3A000040000000B63A000000010051
+:1036600000C63A000003000000EE3A000067FE1FAB
+:10367000000E3B000002000000163B00008168AC19
+:103680000F663B000001000000673B0000040000E3
+:10369000006F3B000080000000773B00000400004A
+:1036A000007F3B000000010203873B000003000095
+:1036B000008E3B0000040000008F3B00000400006F
+:1036C000009E3B000001000000A63B00000004003B
+:1036D00000AE3B000000030000B63B0000011000FC
+:1036E00000B73B000004000000BF3B0000030000E7
+:1036F00000CD3B000002000000D63B00001100009E
+:1037000000DD3B000067FE1F00DF3B0000040000FF
+:1037100000163C00008168AC0F1E3C00000F00004A
+:10372000003D3C0000150000004D3C000001000081
+:1037300000553C0000100000006D3C00000100003E
+:1037400000953C0000040000009D3C0000000400C7
+:1037500000A53C000000030000AD3C00000110008B
+:1037600000DD3C000002000000DE3C00008168AC8F
+:103770000FE63C000067FE1F00063D000011000040
+:10378000001E3D000004000000253D000001000077
+:10379000002D3D0000100000002E3D000001000043
+:1037A00000363D0000010000003D3D00000100002A
+:1037B00000563D0000010000007E3D00008168AC25
+:1037C0000FA63D000004000000B63D00000100000F
+:1037D00000BE3D000001000000D63D0000010000D9
+:1037E00000DD3D0000100000002E3E000001000042
+:1037F00000363E0000010000003E3E0000010000D7
+:1038000000463E0000010000004E3E0000010000A6
+:1038100000563E0000010000005E3E000001000076
+:1038200000653E00000000803F663E000001000091
+:10383000006D3E00000000803F6E3E000011000061
+:1038400000753E00000000803F7D3E0000000080CB
+:103850003F853E00000000803F8D3E00000000805C
+:103860003F953E00000000803F9D3E00000000802C
+:103870003FA53E00000000803FAD3E0000000080FC
+:103880003FAE3E00008168AC0FB53E0000000080F6
+:103890003FB63E00000F000000BD3E00000000806B
+:1038A0003FC53E00000000803FCD3E00000000808C
+:1038B0003FD53E00000000803FDD3E00000000805C
+:1038C0003FF63E000011000000FE3E000001000037
+:1038D000005E3F0000DFBFE304663F0000DFBFE3A0
+:1038E000046E3F0000010000007E3F000000FFFF6B
+:1038F00000863F0000010000009E3F000000FFFF27
+:1039000000AD3F000010000000BD3F00003F000080
+:1039100000E63F000001000000F53F00000100004C
+:1039200000F63F000001000000FE3F0000001020F4
+:1039300030054000000100000006400000405060DB
+:10394000700E4000008898A8B815400000010000E3
+:103950000016400000C8D8E8F8264000001A000011
+:10396000002D40000001100000364000000400005F
+:10397000008D40000011000000CD4000000F00004D
+:1039800000DE40000004000000E6400000040000EB
+:1039900000EE400000000102030D41000011000094
+:1039A0000016410000040000002E41000004000049
+:1039B0000036410000040000003E4100008000008D
+:1039C00000454100000100000046410000040000E5
+:1039D000004D4100000100000055410000010000C1
+:1039E000005D410000020000006541000001000090
+:1039F000006D410000020000007541000001000060
+:103A0000008541000067FE1F00954100008168AC01
+:103A10000F6E42000004000000754200000100002B
+:103A20000076420000800000007D4200000200009D
+:103A3000007E4200000400000085420000010000FA
+:103A40000086420000000102038D420000010000D8
+:103A5000008E4200000300000095420000020000BA
+:103A60000096420000040000009D4200000100009A
+:103A700000A542000001000000BE4200000400005A
+:103A800000C642000003000000CD4200001100000B
+:103A900000D542000001000000E6420000040000E2
+:103AA00000F5450000020000000546000067FE1F0B
+:103AB000006546000015000000754600000100008A
+:103AC000007D460000100000009546000001000047
+:103AD00000BD46000004000000C5460000000400D0
+:103AE00000CD46000000030000D546000001100094
+:103AF0000005470000020000004D470000010000E3
+:103B0000005547000010000000654700000100005C
+:103B10000005480000100000008D480000000080F3
+:103B20003F954800000000803F9D48000000008055
+:103B30003FA54800000000803FAD48000000008025
+:103B40003FB54800000000803FBD480000000080F5
+:103B50003FC54800000000803FCD480000000080C5
+:103B60003FD54800000000803FDD48000000008095
+:103B70003FE54800000000803FED48000000008065
+:103B80003FF54800000000803FFD48000000008035
+:103B90003F054900000000803FD5490000100000AB
+:103BA00000E54900003F0000001D4A000001000040
+:103BB000002D4A0000010000003D4A000001000005
+:103BC00000554A000001100000B54A000011000035
+:103BD00000F54A00000F000000354B000011000006
+:103BE000006D4B000001000000754B00000100005B
+:103BF000007D4B000001000000854B00000200002A
+:103C0000008D4B000001000000954B0000020000F9
+:103C1000009D4B000001000000AD4B000067FE1F3F
+:103C200000BD4B00008168AC0F874C000004000011
+:103C3000008F4C0000030000009D4C0000010000BC
+:103C400000A54C000002000000AD4C000001000087
+:103C500000B54C000001000000BD4C000002000057
+:103C600000BF4C000001000000C54C000001000036
+:103C700000CD4C000001000000CF4C00000100000E
+:103C800000EF4C00008824712AF54C000011000060
+:103C900000FD4C000001000000FF4C000000C0854A
+:103CA00040074D0000400000000F4D0000000100E3
+:103CB00000174D0000000101001F4D0000000080B2
+:103CC00002FF4D00000F0000005F4E0000040000E6
+:103CD00000674E0000FFFF00006F4E0000FFFF0076
+:103CE00000774E0000FFFF00007F4E0000FFFF0046
+:103CF00000C74E000001000000E74E000001000078
+:103D000000174F0000010000002F4F0000010000CD
+:103D100000874F0000010000008F4F0000010000ED
+:103D200000974F0000020000009F4F0000010000BC
+:103D300000A74F000001000000AF4F00000200008C
+:103D400000B74F000001000000C74F000011000045
+:103D500000075000008168AC0F1D500000020000F9
+:103D6000001F500000040000002D50000067FE1FDF
+:103D7000003F50000011000000475000000100000B
+:103D80000057500000CF0000005F500000CF00003F
+:103D90000067500000CF0000008D500000150000AB
+:103DA000009D50000001000000A550000010000020
+:103DB00000BD50000001000000BF500000010000E5
+:103DC00000C750000001000000CF500000020000BA
+:103DD00000D750000001000000DF5000000100008B
+:103DE00000E550000004000000E750000002000061
+:103DF00000ED50000000040000EF50000001000042
+:103E000000F550000000030000FD5000000110000C
+:103E100000FF5000000100000007510000010000F9
+:103E2000000F5100000100000017510000010000C8
+:103E3000001F510000010000002751000001000098
+:103E4000002D510000020000002F51000001000071
+:103E50000037510000010000003F51000011000038
+:103E60000075510000010000007D510000100000AD
+:103E7000007F5100008168AC0F875100000F0000E7
+:103E8000008D51000001000000C751000067FE1FB7
+:103E900000DF51000011000000E7510000010000A8
+:103EA0000007520000040000002D52000010000026
+:103EB0000037520000010000005F520000110000B6
+:103EC000009F5200008168AC0FB5520000000080D6
+:103ED0003FBD5200000000803FBF520000110000B3
+:103EE00000C55200000000803FC7520000010000E2
+:103EF00000CD5200000000803FD55200000000803D
+:103F00003FD752000001000000DD52000000008099
+:103F10003FE55200000000803FE752000001000032
+:103F200000ED5200000000803FF5520000000080CC
+:103F30003FF7520000FF070000FD52000000008024
+:103F40003F055300000000803F07530000010000C0
+:103F5000000D5300000000803F155300000000805A
+:103F60003F17530000010000001D530000000080B7
+:103F70003F255300000000803F2D530000000080CB
+:103F80003F8E530000040000009653000003000021
+:103F900000C653000001000000D6530000010000DD
+:103FA00000F65300008824712AFD53000010000021
+:103FB000000654000000C085400D5400003F000082
+:103FC000000E5400004000000016540000000100E4
+:103FD000001E540000000101002654000000008073
+:103FE000024554000001000000555400000100008B
+:103FF0000065540000010000006F5400000800003C
+:104000000077540000080000007D540000011000FB
+:10401000007F5400000800000087540000080000E2
+:10402000008F5400000800000097540000080000B2
+:10403000009F54000008000000A754000008000082
+:1040400000AF54000011000000DD5400001100001A
+:1040500000EF5400008168AC0FF75400000004002A
+:1040600000FF54000000040000065500000F00008F
+:104070000007550000000400000F55000000040078
+:104080000017550000000400001D5500000F00003F
+:10409000001F550000000400002755000000040028
+:1040A000002F5500000004000037550000000300F9
+:1040B000003F5500000003000047550000000300CA
+:1040C000004F55000000030000575500000003009A
+:1040D000005D550000110000005F55000000030066
+:1040E0000066550000040000006755000000030052
+:1040F000006E550000FFFF00006F55000000030038
+:104100000076550000FFFF00007755000001000019
+:10411000007E550000FFFF00007F5500000F0000EB
+:104120000086550000FFFF000095550000010000CB
+:10413000009D55000001000000A555000001000091
+:1041400000AD55000002000000B555000001000060
+:1041500000BD55000002000000BF55000020000017
+:1041600000C555000001000000C755000011000007
+:1041700000CE55000001000000CF550000000100F6
+:1041800000D555000067FE1F00DF5500000100004C
+:1041900000E55500008168AC0FEE550000010000FD
+:1041A00000F755000040000000FF5500000001002E
+:1041B000000F560000030000001E56000001000022
+:1041C0000036560000010000003756000067FE1F51
+:1041D0000057560000020000005F5600008168ACE6
+:1041E0000F8E5600000100000096560000010000EE
+:1041F000009E56000002000000A6560000010000CC
+:1042000000AE56000001000000AF560000010000A3
+:1042100000B656000002000000BE5600000100007B
+:1042200000C556000001000000CD5600000200004D
+:1042300000CE56000011000000D55600000100001D
+:1042400000D756000004000000DD56000001000009
+:1042500000E556000002000000E7560000010000E3
+:1042600000ED56000001000000EF560000000400C1
+:1042700000F556000001000000F7560000000300A2
+:1042800000FF560000011000000E5700008168ACCE
+:104290000F1D570000110000001F57000011000003
+:1042A0000025570000010000002657000004000010
+:1042B0000046570000110000004E570000010000AA
+:1042C000005E570000CF0000005F5700008168AC1F
+:1042D0000F66570000CF000000675700000F000076
+:1042E000006E570000CF000000C65700000100001C
+:1042F00000CE57000001000000D657000002000069
+:1043000000DE57000001000000E657000001000039
+:1043100000EE57000002000000F657000001000008
+:104320000006580000010000000E580000010000C7
+:104330000016580000010000001E58000001000097
+:10434000002658000001000000275800008168ACDA
+:104350000F2E580000010000002F58000067FE1FBC
+:104360000036580000010000003E58000001000027
+:104370000046580000110000004F580000110000D6
+:10438000006758000004000000775800000100009A
+:10439000007F58000001000000865800008168ACD2
+:1043A0000F8E5800000F0000009F58000001000011
+:1043B00000C75800008168AC0FCE58000067FE1F90
+:1043C00000E658000011000000EE58000001000057
+:1043D00000EF58000004000000FF5800000100003A
+:1043E0000007590000010000000E59000004000001
+:1043F000001F590000010000003E590000010000AC
+:10440000006659000011000000775900000100000B
+:10441000007F5900000100000087590000010000E2
+:10442000008F5900000100000097590000010000B2
+:10443000009F59000001000000A65900008168ACEF
+:104440000FA759000001000000AF59000001000053
+:1044500000B759000011000000C65900001100000B
+:1044600000CE59000001000000DE590000010000EC
+:1044700000EE59000001000000F75900008168AC0F
+:104480000FFE590000FF070000FF5900000F000059
+:10449000000E5A0000010000001E5A00000100003A
+:1044A000003F5A000011000000475A0000010000C0
+:1044B00000A75A0000DFBFE304AF5A0000DFBFE3EC
+:1044C00004B75A000001000000C75A000000FFFFB7
+:1044D00000CF5A000001000000E75A000000FFFF73
+:1044E000002F5B0000010000003F5B0000010000A6
+:1044F00000475B0000001020304F5B000040506020
+:1045000070575B00008898A8B85F5B0000C8D8E8C7
+:10451000F86F5B00001A000000765B0000080000E6
+:10452000007E5B0000080000007F5B0000040000CC
+:1045300000865B0000080000008E5B0000080000A1
+:1045400000965B0000080000009E5B000008000071
+:1045500000A65B000008000000AE5B000008000041
+:1045600000B65B000011000000F65B00008168AC43
+:104570000FFE5B000000040000045C0000FFFF3F32
+:1045800000065C0000000400000E5C000000040057
+:1045900000165C0000000400001C5C0000FF1F000F
+:1045A000001E5C000000040000265C000000040007
+:1045B00000275C0000040000002E5C0000000400E6
+:1045C000002F5C000004000000365C0000000400C6
+:1045D00000375C0000000102033E5C0000000300A5
+:1045E00000465C0000000300004E5C000000030079
+:1045F00000565C0000000300005E5C000000030049
+:10460000005F5C000004000000665C000000030026
+:10461000006E5C000000030000765C0000000300F8
+:1046200000775C0000040000007E5C0000010000D8
+:10463000007F5C000004000000865C00000F0000AA
+:1046400000875C0000800000008F5C000004000018
+:1046500000C65C000020000000CE5C0000110000DD
+:1046600000D65C000000010000E65C0000010000D4
+:1046700000FE5C000040000000065D00000001003C
+:1046800000165D0000030000003E5D000067FE1F95
+:10469000005E5D000002000000665D00008168AC05
+:1046A0000FB65D000001000000B75D0000040000CF
+:1046B00000BF5D000080000000C75D000004000036
+:1046C00000CF5D000000010203D75D000003000081
+:1046D00000DE5D000004000000DF5D00000400005B
+:1046E00000EE5D000001000000F65D000000040027
+:1046F00000FE5D000000030000065E0000011000E7
+:1047000000075E0000040000000F5E0000030000D0
+:1047100000265E0000110000002F5E000004000073
+:1047200000665E00008168AC0F6E5E00000F000046
+:10473000002E5F00008168AC0F365F000067FE1F2F
+:1047400000565F0000110000006E5F0000040000D2
+:10475000007E5F000001000000865F000001000095
+:1047600000A65F000001000000CE5F00008168AC81
+:104770000FF65F000004000000066000000100006A
+:10478000000E600000010000002660000001000033
+:10479000007E600000010000008660000001000053
+:1047A000008E600000010000009660000001000023
+:1047B000009E60000001000000A6600000010000F3
+:1047C00000AE60000001000000B6600000010000C3
+:1047D00000BE60000011000000FE6000008168ACB7
+:1047E0000F066100000F000000466100001100008C
+:1047F000004E61000001000000AE610000DFBFE379
+:1048000004B6610000DFBFE304BE610000010000E8
+:1048100000CE61000000FFFF00D661000001000033
+:1048200000EE61000000FFFF0036620000010000A2
+:104830000046620000010000004E620000001020EF
+:104840003056620000405060705E6200008898A898
+:10485000B866620000C8D8E8F8766200001A000066
+:104860000086620000040000002E630000040000C7
+:104870000036630000040000003E630000000102F7
+:104880000366630000040000007E63000004000073
+:104890000086630000040000008E630000800000BA
+:1048A000009663000004000000BE640000040000E5
+:1048B00000C664000080000000CE64000004000018
+:1048C00000D664000000010203DE64000003000063
+:1048D00000E6640000040000000E65000004000013
+:1048E00000166500000300000036650000040000AB
+:1048F00000D76E000004000000DF6E00000300001F
+:10490000000F6F0000010000001F6F000001000099
+:10491000003F6F00008824712A4F6F000000C0859F
+:1049200040576F0000400000005F6F000000010072
+:1049300000676F0000000101006F6F000000008041
+:1049400002706F000000000004786F00000000009B
+:1049500004806F000000000004886F000000000069
+:1049600004906F000000000004986F000000000039
+:1049700004A06F000000000004A86F000000000009
+:1049800004B06F000000000004B86F0000000000D9
+:1049900004C06F000000000004C86F0000000000A9
+:1049A00004D06F000000000004D86F000000000079
+:1049B00004E06F000000000004E86F000000000049
+:1049C000044F7000000F000000AF700000040000F2
+:1049D00000B7700000FFFF0000BF700000FFFF0085
+:1049E00000C7700000FFFF0000CF700000FFFF0055
+:1049F0000010710000DFBFE3041771000001000028
+:104A00000018710000DFBFE3043071000021FE01D7
+:104A1000003771000001000000387100008168ACAF
+:104A20000F60710000120C10086771000001000097
+:104A3000007F71000001000000887100000001008B
+:104A400000A071000001000100B071000001000130
+:104A500000B871000001000000C0710000010001F9
+:104A600000C871000001000000D0710000040000C7
+:104A700000D771000001000000D8710000020000A2
+:104A800000DF71000001000000E77100000200007B
+:104A900000EF71000001000000F77100000100004C
+:104AA00000FF71000002000000077200000100001A
+:104AB000001772000011000000577200008168ACFE
+:104AC0000F6F720000040000008F720000110000E0
+:104AD000009772000001000000A7720000CF0000E4
+:104AE00000AF720000CF000000B7720000CF0000DE
+:104AF000000F7300000100000017730000010000A8
+:104B0000001F730000020000002773000001000076
+:104B1000002F730000010000003773000002000046
+:104B2000003F730000010000004F7300000100000F
+:104B30000057730000010000005F730000010000D7
+:104B40000067730000010000006F730000010000A7
+:104B50000077730000010000007F73000001000077
+:104B60000087730000010000008F73000011000037
+:104B700000CF7300008168AC0FD77300000F0000F6
+:104B8000001774000067FE1F002F74000011000062
+:104B9000003774000001000000577400000400009A
+:104BA000008774000001000000AF740000110000D5
+:104BB00000EF7400008168AC0F0F75000011000059
+:104BC00000177500000100000027750000010000BB
+:104BD00000377500000100000047750000FF070066
+:104BE000005775000001000000677500000100001B
+:104BF00000DE75000004000000E675000003000000
+:104C0000001676000001000000267600000100007A
+:104C100000467600008824712A5676000000C08580
+:104C2000405E760000400000006676000000010053
+:104C3000006E760000000101007676000000008022
+:104C400002BF76000008000000C7760000080000E0
+:104C500000CF76000008000000D7760000080000B2
+:104C600000DF76000008000000E776000008000082
+:104C700000EF76000008000000F776000008000052
+:104C800000FF760000110000003F7700008168AC53
+:104C90000F47770000000400004F77000000040079
+:104CA00000567700000F0000005777000000040056
+:104CB000005F770000000400006777000000040038
+:104CC000006F770000000400007777000000040008
+:104CD000007F7700000004000087770000000300D9
+:104CE000008F7700000003000097770000000300AA
+:104CF000009F77000000030000A77700000003007A
+:104D000000AF77000000030000B677000004000049
+:104D100000B777000000030000BE770000FFFF002F
+:104D200000BF77000000030000C6770000FFFF000F
+:104D300000C777000001000000CE770000FFFF00F1
+:104D400000CF7700000F000000D6770000FFFF00C3
+:104D5000000F78000020000000177800001100000C
+:104D6000001E780000010000001F78000000010014
+:104D7000002F780000010000003E780000010000D4
+:104D80000047780000400000004F7800000001005C
+:104D9000005F780000030000006E78000001000052
+:104DA0000086780000010000008778000067FE1F81
+:104DB00000A778000002000000AF7800008168AC16
+:104DC0000FDE78000001000000E67800000100001E
+:104DD00000EE78000002000000F6780000010000FC
+:104DE00000FE78000001000000FF780000010000D4
+:104DF0000006790000020000000E790000010000AA
+:104E0000001E790000110000002779000004000056
+:104E10000037790000010000003F79000000040025
+:104E20000047790000000300004F790000011000E6
+:104E3000005E7900008168AC0F6F790000110000FE
+:104E4000007679000004000000967900001100004F
+:104E5000009E79000001000000AE790000CF000044
+:104E600000AF7900008168AC0FB6790000CF000078
+:104E700000B77900000F000000BE790000CF0000ED
+:104E800000167A0000010000001E7A0000010000F8
+:104E900000267A0000020000002E7A0000010000C7
+:104EA00000367A0000010000003E7A000002000097
+:104EB00000467A000001000000567A000001000060
+:104EC000005E7A000001000000667A000001000028
+:104ED000006E7A000001000000767A0000010000F8
+:104EE00000777A00008168AC0F7E7A000001000034
+:104EF000007F7A000067FE1F00867A000001000034
+:104F0000008E7A000001000000967A000011000077
+:104F1000009F7A000011000000B77A000004000032
+:104F200000C77A000001000000CF7A0000010000F5
+:104F300000D67A00008168AC0FDE7A00000F000016
+:104F400000EF7A000001000000177B00008168ACD0
+:104F50000F1E7B000067FE1F00367B000011000063
+:104F6000003E7B0000010000003F7B0000040000C9
+:104F7000004F7B000001000000577B000001000093
+:104F8000005E7B0000040000006F7B000001000059
+:104F9000008E7B000001000000B67B0000110000C5
+:104FA00000C77B000001000000CF7B000001000073
+:104FB00000D77B000001000000DF7B000001000043
+:104FC00000E77B000001000000EF7B000001000013
+:104FD00000F67B00008168AC0FF77B000001000049
+:104FE00000FF7B000001000000077C0000110000B2
+:104FF00000167C0000110000001E7C000001000073
+:10500000002E7C0000010000003E7C00000100003A
+:1050100000477C00008168AC0F4E7C0000FF070059
+:10502000004F7C00000F0000005E7C0000010000CB
+:10503000006E7C0000010000008F7C000011000069
+:1050400000977C000001000000F77C0000DFBFE358
+:1050500004FF7C0000DFBFE304077D0000010000C7
+:1050600000177D000000FFFF001F7D000001000011
+:1050700000377D000000FFFF007F7D000001000081
+:10508000008F7D000001000000977D0000001020CF
+:10509000309F7D000040506070A77D00008898A878
+:1050A000B8AF7D0000C8D8E8F8BF7D00001A000046
+:1050B00000C67D000008000000CE7D000008000052
+:1050C00000CF7D000004000000D67D000008000035
+:1050D00000DE7D000008000000E67D000008000002
+:1050E00000EE7D000008000000F67D0000080000D2
+:1050F00000FE7D000008000000067E000011000098
+:1051000000287E00000000803F467E00008168ACE1
+:105110000F4E7E000000040000567E0000000400D8
+:10512000005E7E000000040000607E0000040000BD
+:1051300000667E000000040000687E00001A000087
+:10514000006E7E000000040000767E000000040077
+:1051500000777E0000040000007E7E000000040056
+:10516000007F7E000004000000807E00000100003F
+:1051700000867E000000040000877E00000001021F
+:10518000038E7E000000030000967E0000000300F6
+:10519000009E7E000000030000A67E0000000300C9
+:1051A00000AE7E000000030000AF7E00000400009F
+:1051B00000B67E000000030000BE7E000000030079
+:1051C00000C67E000000030000C77E00000400004F
+:1051D00000CE7E000001000000CF7E000004000031
+:1051E00000D67E00000F000000D77E000080000087
+:1051F00000DF7E000004000000167F000020000099
+:1052000000187F000000FFFF001E7F00001100005B
+:1052100000267F000000010000367F000001000032
+:10522000004E7F000040000000507F00000F000093
+:1052300000567F000000010000667F0000030000B0
+:10524000008E7F000067FE1F00907F00008168AC29
+:105250000F987F000011000000AE7F0000020000E8
+:1052600000B67F00008168AC0F06800000010000DE
+:105270000007800000040000000F80000080000094
+:1052800000178000000400000018800000040000E7
+:10529000001F8000000001020327800000030000BF
+:1052A000002E800000040000002F80000004000099
+:1052B0000030800000010000003E8000000100007E
+:1052C000004680000000040000488000000200004A
+:1052D000004E80000000030000508000000000002D
+:1052E00004568000000110000057800000040000F8
+:1052F0000058800000000000045F800000030000F0
+:105300000076800000110000007880000005000099
+:10531000007F800000040000008080000052000038
+:1053200000A880000001000000B68000008168AC89
+:105330000FBE8000000F00000030810000000080E0
+:105340003F388100000000803F4081000000008065
+:105350003F488100000000803F5081000000008035
+:105360003F588100000000803F6081000000008005
+:105370003F688100000000803F70810000000080D5
+:105380003F788100000000803F7E8100008168AC92
+:105390000F808100000000803F8681000067FE1FB3
+:1053A00000888100000000803F90810000000080A4
+:1053B0003F988100000000803FA081000000008035
+:1053C0003FA681000011000000A8810000000080BD
+:1053D0003FB081000010000000BE8100000400000A
+:1053E00000CE81000001000000D681000001000015
+:1053F00000F6810000010000001E8200008168AC00
+:105400000F468200000400000056820000010000E8
+:10541000005E8200000100000076820000010000B2
+:1054200000CE82000001000000D6820000010000D2
+:1054300000DE82000001000000E6820000010000A2
+:1054400000E8820000120C1008EE8200000100004B
+:1054500000F082000005000000F68200000100005C
+:1054600000FE820000010000000683000001000031
+:105470000008830000010000000E830000110000FE
+:105480000018830000FFFF000020830000FFFF00E2
+:105490000028830000FFFF000030830000FFFF00B2
+:1054A0000038830000030000004E8300008168ACD8
+:1054B0000F568300000F0000005883000000FFFF1C
+:1054C00000608300001A00000070830000030000E9
+:1054D0000096830000110000009E83000001000080
+:1054E00000FE830000DFBFE30406840000DFBFE3AB
+:1054F000040E840000010000001E84000000FFFF75
+:105500000026840000010000003E84000000FFFF30
+:105510000086840000010000009684000001000065
+:10552000009E84000000102030A6840000405060DF
+:1055300070AE8400008898A8B8B6840000C8D8E887
+:10554000F8C68400001A000000D6840000040000A1
+:10555000005885000002010000688500000400007A
+:105560000070850000040000007885000004000041
+:10557000007E85000004000000808500000400001B
+:105580000086850000040000008E850000000102F6
+:1055900003B685000004000000C885000004000078
+:1055A00000CE85000004000000D08500000400004B
+:1055B00000D685000004000000DE850000800000A9
+:1055C00000E0850000FF070000E685000004000001
+:1055D00000F0850000020100004086000004000089
+:1055E000004886000004000000508600000400000F
+:1055F0000058860000040000000E87000004000030
+:105600000016870000800000001E870000040000D4
+:105610000026870000000102032E8700000300001F
+:105620000036870000040000005E870000040000D0
+:105630000066870000030000008687000004000069
+:105640000027910000040000002F910000030000DB
+:10565000005F910000010000006F91000001000058
+:10566000008F9100008824712A9F91000000C0855E
+:1056700040A791000040000000AF91000000010031
+:1056800000B791000000010100BF91000000008000
+:10569000029F9200000F000000FF92000004000033
+:1056A0000007930000FFFF00000F930000FFFF00C2
+:1056B0000017930000FFFF00001F930000FFFF0092
+:1056C00000679300000100000087930000010000C4
+:1056D00000B793000001000000CF9300000100001C
+:1056E0000027940000010000002F9400000100003A
+:1056F0000037940000020000003F94000001000009
+:105700000047940000010000004F940000020000D8
+:105710000057940000010000006794000011000091
+:1057200000A79400008168AC0FBF94000004000043
+:1057300000DF94000011000000E794000001000069
+:1057400000F7940000CF000000FF940000CF00009D
+:105750000007950000CF0000005F950000010000E9
+:105760000067950000010000006F95000002000036
+:105770000077950000010000007F95000001000007
+:105780000087950000020000008F950000010000D6
+:10579000009F95000001000000A795000001000097
+:1057A00000AF95000001000000B795000001000067
+:1057B00000BF95000001000000C795000001000037
+:1057C00000CF95000001000000D795000001000007
+:1057D00000DF950000110000001F9600008168ACFA
+:1057E0000F279600000F0000006796000067FE1F5D
+:1057F000007F960000110000008796000001000065
+:1058000000A796000004000000D7960000010000E9
+:1058100000FF960000110000003F9700008168AC77
+:105820000F5F970000110000006797000001000063
+:10583000007797000001000000879700000100003A
+:105840000097970000FF070000A7970000010000E5
+:1058500000B7970000010000002E9800000400002F
+:105860000036980000030000000F990000080000B7
+:105870000017990000080000001F990000080000B0
+:105880000027990000080000002F99000008000080
+:105890000037990000080000003F99000008000050
+:1058A0000047990000080000004F99000011000017
+:1058B000008F9900008168AC0F97990000000400E8
+:1058C000009F99000000040000A799000000040058
+:1058D00000AF99000000040000B799000000040028
+:1058E00000BF99000000040000C7990000000400F8
+:1058F00000CF99000000040000D7990000000300C9
+:1059000000DF99000000030000E799000000030099
+:1059100000EF99000000030000F799000000030069
+:1059200000FF99000000030000079A000000030038
+:10593000000F9A000000030000179A000001000009
+:10594000001F9A00000F0000005F9A000020000076
+:1059500000679A0000110000006F9A00000001002B
+:10596000007F9A000001000000979A0000400000AC
+:10597000009F9A000000010000AF9A0000030000A1
+:1059800000D79A000067FE1F00F79A00000200008F
+:1059900000FF9A00008168AC0F4F9B0000010000DF
+:1059A00000779B000004000000879B0000010000BE
+:1059B000008F9B000000040000979B000000030084
+:1059C000009F9B000001100000BF9B000011000021
+:1059D00000FF9B00008168AC0F079C00000F0000D7
+:1059E00000C79C00008168AC0FCF9C000067FE1FC1
+:1059F00000EF9C000011000000079D000004000063
+:105A000000179D0000010000001F9D000001000024
+:105A1000003F9D000001000000679D00008168AC10
+:105A20000F8F9D0000040000009F9D0000010000FA
+:105A300000A79D000001000000BF9D0000010000C4
+:105A400000179E0000010000001F9E0000010000E2
+:105A500000279E0000010000002F9E0000010000B2
+:105A600000379E0000010000003F9E000001000082
+:105A700000479E0000010000004F9E000001000052
+:105A800000579E000011000000979E00008168AC46
+:105A90000F9F9E00000F000000DF9E00001100001D
+:105AA00000E79E000001000000479F0000DFBFE309
+:105AB000044F9F0000DFBFE304579F000001000078
+:105AC00000679F000000FFFF006F9F0000010000C3
+:105AD00000879F000000FFFF00CF9F000001000033
+:105AE00000DF9F000001000000E79F000000102081
+:105AF00030EF9F000040506070F79F00008898A82A
+:105B0000B8FF9F0000C8D8E8F80FA000001A0000F6
+:105B1000001FA0000004000000C7A0000004000057
+:105B200000CFA0000004000000D7A0000000010288
+:105B300003FFA000000400000017A1000004000003
+:105B4000001FA100000400000027A1000080000049
+:105B5000002FA100000400000057A2000004000074
+:105B6000005FA200008000000067A20000040000A7
+:105B7000006FA200000001020377A20000030000F2
+:105B8000007FA2000004000000A7A20000040000A3
+:105B900000AFA2000003000000CFA200000400003C
+:105BA0000077B30000040000007FB3000003000092
+:105BB00000AFB3000001000000BFB300000100000F
+:105BC00000DFB300008824712AEFB3000000C08515
+:105BD00040F7B3000040000000FFB30000000100E8
+:105BE0000007B40000000101000FB40000000080B5
+:105BF00002EFB400000F0000004FB50000040000E9
+:105C00000057B50000FFFF00005FB50000FFFF0078
+:105C10000067B50000FFFF00006FB50000FFFF0048
+:105C200000B7B5000001000000D7B500000100007A
+:105C30000007B60000010000001FB60000010000D0
+:105C40000077B60000010000007FB60000010000F0
+:105C50000087B60000020000008FB60000010000BF
+:105C60000097B60000010000009FB600000200008F
+:105C700000A7B6000001000000B7B6000011000048
+:105C800000F7B600008168AC0F0FB70000040000F9
+:105C9000002FB700001100000037B700000100001E
+:105CA0000047B70000CF0000004FB70000CF000052
+:105CB0000057B70000CF000000AFB70000010000A0
+:105CC00000B7B7000001000000BFB70000020000ED
+:105CD00000C7B7000001000000CFB70000010000BE
+:105CE00000D7B7000002000000DFB700000100008D
+:105CF00000EFB7000001000000F7B700000100004E
+:105D000000FFB700000100000007B800000100001C
+:105D1000000FB800000100000017B80000010000EB
+:105D2000001FB800000100000027B80000010000BB
+:105D3000002FB80000110000006FB800008168ACAF
+:105D40000F77B800000F000000B7B8000067FE1F13
+:105D500000CFB8000011000000D7B800000100001B
+:105D600000F7B800000400000027B900000100009F
+:105D7000004FB90000110000008FB900008168AC2D
+:105D80000FAFB9000011000000B7B900000100001A
+:105D900000C7B9000001000000D7B90000010000F1
+:105DA00000E7B90000FF070000F7B900000100009C
+:105DB0000007BA0000010000005FBB0000080000FF
+:105DC0000067BB0000080000006FBB000008000077
+:105DD0000077BB0000080000007FBB000008000047
+:105DE0000087BB0000080000008FBB000008000017
+:105DF0000097BB0000080000009FBB0000110000DE
+:105E000000DFBB00008168AC0FE7BB0000000400AE
+:105E100000EFBB000000040000F7BB00000004001E
+:105E200000FFBB00000004000007BC0000000400ED
+:105E3000000FBC00000004000017BC0000000400BC
+:105E4000001FBC00000004000027BC00000003008D
+:105E5000002FBC00000003000037BC00000003005E
+:105E6000003FBC00000003000047BC00000003002E
+:105E7000004FBC00000003000057BC0000000300FE
+:105E8000005FBC00000003000067BC0000010000D0
+:105E9000006FBC00000F000000AFBC00002000003D
+:105EA00000B7BC000011000000BFBC0000000100F2
+:105EB00000CFBC000001000000E7BC000040000073
+:105EC00000EFBC000000010000FFBC000003000068
+:105ED0000027BD000067FE1F0047BD000002000054
+:105EE000004FBD00008168AC0F9FBD0000010000A5
+:105EF00000C7BD000004000000D7BD000001000085
+:105F000000DFBD000000040000E7BD00000003004A
+:105F100000EFBD0000011000000FBE0000110000E6
+:105F2000004FBE00008168AC0F57BE00000F00009C
+:105F30000017BF00008168AC0F1FBF000067FE1F85
+:105F4000003FBF00001100000057BF000004000028
+:105F50000067BF0000010000006FBF0000010000EB
+:105F6000008FBF000001000000B7BF00008168ACD7
+:105F70000FDFBF000004000000EFBF0000010000C1
+:105F800000F7BF0000010000000FC000000100008A
+:105F90000067C00000010000006FC00000010000A9
+:105FA0000077C00000010000007FC0000001000079
+:105FB0000087C00000010000008FC0000001000049
+:105FC0000097C00000010000009FC0000001000019
+:105FD00000A7C0000011000000E7C000008168AC0D
+:105FE0000FEFC000000F0000002FC10000110000E3
+:105FF0000037C100000100000097C10000DFBFE3CF
+:10600000049FC10000DFBFE304A7C100000100003E
+:1060100000B7C1000000FFFF00BFC1000001000089
+:1060200000D7C1000000FFFF001FC20000010000F8
+:10603000002FC200000100000037C2000000102045
+:10604000303FC200004050607047C200008898A8EE
+:10605000B84FC20000C8D8E8F85FC200001A0000BC
+:10606000006FC200000400000017C300000400001D
+:10607000001FC300000400000027C300000001024D
+:10608000034FC300000400000067C30000040000C9
+:10609000006FC300000400000077C3000080000010
+:1060A000007FC3000004000000A7C400000400003B
+:1060B00000AFC4000080000000B7C400000400006E
+:1060C00000BFC4000000010203C7C40000030000B9
+:1060D00000CFC4000004000000F7C400000400006A
+:1060E00000FFC40000030000001FC5000004000002
+:1060F00000C7D5000004000000CFD5000003000059
+:106100000093D900000F000000FAF3000004000023
+:106110000002F40000040000000AF40000120C1059
+:106120000812F400000300000022F40000120C101A
+:106130000832F40000140C08003AF40000010000DA
+:106140000042F40000040000004AF40000040000D3
+:106150000052F40000140C08006AF40000120C1045
+:106160000872F40000270000008AF400000100001B
+:1061700000510A010004000000590A010004000057
+:1061800000690A010080000000710A01000400009B
+:1061900000790A010001000000890A0100270000BF
+:1061A00000990A0100260000009A12010001000077
+:1061B0000052130100120C100880130100120C1081
+:1061C0000889130100800000008A1301008000008C
+:1061D000008B13010080000000901301008000007C
+:1061E00000911301000470008092130100047000FC
+:1061F0008093130100047000809813010004700064
+:106200008099130100000400049A130100000400A7
+:10621000049B13010000040004A01301000004000B
+:1062200004A1130100C0000000A2130100C000007F
+:1062300000A3130100C0000000A8130100C000006B
+:1062400000A913010000100000AA130100001000B3
+:1062500000AB13010000100000B01301000010009B
+:1062600000C113010001000000C213010001000081
+:1062700000C313010001000000C813010001000069
+:1062800000D913010001000000DA13010001000031
+:1062900000DB13010001000000E013010001000019
+:1062A00000E913010004000000EA130100040000EB
+:1062B00000EB13010004000000F0130100040000D3
+:1062C00000F113010002000000F2130100020000BF
+:1062D00000F313010002000000F8130100020000A7
+:1062E00000611401008000000062140100800000C1
+:1062F00000631401008000000068140100800000A9
+:106300000069140100047000806A14010004700028
+:10631000806B140100047000807014010004700090
+:1063200080711401000004000472140100000400D4
+:106330000473140100000400047814010000040038
+:106340000479140100C00000007A140100C00000AC
+:10635000007B140100C000000080140100C0000098
+:1063600000811401000010000082140100001000E0
+:1063700000831401000010000088140100001000C8
+:106380000099140100010000009A140100010000AE
+:10639000009B14010001000000A014010001000096
+:1063A00000B114010001000000B21401000100005E
+:1063B00000B314010001000000B814010001000046
+:1063C00000C114010004000000C214010004000018
+:1063D00000C314010004000000C814010004000000
+:1063E00000C914010002000000CA140100020000EC
+:1063F00000CB14010002000000D0140100020000D4
+:106400000039150100800000003A150100800000ED
+:10641000003B1501008000000040150100800000D5
+:106420000041150100047000804215010004700055
+:1064300080431501000470008048150100047000BD
+:106440008049150100000400044A15010000040001
+:10645000044B150100000400045015010000040065
+:106460000451150100C000000052150100C00000D9
+:106470000053150100C000000058150100C00000C5
+:106480000059150100001000005A1501000010000D
+:10649000005B1501000010000060150100001000F5
+:1064A00000711501000100000072150100010000DB
+:1064B00000731501000100000078150100010000C3
+:1064C0000089150100010000008A1501000100008B
+:1064D000008B150100010000009015010001000073
+:1064E0000099150100040000009A15010004000045
+:1064F000009B15010004000000A01501000400002D
+:1065000000A115010002000000A215010002000018
+:1065100000A315010002000000A815010002000000
+:106520000009160100120C10080A160100120C10C6
+:10653000080B160100120C100810160100120C10A6
+:10654000081916010021FE01001A16010021FE01A2
+:10655000001B16010021FE01002016010021FE0192
+:106560000049160100FFFF00004A160100FFFF006E
+:10657000004B160100FFFF000050160100FFFF0056
+:106580000051160100FFFF000052160100FFFF003E
+:106590000053160100FFFF000058160100FFFF0026
+:1065A0000059160100FFFF00005A160100FFFF000E
+:1065B000005B160100FFFF000060160100FFFF00F6
+:1065C0000061160100FFFF000062160100FFFF00DE
+:1065D0000063160100FFFF000068160100FFFF00C6
+:1065E0000069160100010000006A160100010000A8
+:1065F000006B160100010000007016010001000090
+:106600000071160100010001007216010001000175
+:10661000007316010001000100781601000100015D
+:106620000079160100010001007A16010001000145
+:10663000007B16010001000100801601000100012D
+:106640000081160100010000008216010001000017
+:1066500000831601000100000088160100010000FF
+:10666000009116010021FE01009216010021FE0199
+:10667000009316010021FE01009816010021FE0181
+:1066800000C1160100120C1008C2160100120C10F5
+:1066900008C3160100120C1008C8160100120C10D5
+:1066A00008C916010004000000CA16010004000019
+:1066B00000CB16010004000000D016010004000009
+:1066C00000D916010002000000DA160100020000E5
+:1066D00000DB16010002000000E0160100020000CD
+:1066E00000E116010011000000E216010011000097
+:1066F00000E316010011000000E81601001100007F
+:1067000000291701008168AC0F2A1701008168ACCD
+:106710000F2B1701008168AC0F301701008168ACA6
+:106720000F5117010004000000521701000400007F
+:106730000053170100040000005817010004000076
+:1067400000A117010002000000A2170100020000D2
+:1067500000A317010002000000A8170100020000BA
+:1067600000A917010001000000AA170100010000A4
+:1067700000AB17010001000000B01701000100008C
+:1067800000B117010001000000B217010001000074
+:1067900000B317010001000000B81701000100005C
+:1067A00000B917010002000000BA17010002000042
+:1067B00000BB17010002000000C01701000200002A
+:1067C00000C117010001000000C217010001000014
+:1067D00000C317010001000000C8170100010000FC
+:1067E00000C917010001000000CA170100010000E4
+:1067F00000CB17010001000000D0170100010000CC
+:1068000000D117010001000000D2170100010000B3
+:1068100000D317010001000000D81701000100009B
+:1068200000E117010004000000E21701000400006D
+:1068300000E317010004000000E817010004000055
+:1068400000013501001100000002350100110000B7
+:10685000000335010011000000083501001100009F
+:106860000011350100010000001235010001000097
+:10687000001335010001000000183501000100007F
+:106880000089360100800000008A36010080000087
+:10689000008B36010080000000903601008000006F
+:1068A00000913601000470008092360100047000EF
+:1068B0008093360100047000809836010004700057
+:1068C0008099360100000400049A3601000004009B
+:1068D000049B36010000040004A0360100000400FF
+:1068E00004A1360100C0000000A2360100C0000073
+:1068F00000A3360100C0000000A8360100C000005F
+:1069000000A936010000100000AA360100001000A6
+:1069100000AB36010000100000B03601000010008E
+:1069200000C136010001000000C236010001000074
+:1069300000C336010001000000C83601000100005C
+:1069400000D936010001000000DA36010001000024
+:1069500000DB36010001000000E03601000100000C
+:1069600000E936010004000000EA360100040000DE
+:1069700000EB36010004000000F0360100040000C6
+:1069800000F136010002000000F2360100020000B2
+:1069900000F336010002000000F83601000200009A
+:1069A00000613701008000000062370100800000B4
+:1069B000006337010080000000683701008000009C
+:1069C0000069370100047000806A3701000470001C
+:1069D000806B370100047000807037010004700084
+:1069E00080713701000004000472370100000400C8
+:1069F000047337010000040004783701000004002C
+:106A00000479370100C00000007A370100C000009F
+:106A1000007B370100C000000080370100C000008B
+:106A200000813701000010000082370100001000D3
+:106A300000833701000010000088370100001000BB
+:106A40000099370100010000009A370100010000A1
+:106A5000009B37010001000000A037010001000089
+:106A600000B137010001000000B237010001000051
+:106A700000B337010001000000B837010001000039
+:106A800000C137010004000000C23701000400000B
+:106A900000C337010004000000C8370100040000F3
+:106AA00000C937010002000000CA370100020000DF
+:106AB00000CB37010002000000D0370100020000C7
+:106AC0000039380100800000003A380100800000E1
+:106AD000003B3801008000000040380100800000C9
+:106AE0000041380100047000804238010004700049
+:106AF00080433801000470008048380100047000B1
+:106B00008049380100000400044A380100000400F4
+:106B1000044B380100000400045038010000040058
+:106B20000451380100C000000052380100C00000CC
+:106B30000053380100C000000058380100C00000B8
+:106B40000059380100001000005A38010000100000
+:106B5000005B3801000010000060380100001000E8
+:106B600000713801000100000072380100010000CE
+:106B700000733801000100000078380100010000B6
+:106B80000089380100010000008A3801000100007E
+:106B9000008B380100010000009038010001000066
+:106BA0000099380100040000009A38010004000038
+:106BB000009B38010004000000A038010004000020
+:106BC00000A138010002000000A23801000200000C
+:106BD00000A338010002000000A8380100020000F4
+:106BE0000009390100120C10080A390100120C10BA
+:106BF000080B390100120C100810390100120C109A
+:106C0000081939010021FE01001A39010021FE0195
+:106C1000001B39010021FE01002039010021FE0185
+:106C20000049390100FFFF00004A390100FFFF0061
+:106C3000004B390100FFFF000050390100FFFF0049
+:106C40000051390100FFFF000052390100FFFF0031
+:106C50000053390100FFFF000058390100FFFF0019
+:106C60000059390100FFFF00005A390100FFFF0001
+:106C7000005B390100FFFF000060390100FFFF00E9
+:106C80000061390100FFFF000062390100FFFF00D1
+:106C90000063390100FFFF000068390100FFFF00B9
+:106CA0000069390100010000006A3901000100009B
+:106CB000006B390100010000007039010001000083
+:106CC0000071390100010001007239010001000169
+:106CD0000073390100010001007839010001000151
+:106CE0000079390100010001007A39010001000139
+:106CF000007B390100010001008039010001000121
+:106D0000008139010001000000823901000100000A
+:106D100000833901000100000088390100010000F2
+:106D2000009139010021FE01009239010021FE018C
+:106D3000009339010021FE01009839010021FE0174
+:106D400000C1390100120C1008C2390100120C10E8
+:106D500008C3390100120C1008C8390100120C10C8
+:106D600008C939010004000000CA3901000400000C
+:106D700000CB39010004000000D0390100040000FC
+:106D800000D939010002000000DA390100020000D8
+:106D900000DB39010002000000E0390100020000C0
+:106DA00000E139010011000000E23901001100008A
+:106DB00000E339010011000000E839010011000072
+:106DC00000293A01008168AC0F2A3A01008168ACC1
+:106DD0000F2B3A01008168AC0F303A01008168AC9A
+:106DE0000F513A010004000000523A010004000073
+:106DF00000533A010004000000583A01000400006A
+:106E000000A13A010002000000A23A0100020000C5
+:106E100000A33A010002000000A83A0100020000AD
+:106E200000A93A010001000000AA3A010001000097
+:106E300000AB3A010001000000B03A01000100007F
+:106E400000B13A010001000000B23A010001000067
+:106E500000B33A010001000000B83A01000100004F
+:106E600000B93A010002000000BA3A010002000035
+:106E700000BB3A010002000000C03A01000200001D
+:106E800000C13A010001000000C23A010001000007
+:106E900000C33A010001000000C83A0100010000EF
+:106EA00000C93A010001000000CA3A0100010000D7
+:106EB00000CB3A010001000000D03A0100010000BF
+:106EC00000D13A010001000000D23A0100010000A7
+:106ED00000D33A010001000000D83A01000100008F
+:106EE00000E13A010004000000E23A010004000061
+:106EF00000E33A010004000000E83A010004000049
+:106F000000015801001100000002580100110000AA
+:106F10000003580100110000000858010011000092
+:106F2000001158010001000000125801000100008A
+:106F30000013580100010000001858010001000072
+:106F4000008A590100800000008B59010080000078
+:106F500000925901000470008093590100047000F0
+:106F6000809A590100000400049B590100000400AC
+:106F700004A2590100C0000000A3590100C0000094
+:106F800000AA59010000100000AB590100001000D8
+:106F900000C259010001000000C3590100010000B6
+:106FA00000DA59010001000000DB59010001000076
+:106FB00000EA59010004000000EB59010004000040
+:106FC00000F259010002000000F359010002000024
+:106FD00000625A010080000000635A010080000036
+:106FE000006A5A0100047000806B5A0100047000AE
+:106FF00080725A010000040004735A01000004006A
+:10700000047A5A0100C00000007B5A0100C0000051
+:1070100000825A010000100000835A010000100095
+:10702000009A5A0100010000009B5A010001000073
+:1070300000B25A010001000000B35A010001000033
+:1070400000C25A010004000000C35A0100040000FD
+:1070500000CA5A010002000000CB5A0100020000E1
+:10706000003A5B0100800000003B5B0100800000F3
+:1070700000425B010004700080435B01000470006B
+:10708000804A5B0100000400044B5B010000040027
+:1070900004525B0100C0000000535B0100C000000F
+:1070A000005A5B0100001000005B5B010000100053
+:1070B00000725B010001000000735B010001000031
+:1070C000008A5B0100010000008B5B0100010000F1
+:1070D000009A5B0100040000009B5B0100040000BB
+:1070E00000A25B010002000000A35B01000200009F
+:1070F000000A5C0100120C10080B5C0100120C105D
+:10710000081A5C010021FE01001B5C010021FE0148
+:10711000004A5C0100FFFF00004B5C0100FFFF0024
+:1071200000525C0100FFFF0000535C0100FFFF0004
+:10713000005A5C0100FFFF00005B5C0100FFFF00E4
+:1071400000625C0100FFFF0000635C0100FFFF00C4
+:10715000006A5C0100010000006B5C01000100009E
+:1071600000725C010001000100735C01000100017C
+:10717000007A5C0100010001007B5C01000100015C
+:1071800000825C010001000000835C01000100003E
+:1071900000925C010021FE0100935C010021FE01D0
+:1071A00000C25C0100120C1008C35C0100120C103C
+:1071B00008CA5C010004000000CB5C010004000070
+:1071C00000DA5C010002000000DB5C01000200004C
+:1071D00000E25C010011000000E35C01001100000E
+:1071E000002A5D01008168AC0F2B5D01008168AC55
+:1071F0000F525D010004000000535D010004000017
+:1072000000A25D010002000000A35D010002000079
+:1072100000AA5D010001000000AB5D01000100005B
+:1072200000B25D010001000000B35D01000100003B
+:1072300000BA5D010002000000BB5D010002000019
+:1072400000C25D010001000000C35D0100010000FB
+:1072500000CA5D010001000000CB5D0100010000DB
+:1072600000D25D010001000000D35D0100010000BB
+:1072700000E25D010004000000E35D010004000085
+:1072800000027B010011000000037B0100110000DF
+:1072900000127B010001000000137B0100010000CF
+:0172A00000ED
+:00000001FF
diff --git a/firmware/nouveau/nva5.ctxprog.ihex b/firmware/nouveau/nva5.ctxprog.ihex
new file mode 100644
index 0000000..57a9369
--- /dev/null
+++ b/firmware/nouveau/nva5.ctxprog.ihex
@@ -0,0 +1,77 @@
+:100000004E564350002C019C007000000030000947
+:10001000FB4400092D400051EF4000440A40000518
+:100020000A40000D0A40008E0070004D1240009DF5
+:100030000070004D0A450097007000210B4500A19B
+:100040004644004D7944004D8544001D0070000673
+:1000500018400005006000454444008B30440045D2
+:100060001840004D23400081007000CF1C40009FCD
+:100070000070009F0050004DE64400170070000B18
+:100080002340004D804400210C4500A1564400A0AF
+:10009000007000010070000300700006274000059A
+:1000A0002840000D006000050070000D0070000683
+:1000B000007000020070000B0070000E0070001C49
+:1000C0000070000C00600000000000FFFF9000FFC7
+:1000D000FF91004DDE4400090060004D004800968D
+:1000E000007000CF3A40009F0070009F0050005108
+:1000F000EF4000C036400080002000080060004F44
+:10010000364000C0364000CC3E400051364000161C
+:100110000070004D004800110060004D0048004D87
+:100120003644008E007000810070004D7344004D15
+:10013000804400830070000000300000512100075F
+:10014000006000010AC0002200200001008000CBF6
+:10015000005000FF00C0004D5E44004D0048000804
+:10016000D844004D7644004D8E44004D5E44004D11
+:10017000EC44004D7944004D8544004D0048008317
+:100180000070004D0D45003F02A000400020000619
+:100190000060004D0645004D904400E701200060DE
+:1001A000C14400780220000100300061C1440040D9
+:1001B000032000FFFF38004DD6440000003000CB84
+:1001C0000050004D254500CB00500007DA44004D9B
+:1001D0000048004D7C4400FC1B11004D0048004DC0
+:1001E0007C4400FD1B11004D0048004D7C4400FE86
+:1001F0001B11004D004800000020000000700006A8
+:100200000060004D00480001002000060060004D25
+:100210000645000A0211004D00480000003000FFB2
+:10022000FFC300000020000700600000007000080D
+:10023000002000FF008000CB0050004D004800006F
+:100240000000004D004800000000000202170032CC
+:100250000020000D02100042021E00C0021100C466
+:10026000021100C80211000203120002041500006E
+:1002700005180009051300500515000506110013A7
+:1002800000200007061000000711000009110002FD
+:10029000091200000A1100020B1600280B12002B95
+:1002A0000B1400010C1100010D1100DA00200000F8
+:1002B0001210000014110005141100071411000998
+:1002C0001411000B141100051A14000C1A1300006D
+:1002D0001C1300041C1300201C1400251C140040D7
+:1002E0001C1300441C1300601C1400651C14000047
+:1002F0001F1300041F1300081F11000B1F1100150E
+:10030000002000401F10004D004800060060004D16
+:10031000254500202011002220110060002000400F
+:10032000201000C0201500C8201100CA201400CFE2
+:10033000201D000021120003211200402116004759
+:1003400021120053211200A0211100C0211200CB64
+:10035000211100D4211100D82115004D00480000C2
+:100360000000004D0048000B0060004D0048000AEE
+:100370000060004D0048000B0060004DDC40002094
+:10038000002000080060004C0050004D004800E8CC
+:10039000032000080060004C0050004D004800049D
+:1003A0000060004A0050004D004800FF00C000FF00
+:1003B00000C8004D004800FF00C000FF00C8004D0D
+:1003C000004800160070008E00700082007000412E
+:1003D0000050004DE2440095007000D1005000161E
+:1003E0000060005200500002007000150070004DC7
+:1003F0002840008E0070004DDE4400000020000701
+:1004000000600000003000FF00C00000002000FF7E
+:10041000008000090070000E0070004D0048008050
+:1004200000700017004800000070004D0048004DAB
+:100430000048004D0048004D0048008E0070004DFF
+:10044000DE4400830070004DE944004D1645000F66
+:100450000070008C154100CB0050004D004800405A
+:1004600003200007006000871A45004D0048000087
+:10047000000000722020004D064500FF0080004D66
+:1004800000480000072100070060003B0920004DE4
+:10049000064500FF0088004D0048000F0048004B53
+:1004A0000048004D1F45008F0070008C004800CBB5
+:0704B0000050004D00480060
+:00000001FF
diff --git a/firmware/nouveau/nva5.ctxvals.ihex b/firmware/nouveau/nva5.ctxvals.ihex
new file mode 100644
index 0000000..a57f2cd
--- /dev/null
+++ b/firmware/nouveau/nva5.ctxvals.ihex
@@ -0,0 +1,772 @@
+:100000004E56435600040600004300000030000036
+:10001000004B000000020000005F00000000100024
+:1000200000740000000300000075000000001000D4
+:1000300000880000009D620100890000009D6201AF
+:10004000008A0000000CFE0000900000000040004C
+:10005000009B00000087010000A0000000181000B5
+:1000600000A1000000FF000000B400000004000038
+:1000700000B5000000DF002514B7000000000600F6
+:1000800000BD00000000000001BE000000FF0000F5
+:1000900000C000000000040000C6000000010000D5
+:1000A00000C700000001000000CB000000020000BB
+:1000B00000CC00000001000000D0000000010000A2
+:1000C00000D100000000010000D700000002000085
+:1000D00000D800000001000000D90000000100006D
+:1000E00000DD00000001000000DE000000FFFF3F17
+:1000F00000DF000000FF1F0000E100000001000021
+:1001000000E200000001000000E400000001000027
+:1001100000E500000001000000E600000001000012
+:1001200000E700000004000000E8000000010000FB
+:1001300000EA00000001000000EB000000010000E8
+:1001400000EC00000007000000ED000000010000CE
+:1001500000EE00000007000000EF000000010000BA
+:1001600000F000000001000000F1000000010000AC
+:1001700000F600000001000000F700000000010090
+:1001800000F900000001000000FC00000000010078
+:1001900000FD00000001000000FE00000000010062
+:1001A0000000010000010000000301000000010048
+:1001B00000080100000400000009010000700000B8
+:1001C000000A01000080000000100100000C000087
+:1001D00000120100000800000013010000140000DC
+:1001E0000015010000290000001601000027000092
+:1001F00000170100002600000018010000080000A0
+:100200000019010000040000001A0100002700008E
+:10021000001D010000010000001E0100000200009E
+:10022000001F010000030000002001000004000086
+:10023000002101000005000000220100000600006E
+:10024000002301000007000000240100000100005D
+:100250000035010000CF00000041010000800000D7
+:1002600000420100000400000043010000040000FF
+:1002700000440100000300000046010000030000EC
+:100280000047010000010000004A010000120000C8
+:10029000004B010000100000004C0100000C0000A9
+:1002A000004D0100000100000051010000040000A9
+:1002B0000052010000020000005301000004000091
+:1002C0000057010000FFFF3F0058010000FF1F0022
+:1002D0000062010000010000006301000001000055
+:1002E000006401000002000000660100000400003C
+:1002F0000067010000140000006801000001000018
+:10030000006C01000002000000710100000100000B
+:1003100000730100000200000074010000001000E2
+:100320000075010000000E000076010000001000C2
+:100330000077010000001E000079010000010000AC
+:10034000007A010000010000007B010000010000B4
+:10035000007C010000010000007D010000010000A0
+:100360000081010000000200008201000000020084
+:1003700000840100000100000085010000F0000081
+:100380000086010000FF000000890100000100005C
+:10039000008A010000F00000008B010000FF000057
+:1003A000008D010000090000009001000001000024
+:1003B0000091010000CF0000009301000001000047
+:1003C0000097010000CF000000990100000200002A
+:1003D000009B010000010000009D010000010000E1
+:1003E000009F010000CF000000A0010000CF00002E
+:1003F00000A101000001000000A201000080000E29
+:1004000000A301000004000000A8010000801F00FC
+:1004100000A901000030000000AE01000021F874C6
+:100420007BAF01000001800589B1010000001000D0
+:1004300000B2010000FF010000B4010000FA107CCE
+:1004400082B5010000C0000040B601000080208994
+:10045000B7BB01000001000000BC01000021F874DE
+:100460007BBD01000001800589BF01000000100074
+:1004700000C0010000FF010000C2010000FA107C72
+:1004800082C3010000C0000040C401000080208938
+:10049000B7C901000001000000CA01000040003D92
+:1004A00000CC01000022000000D401000040003D0B
+:1004B00000D501000022000000E70100000AFF0053
+:1004C00000E901000000008001EA010000000016C0
+:1004D00000EB01000000008001EF010000FFFF03BE
+:1004E00000F001000000000C31F9010000010401DE
+:1004F00000FB01000078000000FD010000BF0000CB
+:1005000000FF010000101200000002000080000047
+:1005100008030200003E0000000902000000008005
+:10052000010A020000000016000B0200000000801B
+:10053000010F020000FFFF03001002000000000C8A
+:100540003119020000010401001B020000780000C4
+:10055000001D020000BF0000001F0200001012007A
+:10056000002002000080000008230200003E00007E
+:100570000029020000000080012A0200000000168D
+:10058000002B020000000080012F020000FFFF038B
+:10059000003002000000000C3139020000010401AB
+:1005A000003B020000780000003D020000BF000098
+:1005B000003F020000101200004002000080000016
+:1005C00008430200003E0000004A02000070701262
+:1005D000054E020000FFFFFF07550200000704124E
+:1005E000005602000007150905570200000202012B
+:1005F00005580200000102030061020000400000F3
+:1006000000620200000A0B0C0D63020000101214BD
+:100610000064020000F0010000650200000100001B
+:1006200000660200000300000069020000009E0353
+:10063000006A020000000100006B020000003800A8
+:10064000006C02000007E03F006D02000000E03F88
+:10065000006E020000404040006F02000007F0F70B
+:100660006C70020000FF7FBF02780200000AFF00EA
+:10067000007A020000000080017B020000000016EA
+:10068000007C0200000000800180020000FFFF03E8
+:10069000008102000000000C318A02000001040108
+:1006A000008C020000780000008E020000BF0000F5
+:1006B0000090020000101200009102000080000073
+:1006C00008940200003E0000009A02000000008032
+:1006D000019B020000000016009C02000000008048
+:1006E00001A0020000FFFF0300A102000000000CB7
+:1006F00031AA02000001040100AC020000780000F1
+:1007000000AE020000BF000000B0020000101200A6
+:1007100000B102000080000008B40200003E0000AA
+:1007200000BA02000000008001BB020000000016B9
+:1007300000BC02000000008001C0020000FFFF03B7
+:1007400000C102000000000C31CA020000010401D7
+:1007500000CC02000078000000CE020000BF0000C4
+:1007600000D002000010120000D102000080000042
+:1007700008D40200003E000000DB0200007070128E
+:1007800005DF020000FFFFFF07E60200000704127A
+:1007900000E702000007150905E802000002020157
+:1007A00005E902000001020300F20200004000001F
+:1007B00000F30200000A0B0C0DF4020000101214EA
+:1007C00000F5020000F0010000F602000001000048
+:1007D00000F702000003000000FA020000009E0380
+:1007E00000FB02000000010000FC020000003800D5
+:1007F00000FD02000007E03F00FE02000000E03FB5
+:1008000000FF020000404040000003000007F0F736
+:100810006C01030000FF7FBF0241030000040000E1
+:1008200000460300003F00000049030000040000F0
+:10083000004B030000010000004D0300008168AC84
+:100840000F59030000800000006103000004000055
+:100850000069030000140C08006F030000140C086A
+:1008600000730300000F00000079030000FF070081
+:100870000087030000040800009703000004000044
+:10088000009E030000020000009F0300000400001F
+:1008900000A603000000000004A7030000120C10D3
+:1008A00008AD030000DFBFE304AE0300000000005A
+:1008B00004B5030000DFBFE304B703000004000039
+:1008C00000BB03000020000000BF03000004000084
+:1008D00000CF03000010000000D50300001100004D
+:1008E00000E5030000DFBFE304ED030000DFBFE32A
+:1008F00004F603000004000000F7030000040800F1
+:1009000000FF0300000100000005040000110000CA
+:1009100000070400001A0000000F0400007F000020
+:100920000016040000040000001F04000001000085
+:100930000027040000140C080037040000120C10FB
+:10094000083F040000040000004704000004000009
+:10095000004B0400001A00000055040000020000D3
+:1009600000570400001000000065040000677E08C6
+:100970000077040000010000007F040000120C104A
+:10098000088D04000001000000A604000001000022
+:1009900000AE04000001100000B6040000FFFF00DC
+:1009A00000B7040000FF070000BB040000040000C3
+:1009B00000BE040000FFFF0000BF040000140C088C
+:1009C00000C304000004000000C6040000FFFF0094
+:1009D00000CD04000015000000CE040000FFFF0061
+:1009E00000D304000004000000DB04000008000045
+:1009F00000DD04000001000000E50400001000001C
+:100A000000EB040000FF070000F2040000040000F7
+:100A100000FA04000004000000FD040000010000D2
+:100A20000025050000040000002D05000000040062
+:100A30000035050000000300003D05000001100026
+:100A400000530500000F00000075050000020000C3
+:100A500000BD05000001000000C5050000100000F9
+:100A600000D505000001000000D605000000008050
+:100A70003FDE0500000000803FE60500000000802A
+:100A80003FEE0500000000803FF6050000000080FA
+:100A90003FFE0500000000803F06060000000080C9
+:100AA0003F0E0600000000803F1606000000008098
+:100AB0003F1E0600000000803F2606000000008068
+:100AC0003F2E0600000000803F3606000000008038
+:100AD0003F3E0600000000803F4606000000008008
+:100AE0003F4E0600000000803F5606000010000048
+:100AF000006E0600000300000075060000100000F4
+:100B00000087060000010000009F060000100000A2
+:100B100000DE06000000000004E606000000000001
+:100B200004F606000080000000FD060000000080C2
+:100B30003F050700000000803F0D07000000008017
+:100B40003F150700000000803F16070000800000EE
+:100B5000001D0700000000803F2507000000008006
+:100B60003F2D0700000000803F3507000000008097
+:100B70003F3D0700000000803F4507000000008067
+:100B80003F4D0700000000803F4E070000010000BD
+:100B900000550700000000803F56070000000100DC
+:100BA000005D0700000000803F5E070000000100BC
+:100BB00000650700000000803F660700001100008C
+:100BC000006D0700000000803F75070000000080F6
+:100BD0003F7607000008000000A6070000010000A3
+:100BE00000B607000001000000BE07000001000081
+:100BF00000C607000001000000CE070000CF000083
+:100C000000D6070000020000000E080000010000EE
+:100C1000001E08000001000000260800000100007E
+:100C2000002E080000010000004508000010000030
+:100C300000550800003F00000056080000040000B6
+:100C4000006608000001000000670800008800003E
+:100C5000006E080000150000006F0800008800000A
+:100C60000087080000040000008D0800000100005B
+:100C7000008E080000804444049D0800000100002C
+:100C800000AD08000001000000C5080000011000D0
+:100C90000025090000110000003F090000260000A7
+:100CA00000570900000000803F650900000F0000A8
+:100CB000007F0900001A00000087090000100000F2
+:100CC00000A509000011000000DD0900000100007E
+:100CD00000E509000001000000ED0900000100002E
+:100CE00000F509000002000000FD090000010000FD
+:100CF00000050A0000020000000D0A0000010000CB
+:100D0000001D0A0000677E08002D0A00008168AC03
+:100D10000F3D0A000001000000450A00000100002C
+:100D2000004D0A000001000000550A00000100000B
+:100D3000005D0A000001000000650A0000010000DB
+:100D400000660A0000010000006D0A0000010000BA
+:100D500000750A000001000000760A000001000092
+:100D6000007D0A000001000000850A00000100006B
+:100D7000008D0A000001000000950A00000100003B
+:100D800000960A00008824712A9D0A0000010000D4
+:100D900000A50A000001000000A60A000000C085AE
+:100DA00040AD0A000001000000AE0A000040000053
+:100DB00000B50A000001000000B60A0000000100B2
+:100DC00000BD0A000001000000BE0A000000010191
+:100DD00000C50A000001000000C60A0000000080F3
+:100DE00002CD0A000001000000CF0A0000520000FE
+:100DF00000D50A000001000000DD0A00000100002B
+:100E000000DF0A000026000000E50A0000010000E3
+:100E100000ED0A000001000000EF0A0000040000DD
+:100E200000F50A000001000000F70A0000040000BD
+:100E300000FD0A000002000000050B000002000097
+:100E400000070B00001A0000000D0B00000200005C
+:100E500000150B0000020000001D0B000002000046
+:100E6000001F0B000000FFFF00250B000002000028
+:100E7000002D0B000002000000350B0000020000F6
+:100E8000003D0B000001000000450B0000010000C8
+:100E900000460B0000010000004D0B0000010000A7
+:100EA00000550B0000010000005D0B000001000078
+:100EB00000650B0000010000006D0B000001000048
+:100EC00000750B0000010000007D0B000002000017
+:100ED00000850B0000020000008D0B0000020000E6
+:100EE00000950B0000020000009D0B0000020000B6
+:100EF00000A50B000002000000AD0B000002000086
+:100F000000AE0B00000F000000B50B000002000057
+:100F100000BD0B000001000000C50B000001000037
+:100F200000CD0B000001000000D50B000001000007
+:100F300000DD0B000001000000E50B0000010000D7
+:100F400000ED0B000001000000F50B0000010000A7
+:100F5000000E0C000004000000150C000001000051
+:100F600000160C0000FFFF00001E0C0000FFFF0039
+:100F700000260C0000FFFF00002E0C0000FFFF0009
+:100F800000450C000001000000760C00000100008C
+:100F900000960C000001000000C60C0000010000DB
+:100FA00000DE0C000003000000FD0C00000100004A
+:100FB00000050D0000020000000D0D000001000002
+:100FC00000150D0000010000001D0D0000020000D2
+:100FD00000250D0000010000002D0D0000010000A3
+:100FE000003E0D000001000000460D000001000061
+:100FF000004E0D000002000000550D000001000031
+:1010000000560D0000010000005D0D000001000011
+:10101000005E0D000001000000650D0000010000F1
+:1010200000660D0000020000006D0D0000010000D0
+:1010300000750D000001000000760D0000010000A9
+:10104000007D0D0000010000007E0D000001000089
+:1010500000850D000001000000860D000001000069
+:10106000008D0D0000010000008E0D000001000049
+:1010700000950D000001000000960D000001000029
+:10108000009D0D0000010000009E0D000001000009
+:1010900000A50D000001000000A60D0000010000E9
+:1010A00000AD0D000001000000AE0D0000010000C9
+:1010B00000B50D000001000000B60D0000010000A9
+:1010C00000BD0D000001000000BE0D000001000089
+:1010D00000C50D000001000000C60D000001000069
+:1010E00000CD0D000001000000CE0D000001000049
+:1010F00000D50D000002000000D60D000001000028
+:1011000000DD0D000002000000DE0D000001000007
+:1011100000E50D000002000000E60D0000010000E7
+:1011200000ED0D000002000000EE0D0000010000C7
+:1011300000F50D000002000000F60D0000010000A7
+:1011400000FD0D000002000000FE0D000001000087
+:1011500000050E000002000000060E000001000065
+:10116000000D0E0000020000000E0E000001000045
+:1011700000150E000001000000160E000001000026
+:10118000001D0E0000010000001E0E000001000006
+:1011900000250E000001000000260E0000010000E6
+:1011A000002D0E0000010000002E0E0000010000C6
+:1011B00000350E000001000000360E0000020000A5
+:1011C000003D0E0000010000003E0E000002000085
+:1011D00000450E000001000000460E000002000065
+:1011E000004D0E0000010000004E0E000002000045
+:1011F00000550E000001000000560E000002000025
+:10120000005D0E0000010000005E0E000002000004
+:1012100000650E000001000000660E0000020000E4
+:10122000006D0E0000010000006E0E0000020000C4
+:1012300000750E000001000000760E0000010000A5
+:10124000007D0E0000010000007E0E000001000085
+:1012500000850E000001000000860E000001000065
+:10126000008D0E0000010000008E0E000001000045
+:1012700000950E000002000000960E000001000024
+:10128000009D0E0000020000009E0E000001000004
+:1012900000A50E000002000000A60E0000010000E4
+:1012A00000AD0E000002000000AE0E0000010000C4
+:1012B00000B50E000002000000B60E0000020000A3
+:1012C00000BD0E000002000000BE0E000002000083
+:1012D00000C50E000002000000C60E000002000063
+:1012E00000CD0E000002000000CE0E000002000043
+:1012F00000D50E000001000000D60E000002000024
+:1013000000DD0E000001000000DE0E000002000003
+:1013100000E50E000001000000E60E0000020000E3
+:1013200000ED0E000001000000EE0E0000020000C3
+:1013300000F50E000001000000F60E0000010000A4
+:1013400000FD0E000001000000FE0E000001000084
+:1013500000050F000001000000060F000001000062
+:10136000000D0F0000010000000E0F000001000042
+:1013700000160F0000010000001E0F000001000019
+:1013800000260F0000010000002D0F0000110000DA
+:10139000002E0F000001000000350F0000010000CA
+:1013A000003E0F0000010000004E0F000011000081
+:1013B000008E0F00008168AC0FA60F000004000033
+:1013C00000C60F000011000000CE0F000001000059
+:1013D00000DE0F0000CF000000E60F0000CF00008D
+:1013E00000EE0F0000CF000000F60F00000100002B
+:1013F000004E100000010000005610000001000027
+:10140000005E1000000200000066100000010000F5
+:10141000006E1000000100000076100000020000C5
+:10142000007E100000010000008E1000000100008E
+:101430000096100000010000009E10000001000056
+:1014400000A610000001000000AE10000001000026
+:1014500000B610000001000000BE100000010000F6
+:1014600000C610000001000000CE100000110000B6
+:10147000000E1100008168AC0F161100000F000073
+:101480000056110000677E08006E11000011000078
+:101490000076110000010000007E11000001000034
+:1014A000009E11000004000000CE110000010000A9
+:1014B00000F611000011000000361200008168AC37
+:1014C0000F5512000002000000561200001100002B
+:1014D000005E1200000100000065120000677E0837
+:1014E000006E120000010000007E120000010000EA
+:1014F000008D120000010000008E120000FF0700A6
+:10150000009E12000001000000AE12000001000069
+:1015100000C612000001000000CD120000150000FE
+:1015200000DD12000001000000E5120000100000C4
+:1015300000FD12000001000000251300000400005F
+:10154000002D13000000040000351300000003000C
+:10155000003D1300000110000075130000020000A0
+:1015600000BD13000001000000C5130000100000C2
+:1015700000D5130000010000000E14000008000058
+:101580000016140000080000001E140000080000EF
+:101590000026140000080000002E140000080000BF
+:1015A0000036140000080000003E1400000800008F
+:1015B0000046140000080000004E14000011000056
+:1015C0000075140000100000008E1400008168AC4B
+:1015D0000F96140000000400009E14000000040098
+:1015E00000A614000000040000AE14000000040077
+:1015F00000B614000000040000BE14000000040047
+:1016000000C614000000040000CE14000000040016
+:1016100000D614000000030000DE140000000300E8
+:1016200000E614000000030000EE140000000300B8
+:1016300000F614000000030000FD1400000000800C
+:101640003FFE1400000003000005150000000080AC
+:101650003F06150000000300000D1500000000808B
+:101660003F0E15000000030000131500000F0000DE
+:1016700000151500000000803F1615000001000055
+:10168000001D1500000000803F1E1500000F000027
+:1016900000251500000000803F2D1500000000808F
+:1016A0003F331500000100000035150000000080E8
+:1016B0003F3D1500000000803F4515000000008000
+:1016C0003F4D1500000000803F55150000000080D0
+:1016D0003F5D1500000000803F5E15000020000007
+:1016E00000651500000000803F6615000011000035
+:1016F000006D1500000000803F6E15000000010025
+:1017000000751500000000803F7E150000010000FC
+:101710000096150000400000009E1500000001002A
+:1017200000AE15000003000000D615000001000007
+:1017300000DE150000677E0800FE150000020000B4
+:1017400000061600008168AC0F451600001000006E
+:1017500000551600003F0000005616000001000072
+:10176000007E160000040000008D1600000100003D
+:10177000008E160000010000009616000000040014
+:10178000009D160000010000009E160000000300EE
+:1017900000A616000001100000AD160000010000B8
+:1017A00000C516000001100000CE16000011000058
+:1017B000000E1700008168AC0F161700000F000024
+:1017C000002517000011000000651700000F000041
+:1017D00000A517000011000000C61700000100005E
+:1017E00000DD17000001000000E517000001000007
+:1017F00000E61700008168AC0FED17000001000043
+:1018000000EE170000677E0800F5170000020000D8
+:1018100000FD170000010000000518000002000094
+:10182000000D180000010000000E1800001100005B
+:10183000001D180000677E08002618000004000044
+:10184000002D1800008168AC0F3618000001000060
+:10185000003D180000010000003E180000010000DB
+:101860000045180000010000004D180000010000B4
+:101870000055180000010000005D18000001000084
+:10188000005E180000010000006518000001000063
+:101890000066180000010000006D18000001000043
+:1018A0000075180000010000007D18000001000014
+:1018B0000085180000010000008D180000010000E4
+:1018C000009518000001000000961800008168AC27
+:1018D0000F9D18000001000000A518000001000085
+:1018E00000AD18000001000000B518000001000064
+:1018F00000BD18000001000000BE18000004000038
+:1019000000C518000001000000CD18000001000013
+:1019100000CE18000001000000D5180000010000F2
+:1019200000D618000001000000DD180000010000D2
+:1019300000E518000001000000ED180000010000A3
+:1019400000EE18000001000000F518000001000082
+:1019500000FD180000020000000519000002000050
+:10196000000D19000002000000151900000200001F
+:10197000001D1900000200000025190000020000EF
+:10198000002D1900000200000035190000020000BF
+:10199000003D190000010000004519000001000091
+:1019A000004D190000010000004E19000001000068
+:1019B0000055190000010000005619000001000048
+:1019C000005D190000010000005E19000001000028
+:1019D0000065190000010000006619000001000008
+:1019E000006D190000010000006E190000010000E8
+:1019F00000751900000100000076190000010000C8
+:101A0000007D190000020000007E190000010000A6
+:101A10000085190000020000008619000001000086
+:101A2000008D190000020000008E19000011000056
+:101A30000095190000020000009D1900000200003E
+:101A400000A519000002000000AD1900000200000E
+:101A500000B519000002000000BD190000010000DF
+:101A600000C519000001000000CD190000010000B0
+:101A700000CE1900008168AC0FD5190000010000EC
+:101A800000D61900000F000000DD19000001000061
+:101A900000E519000001000000ED19000001000040
+:101AA00000F519000001000000151A0000010000F7
+:101AB00000161A0000110000001E1A0000010000AC
+:101AC00000431A00000F000000451A00000100004A
+:101AD00000561A0000010000008E1A0000DFBFE36C
+:101AE00004961A0000DFBFE3049E1A000001000004
+:101AF00000AE1A000000FFFF00B61A00000100004F
+:101B000000BE1A000001000000D61A000000FFFF0E
+:101B100000FD1A000001000000051B00000200008B
+:101B2000000D1B000001000000151B00000100005B
+:101B3000001D1B0000020000001E1B000001000031
+:101B400000251B0000010000002D1B00000100000B
+:101B5000002E1B000001000000361B0000001020BA
+:101B6000303E1B000040506070461B00008898A863
+:101B7000B84E1B0000C8D8E8F8551B000001000053
+:101B8000005D1B0000010000005E1B00001A000049
+:101B900000651B0000010000006D1B00000100003B
+:101BA000006E1B000004000000751B000001000017
+:101BB000007D1B000001000000851B0000010000EB
+:101BC000008D1B000001000000951B0000010000BB
+:101BD000009D1B000001000000A51B00000100008B
+:101BE00000AD1B000001000000B51B00000100005B
+:101BF00000BD1B000001000000C51B00000100002B
+:101C000000CD1B000001000000D51B0000020000F9
+:101C100000DD1B000002000000E51B0000020000C8
+:101C200000ED1B000002000000F51B000002000098
+:101C300000FD1B000002000000051C000002000067
+:101C4000000D1C000002000000151C000001000037
+:101C5000001D1C000001000000251C000001000008
+:101C6000002D1C000001000000351C0000010000D8
+:101C7000003D1C000001000000451C0000010000A8
+:101C8000004D1C000001000000551C000001000078
+:101C9000005D1C000001000000651C000001000048
+:101CA000006D1C000001000000751C000001000018
+:101CB000007D1C000001000000851C0000010000E8
+:101CC000008D1C000001000000951C0000020000B7
+:101CD00000961C0000040000009D1C000002000093
+:101CE000009E1C000004000000A51C000002000073
+:101CF00000A61C000000010203AD1C000002000051
+:101D000000B51C000002000000BD1C000002000025
+:101D100000C51C000002000000CD1C0000020000F5
+:101D200000CE1C000004000000D51C0000010000D3
+:101D300000DD1C000001000000E51C0000010000A7
+:101D400000E61C000004000000ED1C000001000083
+:101D500000EE1C000004000000F51C000001000063
+:101D600000F61C000080000000FD1C0000010000C7
+:101D700000FE1C000004000000051D000001000022
+:101D8000000D1D0000010000002D1D0000110000CD
+:101D900000351D000001000000261E0000040000A8
+:101DA000002E1E000080000000361E00000400000F
+:101DB000003E1E000000010203461E00000300005A
+:101DC000004E1E000004000000761E00000400000B
+:101DD000007E1E0000030000009E1E0000040000A4
+:101DE00000B01F000021000000B81F00000100002B
+:101DF00000C01F000002000000C81F00000001001A
+:101E000000D01F000000010000D81F0000010000EA
+:101E100000F01F000001000000F81F000002000099
+:101E20000000200000000100000820000000010068
+:101E3000001020000001000000463F0000040000E8
+:101E4000004E3F0000030000007E3F000001000044
+:101E5000008E3F000001000000AE3F0000882471AA
+:101E60002ABE3F000000C08540C63F000040000081
+:101E700000CE3F000000010000D63F00000001013D
+:101E800000DE3F0000000080025E40000001000014
+:101E900000C64000000F00000026410000040000C2
+:101EA000002E410000FFFF000036410000FFFF0050
+:101EB000003E410000FFFF000046410000FFFF0020
+:101EC000008E41000001000000AE41000001000052
+:101ED00000DE41000001000000F6410000030000A8
+:101EE0000056420000010000005E420000010000B8
+:101EF0000066420000020000006E42000001000087
+:101F00000076420000010000007E42000002000056
+:101F1000008E420000010000009642000001000017
+:101F2000009E42000001000000A6420000010000E7
+:101F300000AE42000001000000B6420000010000B7
+:101F400000BE42000001000000C642000001000087
+:101F500000CE42000001000000D642000001000057
+:101F600000DE42000001000000E642000001000027
+:101F700000EE42000001000000F6420000010000F7
+:101F800000FE4200000100000006430000010000C6
+:101F9000000E430000010000001643000001000095
+:101FA000001E430000010000002643000001000065
+:101FB000002E430000010000003643000001000035
+:101FC000003E430000010000004643000001000005
+:101FD000004E4300000200000056430000020000D3
+:101FE000005E4300000200000066430000020000A3
+:101FF000006E430000020000007643000002000073
+:10200000007E430000020000008643000002000042
+:10201000008E430000010000009643000001000014
+:10202000009E43000001000000A6430000010000E4
+:1020300000AE43000001000000B6430000010000B4
+:1020400000BE43000001000000C643000001000084
+:1020500000CE43000002000000D643000002000052
+:1020600000DE43000002000000E643000002000022
+:1020700000EE43000002000000F6430000020000F2
+:1020800000FE4300000200000006440000020000C1
+:10209000000E440000010000001644000001000092
+:1020A000001E440000010000002644000001000062
+:1020B000002E440000010000003644000001000032
+:1020C000003E440000010000004644000001000002
+:1020D00000564400000100000066440000110000AA
+:1020E00000A64400008168AC0FBE4400000400005C
+:1020F00000DE44000011000000E644000001000082
+:1021000000F6440000CF000000FE440000CF0000B5
+:102110000006450000CF0000000E45000001000051
+:102120000066450000010000006E4500000100004F
+:102130000076450000020000007E4500000100001E
+:102140000086450000010000008E450000020000EE
+:1021500000914500000400000096450000010000C9
+:10216000009945000004000000A6450000010000A1
+:1021700000A945000080000000AE450000010000FD
+:1021800000B145000004000000B645000001000059
+:1021900000B945000001000000BE4500000100003C
+:1021A00000C645000001000000C9450000270000EE
+:1021B00000CE45000001000000D6450000010000EF
+:1021C00000D945000026000000DE450000010000A7
+:1021D00000E645000011000000264600008168ACC2
+:1021E0000F2E4600000F0000006E460000677E08BC
+:1021F0000086460000110000008E4600000100002D
+:10220000009646000001000000B6460000040000F1
+:1022100000E6460000010000000E4700001100002B
+:10222000004E4700008168AC0F6E470000110000AF
+:102230000076470000010000008647000001000012
+:10224000009647000001000000A6470000FF0700BD
+:1022500000B647000001000000C647000001000072
+:1022600000DE4700000100000026490000080000D1
+:10227000002E490000080000003649000008000058
+:10228000003E490000080000004649000008000028
+:10229000004E4900000800000056490000080000F8
+:1022A000005E4900000800000066490000110000BF
+:1022B00000A64900008168AC0FAE49000000040090
+:1022C00000B649000000040000BE49000000040000
+:1022D00000C649000000040000CE490000000400D0
+:1022E00000D649000000040000DE490000000400A0
+:1022F00000E649000000040000EE49000000030071
+:1023000000F649000000030000FE49000000030041
+:1023100000064A0000000300000E4A00000003000F
+:1023200000164A0000000300001E4A0000000300DF
+:1023300000264A0000000300002E4A0000010000B1
+:1023400000364A00000F000000764A00002000001E
+:10235000007E4A000011000000864A0000000100D3
+:1023600000964A000001000000AE4A000040000054
+:1023700000B64A000000010000C64A000003000049
+:1023800000EE4A000001000000F64A0000677E08E7
+:1023900000164B0000020000001E4B00008168ACDC
+:1023A0000F6E4B000001000000964B00000400007F
+:1023B00000A64B000001000000AE4B00000004002E
+:1023C00000B64B000000030000BE4B0000011000EF
+:1023D00000E64B000011000000264C00008168ACB4
+:1023E0000F2E4C00000F000000DE4C00000100002A
+:1023F00000FE4C00008168AC0F064D0000677E08AF
+:1024000000264D0000110000003E4D0000040000B9
+:10241000004E4D000001000000564D00000100007C
+:1024200000764D0000010000007E4D00000100001C
+:1024300000AE4D00008168AC0FD64D0000040000D6
+:1024400000E64D000001000000EE4D00000100001C
+:1024500000064E000001000000664E000001000072
+:10246000006E4E000001000000764E0000010000EA
+:10247000007E4E000001000000864E0000010000BA
+:10248000008E4E000001000000964E00000100008A
+:10249000009E4E000001000000A64E00001100004A
+:1024A00000E64E00008168AC0FEE4E00000F000009
+:1024B000002E4F000011000000364F000001000008
+:1024C000006E4F000001000000A64F0000DFBFE3D8
+:1024D00004AE4F0000DFBFE304B64F000001000070
+:1024E00000C64F000000FFFF00CE4F0000010000BB
+:1024F00000D64F000001000000EE4F000000FFFF7B
+:1025000000365000000100000046500000010000AD
+:10251000004E500000001020305650000040506027
+:10252000705E5000008898A8B866500000C8D8E8CF
+:10253000F8765000001A00000086500000040000E9
+:1025400000AE51000004000000B65100000400007D
+:1025500000BE51000000010203E65100000400002B
+:1025600000FE5100000400000006520000040000BC
+:10257000000E52000080000000165200000400000F
+:10258000003E53000004000000465300008000009D
+:10259000004E5300000400000056530000000102EA
+:1025A000035E5300000300000066530000040000B7
+:1025B000008E53000004000000965300000300004A
+:1025C00000B65300000400000014570000FFFF3F56
+:1025D000002C570000FF1F00001B6000000F0000D0
+:1025E00000B86A000000000004C06A00000000009B
+:1025F00004C86A000000000004D06A000000000067
+:1026000004D86A000000000004E06A000000000036
+:1026100004E86A000000000004F06A000000000006
+:1026200004F86A000000000004006B0000000000D5
+:1026300004086B000000000004106B0000000000A4
+:1026400004186B000000000004206B000000000074
+:1026500004286B000000000004306B000000000044
+:1026600004586C0000DFBFE304606C0000DFBFE3D0
+:1026700004786C000021FE0100806C00008168ACD1
+:102680000F886C000001000000C86C0000120C10E4
+:1026900008F06C000000010000086D00000100015E
+:1026A00000186D000001000100206D000001000015
+:1026B00000286D000001000100306D0000010000E5
+:1026C00000386D000004000000406D0000020000B2
+:1026D00000107200000000803F48720000040000FB
+:1026E00000507200001A0000006872000001000033
+:1026F000000073000000FFFF00387300000F0000AF
+:1027000000787300008168AC0F8073000011000036
+:1027100000007400000400000018740000030000B2
+:102720000030740000020000003874000000000057
+:102730000440740000000000045E74000004000007
+:1027400000607400000500000066740000030000D3
+:102750000068740000520000009074000001000046
+:1027600000207500000000803F28750000000080F8
+:102770003F307500000000803F3875000000008089
+:102780003F407500000000803F4875000000008059
+:102790003F507500000000803F5875000000008029
+:1027A0003F607500000000803F68750000000080F9
+:1027B0003F707500000000803F78750000000080C9
+:1027C0003F807500000000803F8875000000008099
+:1027D0003F907500000000803F9875000000008069
+:1027E0003FA075000010000000D8760000120C1009
+:1027F00008E076000005000000F876000001000007
+:102800000008770000FFFF000010770000FFFF00C6
+:102810000018770000FFFF000020770000FFFF0096
+:102820000028770000030000009077000000FFFF01
+:1028300000987700001A000000A87700000300004D
+:10284000009079000002010000A07900000400005F
+:1028500000A879000004000000B079000004000026
+:1028600000B879000004000000007A0000040000B5
+:1028700000087A000004000000187A0000FF07003A
+:1028800000287A000002010000787A0000040000AD
+:1028900000807A000004000000887A000004000034
+:1028A00000907A0000040000006AE70000040000C5
+:1028B0000072E70000040000007AE70000120C102C
+:1028C0000882E700000300000092E70000120C10ED
+:1028D00008A2E70000140C0800AAE70000010000AD
+:1028E00000B2E7000004000000BAE70000040000A6
+:1028F00000C2E70000140C0800DAE70000120C1018
+:1029000008E2E7000027000000FAE70000010000ED
+:10291000000A06010001000000C2060100120C10AE
+:102920000800070100120C100810070100800000C9
+:102930000018070100047000802007010000040057
+:102940000428070100C0000000300701000010004B
+:1029500000480701000100000060070100010000BD
+:102960000070070100040000007807010002000069
+:1029700000E807010080000000F00701000470007B
+:1029800080F80701000004000400080100C00000F6
+:1029900000080801000010000020080100010000EC
+:1029A0000038080100010000004808010004000090
+:1029B000005008010002000000C008010080000073
+:1029C00000C808010004700080D008010000040065
+:1029D00004D8080100C0000000E008010000100059
+:1029E00000F80801000100000010090100010000CA
+:1029F0000020090100040000002809010002000075
+:102A00000090090100120C1008A009010021FE012C
+:102A100000D0090100FFFF0000D8090100FFFF00FE
+:102A200000E0090100FFFF0000E8090100FFFF00CE
+:102A300000F009010001000000F809010001000197
+:102A400000000A010001000100080A010001000065
+:102A500000180A010021FE0100280A0100010000FF
+:102A600000500A0100120C1008580A01000400006E
+:102A700000680A010002000000700A010011000055
+:102A800000B80A01008168AC0FC80A010003000009
+:102A900000E80A010004000000380B0100020000F9
+:102AA00000400B010001000000480B010001000084
+:102AB00000500B010002000000580B010001000053
+:102AC00000600B010001000000680B010001000024
+:102AD00000780B010002000000800B0100020000E2
+:102AE00000880B010002000000900B0100020000B2
+:102AF00000980B010002000000A00B010002000082
+:102B000000A80B010002000000B00B010002000051
+:102B100000B80B010001000000C00B010001000023
+:102B200000C80B010001000000D00B0100010000F3
+:102B300000D80B010001000000E00B0100010000C3
+:102B400000E80B010001000000F00B010001000093
+:102B500000F80B010001000000000C010001000062
+:102B600000080C010001000000100C010001000031
+:102B700000180C010001000000200C010001000001
+:102B800000280C010001000000300C0100010000D1
+:102B900000380C010002000000400C01000200009F
+:102BA00000480C010002000000500C01000200006F
+:102BB00000580C010002000000600C01000200003F
+:102BC00000680C010002000000700C01000200000F
+:102BD00000780C010001000000800C0100010000E1
+:102BE00000880C010001000000900C0100010000B1
+:102BF00000980C010001000000A00C010001000081
+:102C000000A80C010001000000B00C010001000050
+:102C100000B80C010001000000C00C010001000020
+:102C200000C80C010001000000D00C0100010000F0
+:102C300000D80C010001000000E00C0100010000C0
+:102C400000E80C010001000000F00C010001000090
+:102C500000F80C010001000000000D01000100005F
+:102C600000080D010001000000100D01000100002E
+:102C700000180D010001000000200D0100010000FE
+:102C800000280D010001000000300D0100010000CE
+:102C900000500D010004000000702A010011000026
+:102CA00000802A010001000000F82B0100800000D4
+:102CB00000002C010004700080082C0100000400BA
+:102CC00004102C0100C0000000182C0100001000AE
+:102CD00000302C010001000000482C010001000020
+:102CE00000582C010004000000602C0100020000CC
+:102CF00000D02C010080000000D82C0100047000DE
+:102D000080E02C010000040004E82C0100C0000059
+:102D100000F02C010000100000082D01000100004F
+:102D200000202D010001000000302D0100040000F2
+:102D300000382D010002000000A82D0100800000D5
+:102D400000B02D010004700080B82D0100000400C7
+:102D500004C02D0100C0000000C82D0100001000BB
+:102D600000E02D010001000000F82D01000100002D
+:102D700000082E010004000000102E0100020000D7
+:102D800000782E0100120C1008882E010021FE018F
+:102D900000B82E0100FFFF0000C02E0100FFFF0061
+:102DA00000C82E0100FFFF0000D02E0100FFFF0031
+:102DB00000D82E010001000000E02E0100010001FA
+:102DC00000E82E010001000100F02E0100010000CA
+:102DD00000002F010021FE0100102F010001000062
+:102DE00000382F0100120C1008402F0100040000D1
+:102DF00000502F010002000000582F0100110000B8
+:102E000000A02F01008168AC0FB02F01000300006B
+:102E100000D02F010004000000203001000200005B
+:102E200000283001000100000030300100010000E6
+:102E300000383001000200000040300100010000B5
+:102E40000048300100010000005030010001000086
+:102E50000060300100020000006830010002000044
+:102E60000070300100020000007830010002000014
+:102E700000803001000200000088300100020000E4
+:102E800000903001000200000098300100020000B4
+:102E900000A030010001000000A830010001000086
+:102EA00000B030010001000000B830010001000056
+:102EB00000C030010001000000C830010001000026
+:102EC00000D030010001000000D8300100010000F6
+:102ED00000E030010001000000E8300100010000C6
+:102EE00000F030010001000000F830010001000096
+:102EF0000000310100010000000831010001000064
+:102F00000010310100010000001831010001000033
+:102F10000020310100020000002831010002000001
+:102F200000303101000200000038310100020000D1
+:102F300000403101000200000048310100020000A1
+:102F40000050310100020000005831010002000071
+:102F50000060310100010000006831010001000043
+:102F60000070310100010000007831010001000013
+:102F700000803101000100000088310100010000E3
+:102F800000903101000100000098310100010000B3
+:102F900000A031010001000000A831010001000083
+:102FA00000B031010001000000B831010001000053
+:102FB00000C031010001000000C831010001000023
+:102FC00000D031010001000000D8310100010000F3
+:102FD00000E031010001000000E8310100010000C3
+:102FE00000F031010001000000F831010001000093
+:102FF0000000320100010000000832010001000061
+:103000000010320100010000001832010001000030
+:10301000003832010004000000584F010011000088
+:0930200000684F010001000000EE
+:00000001FF
diff --git a/firmware/nouveau/nva8.ctxprog.ihex b/firmware/nouveau/nva8.ctxprog.ihex
new file mode 100644
index 0000000..59b32f6
--- /dev/null
+++ b/firmware/nouveau/nva8.ctxprog.ihex
@@ -0,0 +1,75 @@
+:100000004E5643500026019C00700000003000094D
+:10001000F54400092D400051E94000440A40000524
+:100020000A40000D0A40008E0070004D1240009DF5
+:100030000070004D0445009700700021054500A1A7
+:100040004744004D7744004D8344001D0070000676
+:1000500018400005006000454544008B30440045D1
+:100060001840004D23400081007000CF1C40009FCD
+:100070000070009F0050004DE04400170070000B1E
+:100080002340004D7E440021064500A1574400A0B6
+:10009000007000010070000300700006274000059A
+:1000A0002840000D006000050070000D0070000683
+:1000B000007000020070000B0070000E0070001C49
+:1000C0000070000C00600000000000FFFF9000FFC7
+:1000D000FF91004DD84400090060004D0048001910
+:1000E00000480096007000CF3B40009F0070009FCA
+:1000F00000500051E94000C0364000800020000858
+:100100000060004F364000C0364000CC3F400051F8
+:10011000364000160070004D004800110060004D90
+:100120000048004D3644008E007000810070004D84
+:100130007144004D7E440083007000000030008058
+:100140002A210007006000010AC0002200200001EF
+:10015000008000CB005000FF00C0004D5F44004D08
+:1001600000480008D244004D7444004D8C44004DBA
+:100170005F44004DE644004D7744004D8344004DFC
+:10018000004800830070004D0745003F02A000407A
+:10019000002000060060004D0045004D8E4400D94F
+:1001A00001200060BB440080022000FFFF38004DAA
+:1001B000D0440000003000CB0050004D1F4500CB64
+:1001C00000500007D444004D0048004D7A4400FC24
+:1001D0001B11004D0048004D7A4400FD1B11004DDD
+:1001E0000048004D7A4400FE1B11004D00480000FD
+:1001F00000200000007000060060004D0048000173
+:10020000002000060060004D0045000A0211004D6C
+:1002100000480000003000FFFFC30000002000077E
+:100220000060000000700008002000FF008000CB8C
+:100230000050004D004800000000004D0048000044
+:1002400000000002021700320020000D02100042E0
+:10025000021E00C0021100C4021100C802110002F7
+:1002600003120002041500000518000905130050D0
+:1002700005150005061100130020000706100000F8
+:100280000711000009110002091200000A11000202
+:100290000B1600280B12002B0B1400010C1100018F
+:1002A0000D1100DA002000001210000014110005EA
+:1002B00014110007141100091411000B141100058A
+:1002C0001A14000C1A1300001C1300041C13002045
+:1002D0001C1400251C1400001F1300041F13000829
+:1002E0001F11000B1F110015002000401F10004DB2
+:1002F000004800060060004D1F450020201100222C
+:100300002011004000200040201000C0201500C82F
+:10031000201100CA201400CF201D0000211200036C
+:10032000211200402116004721120053211200A083
+:10033000211100C0211200CB211100D4211100D8BD
+:100340002115004D004800000000004D0048000B42
+:100350000060004D0048000A0060004D0048000B9E
+:100360000060004DD6400020002000080060004CD6
+:100370000050004D004800E8032000080060004CD9
+:100380000050004D004800040060004A0050004D3D
+:10039000004800FF00C000FF00C8004D004800FFFB
+:1003A00000C000FF00C8004D004800160070008E1D
+:1003B00000700082007000410050004DDC44009548
+:1003C000007000D100500016006000520050000282
+:1003D000007000150070004D2840008E0070004D28
+:1003E000D84400000020000700600000003000FF3B
+:1003F00000C00000002000FF008000090070000E17
+:100400000070004D00480080007000170048000098
+:100410000070004D0048004D0048004D0048004D60
+:100420000048008E0070004DD84400830070004DDD
+:10043000E344004D1045000F0070008C0F4100CBCD
+:100440000050004D00480080022000070060008737
+:100450001445004D00480000000000722020004DAF
+:10046000004500FF0080004D0048004006210007C5
+:10047000006000870420004D004500FF0088004D0B
+:100480000048000F0048004B0048004D1945008F00
+:0F0490000070008C004800CB0050004D00480069
+:00000001FF
diff --git a/firmware/nouveau/nva8.ctxvals.ihex b/firmware/nouveau/nva8.ctxvals.ihex
new file mode 100644
index 0000000..da03cb4
--- /dev/null
+++ b/firmware/nouveau/nva8.ctxvals.ihex
@@ -0,0 +1,475 @@
+:100000004E56435600B1030000430000003000008C
+:10001000004B000000020000005F00000000100024
+:1000200000740000000300000075000000001000D4
+:1000300000880000009D620100890000009D6201AF
+:10004000008A0000000CFE0000900000000040004C
+:10005000009B00000087010000A0000000181000B5
+:1000600000A1000000FF000000B400000004000038
+:1000700000B5000000DF002514B7000000000600F6
+:1000800000BD00000000000001BE000000FF0000F5
+:1000900000C000000000040000C6000000010000D5
+:1000A00000C700000001000000CB000000020000BB
+:1000B00000CC00000001000000D0000000010000A2
+:1000C00000D100000000010000D700000002000085
+:1000D00000D800000001000000D90000000100006D
+:1000E00000DD00000001000000DE000000FFFF3F17
+:1000F00000DF000000FF1F0000E100000001000021
+:1001000000E200000001000000E400000001000027
+:1001100000E500000001000000E600000001000012
+:1001200000E700000004000000E8000000010000FB
+:1001300000EA00000001000000EB000000010000E8
+:1001400000EC00000007000000ED000000010000CE
+:1001500000EE00000007000000EF000000010000BA
+:1001600000F000000001000000F1000000010000AC
+:1001700000F600000001000000F700000000010090
+:1001800000F900000001000000FC00000000010078
+:1001900000FD00000001000000FE00000000010062
+:1001A0000000010000010000000301000000010048
+:1001B00000080100000400000009010000700000B8
+:1001C000000A01000080000000100100000C000087
+:1001D00000120100000800000013010000140000DC
+:1001E0000015010000290000001601000027000092
+:1001F00000170100002600000018010000080000A0
+:100200000019010000040000001A0100002700008E
+:10021000001D010000010000001E0100000200009E
+:10022000001F010000030000002001000004000086
+:10023000002101000005000000220100000600006E
+:10024000002301000007000000240100000100005D
+:100250000035010000CF00000041010000800000D7
+:1002600000420100000400000043010000040000FF
+:1002700000440100000300000046010000030000EC
+:100280000047010000010000004A010000120000C8
+:10029000004B010000100000004C0100000C0000A9
+:1002A000004D0100000100000051010000040000A9
+:1002B0000052010000020000005301000004000091
+:1002C0000057010000FFFF3F0058010000FF1F0022
+:1002D0000062010000010000006301000001000055
+:1002E000006401000002000000660100000400003C
+:1002F0000067010000140000006801000001000018
+:10030000006C01000002000000710100000100000B
+:1003100000730100000200000074010000001000E2
+:100320000075010000000E000076010000001000C2
+:100330000077010000001E000079010000010000AC
+:10034000007A010000010000007B010000010000B4
+:10035000007C010000010000007D010000010000A0
+:100360000081010000000200008201000000020084
+:1003700000840100000100000085010000F0000081
+:100380000086010000FF000000890100000100005C
+:10039000008A010000F00000008B010000FF000057
+:1003A000008D010000090000009001000001000024
+:1003B0000091010000CF0000009301000001000047
+:1003C0000097010000CF000000990100000200002A
+:1003D000009B010000010000009D010000010000E1
+:1003E000009F010000CF000000A0010000CF00002E
+:1003F00000A101000001000000A201000080000E29
+:1004000000A301000004000000A8010000801F00FC
+:1004100000A901000030000000AE01000021F874C6
+:100420003BAF01000001800589B101000000100010
+:1004300000B2010000FF000000B4010000FA107CCF
+:1004400002B5010000C0000040B601000080208914
+:10045000B7BB01000001000000BC01000040003DEE
+:1004600000BE01000022000000C601000040003D67
+:1004700000C701000022000000D90100000AFF00AF
+:1004800000DB01000000008001DC0100000000161C
+:1004900000DD01000000008001E1010000FFFF031A
+:1004A00000E201000000000C30EB0100000104013B
+:1004B00000ED01000078000000EF010000BF000027
+:1004C00000F101000010120000F2010000800000A5
+:1004D00008F50100003E000000FB01000000008064
+:1004E00001FC01000000001600FD0100000000807A
+:1004F0000101020000FFFF03000202000000000CE7
+:10050000300B020000010401000D02000078000021
+:10051000000F020000BF00000011020000101200D6
+:10052000001202000080000008150200003E0000DA
+:10053000001C0200007070120520020000FFFFFF87
+:10054000072702000007041200280200000715090F
+:100550000529020000020201052A0200000102032F
+:10056000003302000040000000340200000A0B0CBF
+:100570000D350200001012140036020000F00100D8
+:1005800000370200000100000038020000030000F4
+:10059000003B020000009E03003C0200000001003E
+:1005A000003D020000003800003E02000007E03F6E
+:1005B000003F02000000E03F0040020000404040D9
+:1005C000004102000007F0FF6C42020000FF7FBF05
+:1005D000028102000004000000860200003F0000CB
+:1005E0000089020000040000008B020000010000EE
+:1005F000008D0200008168AC0F99020000800000AD
+:1006000000A102000004000000A9020000140C0870
+:1006100000AF020000140C0800B30200000F00003D
+:1006200000B9020000FF070000C702000004080034
+:1006300000D702000004000000DE020000020000FB
+:1006400000DF02000004000000E6020000000000DD
+:1006500004E7020000120C1008ED020000DFBFE307
+:1006600004EE02000000000004F5020000DFBFE31A
+:1006700004F702000004000000FB0200002000005C
+:1006800000FF020000040000000F03000010000043
+:1006900000150300001100000025030000DFBFE388
+:1006A000042D030000DFBFE3043603000004000054
+:1006B0000037030000040800003F030000010000B1
+:1006C000004503000011000000470300001A00006D
+:1006D000004F0300007F00000056030000040000EC
+:1006E000005F0300000100000067030000140C0815
+:1006F0000077030000120C10087F030000040000C4
+:100700000087030000040000008B0300001A0000B3
+:100710000095030000020000009703000010000095
+:1007200000A5030000677E0800B703000001000079
+:1007300000BF030000120C1008CD030000010000F0
+:1007400000E603000001000000EE030000011000BD
+:1007500000F6030000FFFF0000F7030000FF0700A2
+:1007600000FB03000004000000FE030000FFFF0088
+:1007700000FF030000140C08000304000004000044
+:100780000006040000FFFF00000D0400001500003B
+:10079000000E040000FFFF0000130400000400002E
+:1007A000001B040000080000001D04000001000000
+:1007B0000025040000100000002B040000FF0700CB
+:1007C00000320400000400000033040000001E009A
+:1007D000003A040000040000003D04000001000095
+:1007E0000065040000040000006D04000000040027
+:1007F0000075040000000300007D040000011000EB
+:10080000009B0400000F000000B50400000200007F
+:1008100000FD0400000100000005050000100000BC
+:100820000015050000010000001605000000008012
+:100830003F1E0500000000803F26050000000080EC
+:100840003F2E0500000000803F36050000000080BC
+:100850003F3E0500000000803F460500000000808C
+:100860003F4E0500000000803F560500000000805C
+:100870003F5E0500000000803F660500000000802C
+:100880003F6E0500000000803F76050000000080FC
+:100890003F7E0500000000803F86050000000080CC
+:1008A0003F8E0500000000803F960500001000000C
+:1008B00000AE05000003000000B5050000100000B8
+:1008C00000C705000001000000DF05000010000067
+:1008D000001E0600000000000426060000000000C4
+:1008E0000436060000800000003D06000000008085
+:1008F0003F450600000000803F4D060000000080DC
+:100900003F550600000000803F56060000800000B2
+:10091000005D0600000000803F65060000000080CA
+:100920003F6D0600000000803F750600000000805B
+:100930003F7D0600000000803F850600000000802B
+:100940003F8D0600000000803F8E06000001000081
+:1009500000950600000000803F96060000000100A0
+:10096000009D0600000000803F9E06000000010080
+:1009700000A50600000000803FA606000011000050
+:1009800000AD0600000000803FB5060000000080BA
+:100990003FB606000008000000E606000001000067
+:1009A00000F606000001000000FE06000001000045
+:1009B0000006070000010000000E070000CF000045
+:1009C0000016070000020000004E070000010000B2
+:1009D000005E070000010000006607000001000043
+:1009E000006E0700000100000085070000100000F5
+:1009F00000950700003F000000960700000400007B
+:100A000000A607000001000000A707000088000002
+:100A100000AE07000015000000AF070000880000CE
+:100A200000C707000004000000CD0700000100001F
+:100A300000CE07000080444404DD070000010000F0
+:100A400000ED070000010000000508000001100093
+:100A50000065080000110000007F0800002600006B
+:100A600000970800000000803FA50800000F00006C
+:100A700000BF0800001A000000C7080000100000B6
+:100A800000E5080000110000001D09000001000041
+:100A90000025090000010000002D090000010000F0
+:100AA0000035090000020000003D090000010000BF
+:100AB0000045090000020000004D0900000100008F
+:100AC000005D090000677E08006D0900008168ACC8
+:100AD0000F7D0900000100000085090000010000F1
+:100AE000008D0900000100000095090000010000D0
+:100AF000009D09000001000000A5090000010000A0
+:100B000000A609000001000000AD0900000100007E
+:100B100000B509000001000000B609000001000056
+:100B200000BD09000001000000C50900000100002F
+:100B300000CD09000001000000D5090000010000FF
+:100B400000D60900008824712ADD09000001000098
+:100B500000E509000001000000E609000000C08572
+:100B600040ED09000001000000EE09000040000017
+:100B700000F509000001000000F609000000010076
+:100B800000FD09000001000000FE09000000010155
+:100B900000050A000001000000060A0000000080B5
+:100BA000020D0A0000010000000F0A0000520000C0
+:100BB00000150A0000010000001D0A0000010000ED
+:100BC000001F0A000026000000250A0000010000A6
+:100BD000002D0A0000010000002F0A0000040000A0
+:100BE00000350A000001000000370A000004000080
+:100BF000003D0A000002000000450A00000200005B
+:100C000000470A00001A0000004D0A000002000020
+:100C100000550A0000020000005D0A00000200000A
+:100C2000005F0A000000FFFF00650A0000020000EC
+:100C3000006D0A000002000000750A0000020000BA
+:100C4000007D0A000001000000850A00000100008C
+:100C500000860A0000010000008D0A00000100006B
+:100C600000950A0000010000009D0A00000100003C
+:100C700000A50A000001000000AD0A00000100000C
+:100C800000B50A000001000000BD0A0000020000DB
+:100C900000C50A000002000000CD0A0000020000AA
+:100CA00000D50A000002000000DD0A00000200007A
+:100CB00000E50A000002000000ED0A00000200004A
+:100CC00000EE0A00000F000000F50A00000200001C
+:100CD00000FD0A000001000000050B0000010000FB
+:100CE000000D0B000001000000150B0000010000CA
+:100CF000001D0B000001000000250B00000100009A
+:100D0000002D0B000001000000350B000001000069
+:100D1000004E0B000004000000550B000001000015
+:100D200000560B0000FFFF00005E0B0000FFFF00FD
+:100D300000660B0000FFFF00006E0B0000FFFF00CD
+:100D400000850B000001000000B60B000001000050
+:100D500000D60B000001000000060C00000100009E
+:100D6000001E0C0000030000003D0C00000100000C
+:100D700000450C0000020000004D0C0000010000C6
+:100D800000550C0000010000005D0C000002000096
+:100D900000650C0000010000006D0C000001000067
+:100DA000007E0C000001000000860C000001000025
+:100DB000008E0C000002000000950C0000010000F5
+:100DC00000960C0000010000009D0C0000010000D6
+:100DD000009E0C000001000000A50C0000010000B6
+:100DE00000A60C000002000000AD0C000001000095
+:100DF00000B50C000001000000B60C00000100006E
+:100E000000BD0C000001000000BE0C00000100004D
+:100E100000C50C000001000000C60C00000100002D
+:100E200000CD0C000001000000CE0C00000100000D
+:100E300000D50C000001000000D60C0000010000ED
+:100E400000DD0C000001000000DE0C0000010000CD
+:100E500000E50C000001000000E60C0000010000AD
+:100E600000ED0C000001000000EE0C00000100008D
+:100E700000F50C000001000000F60C00000100006D
+:100E800000FD0C000001000000FE0C00000100004D
+:100E900000050D000001000000060D00000100002B
+:100EA000000D0D0000010000000E0D00000100000B
+:100EB00000150D000002000000160D0000010000EA
+:100EC000001D0D0000020000001E0D0000010000CA
+:100ED00000250D000002000000260D0000010000AA
+:100EE000002D0D0000020000002E0D00000100008A
+:100EF00000350D000002000000360D00000100006A
+:100F0000003D0D0000020000003E0D000001000049
+:100F100000450D000002000000460D000001000029
+:100F2000004D0D0000020000004E0D000001000009
+:100F300000550D000001000000560D0000010000EA
+:100F4000005D0D0000010000005E0D0000010000CA
+:100F500000650D000001000000660D0000010000AA
+:100F6000006D0D0000010000006E0D00000100008A
+:100F700000750D000001000000760D000002000069
+:100F8000007D0D0000010000007E0D000002000049
+:100F900000850D000001000000860D000002000029
+:100FA000008D0D0000010000008E0D000002000009
+:100FB00000950D000001000000960D0000020000E9
+:100FC000009D0D0000010000009E0D0000020000C9
+:100FD00000A50D000001000000A60D0000020000A9
+:100FE00000AD0D000001000000AE0D000002000089
+:100FF00000B50D000001000000B60D00000100006A
+:1010000000BD0D000001000000BE0D000001000049
+:1010100000C50D000001000000C60D000001000029
+:1010200000CD0D000001000000CE0D000001000009
+:1010300000D50D000002000000D60D0000010000E8
+:1010400000DD0D000002000000DE0D0000010000C8
+:1010500000E50D000002000000E60D0000010000A8
+:1010600000ED0D000002000000EE0D000001000088
+:1010700000F50D000002000000F60D000002000067
+:1010800000FD0D000002000000FE0D000002000047
+:1010900000050E000002000000060E000002000025
+:1010A000000D0E0000020000000E0E000002000005
+:1010B00000150E000001000000160E0000020000E6
+:1010C000001D0E0000010000001E0E0000020000C6
+:1010D00000250E000001000000260E0000020000A6
+:1010E000002D0E0000010000002E0E000002000086
+:1010F00000350E000001000000360E000001000067
+:10110000003D0E0000010000003E0E000001000046
+:1011100000450E000001000000460E000001000026
+:10112000004D0E0000010000004E0E000001000006
+:1011300000560E0000010000005E0E0000010000DD
+:1011400000660E0000010000006D0E00001100009E
+:10115000006E0E000001000000750E00000100008E
+:10116000007E0E0000010000008E0E000011000045
+:1011700000CE0E00008168AC0FE60E0000040000F7
+:1011800000060F0000110000000E0F00000100001B
+:10119000001E0F0000CF000000260F0000CF00004F
+:1011A000002E0F0000CF000000360F0000010000ED
+:1011B000008E0F000001000000960F0000010000EB
+:1011C000009E0F000002000000A60F0000010000BA
+:1011D00000AE0F000001000000B60F00000200008A
+:1011E00000BE0F000001000000CE0F000001000053
+:1011F00000D60F000001000000DE0F00000100001B
+:1012000000E60F000001000000EE0F0000010000EA
+:1012100000F60F000001000000FE0F0000010000BA
+:101220000006100000010000000E10000011000078
+:10123000004E1000008168AC0F561000000F000037
+:101240000096100000677E0800AE1000001100003C
+:1012500000B610000001000000BE100000010000F8
+:1012600000DE100000040000000E1100000100006C
+:10127000003611000011000000761100008168ACFA
+:101280000F96110000110000009E110000010000E7
+:1012900000AE11000001000000BE110000010000BE
+:1012A00000CE110000FF070000DE11000001000069
+:1012B00000EE110000010000000612000001000015
+:1012C000004E130000080000005613000008000044
+:1012D000005E130000080000006613000008000014
+:1012E000006E1300000800000076130000080000E4
+:1012F000007E1300000800000086130000080000B4
+:10130000008E13000011000000CE1300008168ACB5
+:101310000FD613000000040000DE130000000400DC
+:1013200000E613000000040000EE130000000400BB
+:1013300000F613000000040000FE1300000004008B
+:101340000006140000000400000E14000000040059
+:101350000016140000000300001E1400000003002B
+:101360000026140000000300002E140000000300FB
+:101370000036140000000300003E140000000300CB
+:101380000046140000000300004E1400000003009B
+:101390000056140000010000005B1400000F000064
+:1013A000005E1400000F0000007B1400000100002C
+:1013B000009E14000020000000A614000011000090
+:1013C00000AE14000000010000BE14000001000087
+:1013D00000D614000040000000DE140000000100F0
+:1013E00000EE1400000300000016150000010000CC
+:1013F000001E150000677E08003E15000002000078
+:1014000000461500008168AC0F9615000001000031
+:1014100000BE15000004000000CE15000001000011
+:1014200000D615000000040000DE150000000300D7
+:1014300000E6150000011000000E1600001100006B
+:10144000004E1600008168AC0F561600000F000019
+:10145000000617000001000000261700008168AC9C
+:101460000F2E170000677E08004E170000110000C5
+:10147000006617000004000000761700000100005D
+:10148000007E170000010000009E17000001000010
+:1014900000A617000001000000D61700008168AC0C
+:1014A0000FFE170000040000000E180000010000ED
+:1014B0000016180000010000002E180000010000B6
+:1014C000008E1800000100000096180000010000C6
+:1014D000009E18000001000000A618000001000096
+:1014E00000AE18000001000000B618000001000066
+:1014F00000BE18000001000000C618000001000036
+:1015000000CE180000110000000E1900008168AC28
+:101510000F161900000F00000056190000110000FE
+:10152000005E190000010000008B1900000F000090
+:10153000009619000001000000CE190000DFBFE393
+:1015400004D6190000DFBFE304DE1900000100002B
+:1015500000EE19000000FFFF00F619000001000076
+:1015600000FE19000001000000161A000000FFFF35
+:10157000005E1A0000010000006E1A000001000069
+:1015800000761A0000001020307E1A0000405060E3
+:1015900070861A00008898A8B88E1A0000C8D8E88B
+:1015A000F89E1A00001A000000AE1A0000040000A5
+:1015B00000D61B000004000000DE1B000004000039
+:1015C00000E61B0000000102030E1C0000040000E6
+:1015D00000261C0000040000002E1C000004000077
+:1015E00000361C0000800000003E1C0000001E00B1
+:1015F00000461C0000040000006E1D0000040000F6
+:1016000000761D0000800000007E1D000004000028
+:1016100000861D0000000102038E1D000003000073
+:1016200000961D0000001E00009E1D00000400002A
+:1016300000C61D000004000000CE1D0000030000D5
+:1016400000EE1D000004000000F01E00002100005C
+:1016500000F81E000001000000001F000002000052
+:1016600000081F000000010000101F000000010022
+:1016700000181F000001000000301F0000010000E2
+:1016800000381F000002000000401F0000000100A1
+:1016900000481F000000010000501F000001000072
+:1016A00000963E0000040000009E3E000003000083
+:1016B00000D144000004000000D9440000040000F0
+:1016C00000E944000080000000F144000004000034
+:1016D00000F9440000010000000945000027000057
+:1016E00000194500002600000054560000FFFF3F8F
+:1016F000006C560000FF1F0000635F00000F000039
+:1017000000F869000000000004006A00000000000A
+:1017100004086A000000000004106A0000000000D5
+:1017200004186A000000000004206A0000000000A5
+:1017300004286A000000000004306A000000000075
+:1017400004386A000000000004406A000000000045
+:1017500004486A000000000004506A000000000015
+:1017600004586A000000000004606A0000000000E5
+:1017700004686A000000000004706A0000000000B5
+:1017800004986B0000DFBFE304A06B0000DFBFE341
+:1017900004B86B000021FE0100C06B00008168AC42
+:1017A0000FC86B000001000000086C0000120C1054
+:1017B00008306C000000010000486C0000010001CE
+:1017C00000586C000001000100606C000001000086
+:1017D00000686C000001000100706C000001000056
+:1017E00000786C000004000000806C000002000023
+:1017F00000F06F00000000803F287000000400002F
+:1018000000307000001A0000004870000001000065
+:1018100000E070000000FFFF00187100000F0000E2
+:1018200000587100008168AC0F6071000011000069
+:1018300000E071000004000000F8710000030000E7
+:10184000001072000002000000187200000000008A
+:101850000420720000000000044072000005000037
+:101860000048720000520000007072000001000089
+:1018700000007300000000803F087300000000803B
+:101880003F107300000000803F18730000000080CC
+:101890003F207300000000803F287300000000809C
+:1018A0003F307300000000803F387300000000806C
+:1018B0003F407300000000803F487300000000803C
+:1018C0003F507300000000803F587300000000800C
+:1018D0003F607300000000803F68730000000080DC
+:1018E0003F707300000000803F78730000000080AC
+:1018F0003F8073000010000000B8740000120C104C
+:1019000008C074000005000000D874000001000049
+:1019100000E8740000FFFF0000F0740000FFFF000B
+:1019200000F8740000FFFF000000750000FFFF00DA
+:101930000008750000030000007075000000FFFF44
+:1019400000787500001A0000008875000003000090
+:1019500000707700000201000080770000040000A2
+:101960000088770000040000009077000004000069
+:10197000009877000004000000E0770000040000F9
+:1019800000E877000004000000F8770000FF07007F
+:1019900000087800000201000058780000040000F0
+:1019A0000060780000040000006878000004000077
+:1019B000007078000004000000AAE60000040000A7
+:1019C00000B2E6000004000000BAE60000120C10AD
+:1019D00008C2E6000003000000D2E60000120C106E
+:1019E00008E2E60000140C0800EAE600000100002E
+:1019F00000F2E6000004000000FAE6000004000027
+:101A00000002E70000140C08001AE70000120C1096
+:101A10000822E70000270000003AE700000100006C
+:101A2000004A0501000100000002060100120C102E
+:101A30000840060100120C1008500601008000004A
+:101A400000580601000470008060060100000400D8
+:101A50000468060100C000000070060100001000CC
+:101A60000088060100000E000090060100001E0024
+:101A7000009806010001000000B00601000100000E
+:101A800000C006010004000000C8060100020000BA
+:101A900000380701008000000040070100047000CA
+:101AA00080480701000004000450070100C0000046
+:101AB00000580701000010000070070100000E0030
+:101AC0000078070100001E000080070100010000EF
+:101AD000009807010001000000A8070100040000B1
+:101AE00000B00701000200000018080100120C10ED
+:101AF000082808010021FE010058080100FFFF002E
+:101B00000060080100FFFF000068080100FFFF00FF
+:101B10000070080100FFFF000078080100010000CC
+:101B20000080080100010001008808010001000197
+:101B3000009008010001000000A008010021FE0142
+:101B400000B008010001000000D8080100120C10CC
+:101B500008E008010004000000F008010002000095
+:101B600000F808010011000000400901008168AC84
+:101B70000F5009010003000000700901000400007B
+:101B800000C009010002000000C8090100010000B6
+:101B900000D009010001000000D809010002000086
+:101BA00000E009010001000000E809010001000057
+:101BB00000F009010001000000000A01000200001D
+:101BC00000080A010002000000100A0100020000E3
+:101BD00000180A010002000000200A0100020000B3
+:101BE00000280A010002000000300A010002000083
+:101BF00000380A010002000000400A010001000054
+:101C000000480A010001000000500A010001000024
+:101C100000580A010001000000600A0100010000F4
+:101C200000680A010001000000700A0100010000C4
+:101C300000780A010001000000800A010001000094
+:101C400000880A010001000000900A010001000064
+:101C500000980A010001000000A00A010001000034
+:101C600000A80A010001000000B00A010001000004
+:101C700000B80A010001000000C00A0100020000D3
+:101C800000C80A010002000000D00A0100020000A2
+:101C900000D80A010002000000E00A010002000072
+:101CA00000E80A010002000000F00A010002000042
+:101CB00000F80A010002000000000B010001000012
+:101CC00000080B010001000000100B0100010000E2
+:101CD00000180B010001000000200B0100010000B2
+:101CE00000280B010001000000300B010001000082
+:101CF00000380B010001000000400B010001000052
+:101D000000480B010001000000500B010001000021
+:101D100000580B010001000000600B0100010000F1
+:101D200000680B010001000000700B0100010000C1
+:101D300000780B010001000000800B010001000091
+:101D400000880B010001000000900B010001000061
+:101D500000980B010001000000A00B010001000031
+:101D600000A80B010001000000B00B010001000001
+:101D700000B80B010001000000D80B0100040000B6
+:101D800000F82801001100000008290100010000EE
+:011D90000052
+:00000001FF
diff --git a/firmware/nouveau/nvaa.ctxprog.ihex b/firmware/nouveau/nvaa.ctxprog.ihex
new file mode 100644
index 0000000..cd811f0
--- /dev/null
+++ b/firmware/nouveau/nvaa.ctxprog.ihex
@@ -0,0 +1,79 @@
+:100000004E5643500034019C00700000003000093F
+:10001000F14400092D400051E54000440A4000052C
+:100020000A40000D0A40008E0070004D1240009DF5
+:100030000070004D0045009700700021014500A1AF
+:100040004644004D7644004D8244001D0070000679
+:1000500018400005006000454444008B30440045D2
+:100060001840004D23400081007000CF1C40009FCD
+:100070000070009F0050004DDC4400170070000B22
+:100080002340004D7D440021024500A1564400A0BC
+:10009000007000010070000300700006274000059A
+:1000A0002840000D006000050070000D0070000683
+:1000B000007000020070000B0070000E0070001C49
+:1000C0000070000C00600000000000FFFF9000FFC7
+:1000D000FF91004DD44400090060004D0048009697
+:1000E000007000CF3A40009F0070009F0050005108
+:1000F000E54000C036400080002000080060004F4E
+:10010000364000C0364000CC3E400051364000161C
+:100110000070004D004800110060004D0048004D87
+:100120003644008E007000810070004D7044004D18
+:100130007D4400830070000000300040272100074C
+:10014000006000010BC0002200200001008000CBF5
+:10015000005000FF00C0004D5E44004D0048000804
+:10016000CE44004D7344004D8B44004D5E44004D21
+:10017000E244004D7644004D8244004D0048008327
+:100180000070004D0345003F02A000400020000623
+:100190000060004DFC44004D8D4400D00120006003
+:1001A000B8440080022000FFFF38004DCC4400001E
+:1001B000003000CB0050004D1C4500CB0050000724
+:1001C000D044004D0048004D794400FC1B11004D07
+:1001D0000048004D794400FD1B11004D0048004DC2
+:1001E000794400FE1B11004D004800000020000073
+:1001F000007000060060004D00480001002000066D
+:100200000060004DFC44000A0211004D004800004F
+:10021000003000FFFFC30000002000070060000066
+:1002200000700008002000FF008000CB0050004D4F
+:10023000004800000000004D0048000000000002DF
+:10024000021700320020000D02100042021E00C002
+:100250000211000203120002041500000518000933
+:1002600005130050051500050611001300200007B6
+:100270000610000007110000091100020912000019
+:100280000A1100020B1600280B12002B0B140001A0
+:100290000C1100010D1100001411000514110007CC
+:1002A000141100091411000B141100D400200000D7
+:1002B000151000051A14000C1A1300001C1300047A
+:1002C0001C1300201C1400251C1300001F13000425
+:1002D0001F1300081F11000B1F1100150020004004
+:1002E0001F10004D004800060060004D1C45002016
+:1002F000201100222011008500200040201000C89D
+:10030000201100CA201400CF201B0000211200037E
+:10031000211200402116004721120053211200A093
+:10032000211100C0211200CB211100D4211100D8CD
+:100330002115004D004800000000004D0048000B52
+:100340000060004D0048000A0060004D0048000BAE
+:100350000060004DD2400020002000080060004CEA
+:100360000050004D004800E8032000080060004CE9
+:100370000050004D004800040060004A0050004D4D
+:10038000004800FF00C000FF00C8004D004800FF0B
+:1003900000C000FF00C8004D004800160070008E2D
+:1003A00000700082007000410050004DD84400955C
+:1003B000007000D100500016006000520050000292
+:1003C000007000150070004D2840008E0070004D38
+:1003D000D44400000020000700600000003000FF4F
+:1003E00000C00000002000FF008000090070000E27
+:1003F0000070004D004800800070001700480000A9
+:100400000070004D0048004D0048004D0048004D70
+:100410000048008E0070004DD44400830070004DF1
+:10042000DF44004D0C45000F0070008C0B4100CBE9
+:100430000050004D004800800220000700600007C7
+:10044000234500871145004D004800000000007062
+:100450002020004DFC4400FF0080004D00480000BB
+:1004600006210007006000280420004DFC4400FF26
+:100470000088004D0048000F0048004B0048004D28
+:100480001645008F0070008C004800CB0050004DD6
+:10049000004800702020004DFC4400FD008000CB8F
+:1004A0000050000200C000800220000700600061D0
+:1004B0000120004DFC440002008000CB00500002EF
+:1004C00000C0000E1F20004DFC440002008000CB45
+:0704D0000050004D00480040
+:00000001FF
diff --git a/firmware/nouveau/nvaa.ctxvals.ihex b/firmware/nouveau/nvaa.ctxvals.ihex
new file mode 100644
index 0000000..9e7fb6a
--- /dev/null
+++ b/firmware/nouveau/nvaa.ctxvals.ihex
@@ -0,0 +1,356 @@
+:100000004E56435600C4020000430000003000007A
+:10001000004B00000002000000740000000300001C
+:10002000007500000000100000880000000CFE00B9
+:10003000008E000000001000009900000087010001
+:10004000009E000000181000009F000000FF00004C
+:1000500000B200000004000000B3000000DF002533
+:1000600004B500000000060000BB00000000000016
+:1000700001BC000000FF000000BE000000000800FE
+:1000800000C400000001000000C5000000010000E5
+:1000900000C600000080000E00C700000004000041
+:1000A00000CE00000002000000CF000000010000B0
+:1000B00000D300000001000000D400000000010097
+:1000C00000DA00000002000000DB00000001000078
+:1000D00000DC00000001000000E000000001000062
+:1000E00000E1000000FFFF3F00E2000000FF1F00F2
+:1000F00000E400000001000000E500000001000035
+:1001000000E700000001000000E80000000100001E
+:1001100000E900000001000000EA00000004000007
+:1001200000EB00000001000000EC000000010000F6
+:1001300000ED00000001000000EE000000070000DC
+:1001400000EF00000001000000F0000000070000C8
+:1001500000F100000001000000F2000000010000BA
+:1001600000F300000001000000F8000000010000A2
+:1001700000F900000000010000FB00000001000089
+:1001800000FE00000000010000FF00000001000070
+:100190000000010000000100000201000001000059
+:1001A0000005010000000100000A01000004000039
+:1001B000000B010000700000000C01000080000036
+:1001C00000110100000C00000013010000080000F5
+:1001D00000140100001400000016010000290000B6
+:1001E0000017010000270000001801000026000091
+:1001F0000019010000080000001A010000040000BE
+:10020000001B010000270000001E0100000100008B
+:10021000001F010000020000002001000003000098
+:100220000021010000040000002201000005000080
+:100230000023010000060000002401000007000068
+:1002400000250100000100000036010000CF000081
+:100250000042010000800000004301000004000093
+:1002600000440100000400000045010000030000FC
+:1002700000460100000100000049010000120000DA
+:10028000004A010000100000004B0100000C0000BB
+:10029000004C0100000100000050010000040000BB
+:1002A00000510100000200000052010000040000A3
+:1002B0000056010000FFFF3F0057010000FF1F0034
+:1002C0000061010000010000006201000001000067
+:1002D000006301000002000000650100000400004E
+:1002E000006601000014000000670100000100002A
+:1002F000006A010000020000006F01000001000020
+:1003000000710100000200000072010000001000F6
+:100310000073010000000E000074010000001000D6
+:100320000075010000001E000077010000010000C0
+:1003300000780100000100000079010000010000C8
+:10034000007A010000010000007B010000010000B4
+:10035000007F010000000200008101000001000098
+:100360000082010000F000000083010000FF000097
+:1003700000860100000100000087010000F000007D
+:100380000088010000FF0000008A01000009000051
+:10039000008D010000010000008E010000CF000070
+:1003A00000900100000100000094010000CF000057
+:1003B000009601000002000000980100000100000A
+:1003C000009A010000010000009C010000CF000025
+:1003D000009D010000CF0000009E01000001000010
+:1003E00000A0010000801F0000A601000021F87499
+:1003F0003BA701000001800589A901000000100051
+:1004000000AA010000FF000000AC010000FA107C0F
+:1004100002AD010000C0000040AE01000080208954
+:10042000B7B301000040003D00B50100002200000C
+:1004300000BD01000040003D00BE010000220000A0
+:1004400000D00100000AFF0000D20100000000807F
+:1004500001D301000000001600D40100000000805C
+:1004600001D8010000FFFF0300D901000000000CCB
+:1004700030E201000001040100E401000078000006
+:1004800000E6010000BF000000E8010000101200BB
+:1004900000E901000080000008EC0100003E0000BF
+:1004A00000F201000000008001F3010000000016CE
+:1004B00000F401000000008001F8010000FFFF03CC
+:1004C00000F901000000000C3002020000010401EC
+:1004D00000040200007800000006020000BF0000D7
+:1004E0000008020000101200000902000080000055
+:1004F000080C0200003E0000001202000000008014
+:100500000113020000000016001402000000008029
+:100510000118020000FFFF03001902000000000C98
+:1005200030220200000104010024020000780000D3
+:100530000026020000BF0000002802000010120088
+:100540000029020000800000082C0200003E00008C
+:10055000003202000000008001330200000000169B
+:1005600000340200000000800138020000FFFF0399
+:10057000003902000000000C3042020000010401BA
+:1005800000440200007800000046020000BF0000A6
+:100590000048020000101200004902000080000024
+:1005A000084C0200003E0000005302000070701270
+:1005B0000157020000FFFFFF075E02000007041260
+:1005C000005F020000071509056002000002020139
+:1005D0000561020000010203006802000040000003
+:1005E00000690200000A0B0C0D6A020000101214D0
+:1005F000006B020000F00100006C0200000100002E
+:10060000006D020000030000006E02000000800088
+:100610000070020000009E03007102000000010053
+:100620000072020000003800007302000006E03F84
+:10063000007402000000E03F0075020000404040EE
+:10064000007602000007F0F70C77020000FF7FBF82
+:10065000028102000004000000860200003F00004A
+:100660000089020000040000008B0200000100006D
+:10067000008D0200008168AC0F990200008000002C
+:1006800000A102000004000000A9020000140C08F0
+:1006900000AF020000140C0800B30200000F0000BD
+:1006A00000B9020000FF070000C7020000040800B4
+:1006B00000D702000004000000DB02000020000060
+:1006C00000DE02000002000000DF02000004000063
+:1006D00000E602000000000004E7020000120C1017
+:1006E00008ED020000DFBFE304EE0200000000009E
+:1006F00004F5020000DFBFE304F70200000400007D
+:1007000000FF020000040000000F030000100000C2
+:10071000001D030000DFBFE30425030000DFBFE38B
+:100720000436030000040000003703000004080042
+:10073000003F03000001000000470300001A000012
+:10074000004F0300007F000000560300000400007B
+:10075000005B0300001A0000005F030000010000BE
+:100760000067030000140C080077030000120C104F
+:10077000087F030000040000008503000002000061
+:100780000087030000040000009503000067FE1FBF
+:10079000009703000010000000B7030000010000F4
+:1007A00000BF030000120C1008CB0300000400007F
+:1007B00000D303000004000000E303000004000075
+:1007C00000E603000001000000EB03000008000049
+:1007D00000EE03000001100000F6030000FFFF0020
+:1007E00000F7030000FF070000FB030000FF070005
+:1007F00000FD03000001000000FE030000FFFF00F9
+:1008000000FF030000140C080005040000100000A5
+:100810000006040000FFFF00000E040000FFFF00C0
+:10082000001D04000001000000320400000400006C
+:10083000003A040000040000004504000004000029
+:10084000004D0400000004000055040000000300F7
+:10085000005D04000001100000630400000F0000B0
+:10086000006504000015000000950400000200006F
+:1008700000DD04000001000000E50400001000009D
+:1008800000F50400000100000016050000000080D3
+:100890003F1E0500000000803F260500000000808C
+:1008A0003F2E0500000000803F360500000000805C
+:1008B0003F3E0500000000803F460500000000802C
+:1008C0003F4E0500000000803F56050000000080FC
+:1008D0003F5E0500000000803F66050000000080CC
+:1008E0003F6E0500000000803F760500000000809C
+:1008F0003F7E0500000000803F860500000000806C
+:100900003F8E0500000000803F95050000100000AC
+:10091000009605000010000000AE05000003000076
+:1009200000C705000001000000DF05000010000006
+:10093000001D0600000000803F1E060000000000B1
+:1009400004250600000000803F260600000000008D
+:10095000042D0600000000803F35060000000080E6
+:100960003F36060000800000003D060000000080C9
+:100970003F450600000000803F4D0600000000805B
+:100980003F550600000000803F5606000080000032
+:10099000005D0600000000803F650600000000804A
+:1009A0003F6D0600000000803F75060000000080DB
+:1009B0003F7D0600000000803F85060000000080AB
+:1009C0003F8D0600000000803F8E06000001000001
+:1009D00000950600000000803F9606000000010020
+:1009E000009E06000000010000A6060000110000A5
+:1009F00000B606000008000000E606000001000046
+:100A000000F606000001000000FE060000010000E4
+:100A10000006070000010000000E070000CF0000E4
+:100A20000016070000020000004E07000001000051
+:100A3000005E0700000100000065070000100000D4
+:100A40000066070000010000006E070000010000C2
+:100A500000750700003F000000960700000400003A
+:100A600000A607000001000000A7070000880000A2
+:100A700000AD07000001000000AE070000150000F7
+:100A800000AF07000088000000BD07000001000063
+:100A900000C707000004000000CD070000010000AF
+:100AA00000CE07000080444404E507000001100068
+:100AB0000045080000110000007F0800002600002B
+:100AC00000850800000F000000970800000000806B
+:100AD0003FB70800001A000000BF08000010000027
+:100AE00000C508000011000000FD08000001000022
+:100AF0000005090000010000000D090000010000D0
+:100B00000015090000020000001D0900000100009E
+:100B10000025090000020000002D0900000100006E
+:100B2000003D09000067FE1F004D0900008168AC10
+:100B30000FA609000001000000B609000001000036
+:100B400000D60900008824712AE609000000C0854B
+:100B500040EE09000040000000F60900000001001E
+:100B600000FE09000000010100060A0000000080EC
+:100B700002070A000052000000170A0000260000C9
+:100B800000270A0000040000002D0A0000010000F8
+:100B9000002F0A000004000000350A0000020000D7
+:100BA000003D0A0000010000003F0A00001A00009A
+:100BB00000450A0000010000004D0A00000200008C
+:100BC00000550A000001000000570A000000FFFF66
+:100BD000005D0A000001000000850A00001100000D
+:100BE000008D0A000001000000D60A00000F00007E
+:100BF00000360B0000040000003E0B0000FFFF0069
+:100C000000460B0000FFFF00004E0B0000FFFF003E
+:100C100000560B0000FFFF00009E0B0000010000CB
+:100C200000BE0B000001000000EE0B000001000000
+:100C300000060C0000010000005E0C000001000036
+:100C400000660C0000010000006E0C0000020000B5
+:100C500000760C0000010000007E0C000001000086
+:100C600000860C0000020000008E0C000001000055
+:100C7000009E0C000011000000DE0C00008168AC3A
+:100C80000FF60C000004000000160D00001100001B
+:100C9000001E0D0000010000002E0D0000CF00001E
+:100CA00000360D0000CF0000003E0D0000CF000018
+:100CB000008B0D00000F000000960D0000010000E9
+:100CC000009B0D0000010000009E0D0000010000CF
+:100CD00000A60D000002000000AE0D0000010000A3
+:100CE00000B60D000001000000BE0D000002000073
+:100CF00000C60D000001000000D60D00000100003C
+:100D000000DE0D000001000000E60D000001000003
+:100D100000EE0D000001000000F60D0000010000D3
+:100D200000FE0D000001000000060E0000010000A2
+:100D3000000E0E000001000000160E000011000061
+:100D400000560E00008168AC0F5E0E00000F000020
+:100D5000009E0E000067FE1F00B60E00001100008E
+:100D600000BE0E000001000000DE0E0000040000C6
+:100D7000000E0F000001000000360F0000110000FF
+:100D800000760F00008168AC0F960F000011000084
+:100D9000009E0F000001000000AE0F0000010000E7
+:100DA00000BE0F000001000000CE0F0000FF070092
+:100DB00000DE0F000001000000EE0F000001000047
+:100DC00000731000000F0000004611000008000032
+:100DD000004E11000008000000561100000800003D
+:100DE000005E11000008000000661100000800000D
+:100DF000006E1100000800000076110000080000DD
+:100E0000007E1100000800000086110000110000A3
+:100E100000C61100008168AC0FCE11000000040074
+:100E200000D611000000040000DE110000000400E4
+:100E300000E611000000040000EE110000000400B4
+:100E400000F611000000040000FE11000000040084
+:100E50000006120000000400000E12000000030053
+:100E60000016120000000300001E12000000030024
+:100E70000026120000000300002E120000000300F4
+:100E80000036120000000300003E120000000300C4
+:100E90000046120000000300004E12000001000096
+:100EA00000561200000F0000009612000020000003
+:100EB000009E12000011000000A6120000000100B8
+:100EC00000B612000001000000CE12000040000039
+:100ED00000D612000000010000E61200000300002E
+:100EE000000E13000067FE1F002E1300000200001A
+:100EF00000361300008168AC0F861300000100006B
+:100F000000AE13000004000000BE1300000100004A
+:100F100000C613000000040000CE13000000030010
+:100F200000D613000001100000F6130000110000AD
+:100F300000361400008168AC0F3E1400000F000062
+:100F400000FE1400008168AC0F0615000067FE1F4C
+:100F50000026150000110000003E150000040000EE
+:100F6000004E1500000100000056150000010000B1
+:100F70000076150000010000009E1500008168AC9D
+:100F80000FC615000004000000D615000001000087
+:100F900000DE15000001000000F615000001000051
+:100FA000004E16000001000000561600000100006F
+:100FB000005E16000001000000661600000100003F
+:100FC000006E16000001000000761600000100000F
+:100FD000007E1600000100000086160000010000DF
+:100FE000008E16000011000000CE1600008168ACD3
+:100FF0000FD61600000F00000016170000110000A9
+:10100000001E170000010000007E170000DFBFE394
+:101010000486170000DFBFE3048E17000001000004
+:10102000009E17000000FFFF00A61700000100004F
+:1010300000BE17000000FFFF0006180000010000BE
+:101040000016180000010000001E1800000010200B
+:101050003026180000405060702E1800008898A8B4
+:10106000B836180000C8D8E8F8461800001A000082
+:10107000005618000004000000FE180000040000E4
+:101080000006190000040000000E19000000010213
+:101090000336190000040000004E1900000400008F
+:1010A0000056190000040000005E190000800000D6
+:1010B0000066190000001E00006E19000004000008
+:1010C00000961A0000040000009E1A000080000034
+:1010D00000A61A000004000000AE1A000000010281
+:1010E00003B61A000003000000BE1A0000001E0034
+:1010F00000C61A000004000000EE1A000004000000
+:1011000000F61A000003000000161B000004000097
+:1011100000E81E000021000000F01E000001000099
+:1011200000F81E000002000000001F000000010087
+:1011300000081F000000010000101F000001000057
+:1011400000281F000001000000301F000002000006
+:1011500000381F000000010000401F0000000100D7
+:1011600000481F000001000000BE2B00000400002A
+:1011700000C62B000003000000D12C00000400007A
+:1011800000D92C000004000000E92C0000800000C1
+:1011900000F12C000004000000F92C000001000008
+:1011A00000092D000027000000192D000026000076
+:1011B00000135200000F00000054560000FFFF3FD4
+:1011C000006C560000FF1F0000F0690000000000E6
+:1011D00004F869000000000004006A00000000003C
+:1011E00004086A000000000004106A00000000000B
+:1011F00004186A000000000004206A0000000000DB
+:1012000004286A000000000004306A0000000000AA
+:1012100004386A000000000004406A00000000007A
+:1012200004486A000000000004506A00000000004A
+:1012300004586A000000000004606A00000000001A
+:1012400004686A000000000004906B0000DFBFE348
+:1012500004986B0000DFBFE304B06B000021FE01C7
+:1012600000B86B00008168AC0FE06B0000120C103E
+:1012700008086C000000010000206C000001000163
+:1012800000306C000001000100386C00000100001B
+:1012900000406C000001000100486C0000010000EB
+:1012A00000506C000004000000586C0000020000B8
+:1012B00000886F00000000803FC06F000004000045
+:1012C00000C86F00001A000000E06F00000100007D
+:1012D000007870000000FFFF00B07000000F0000F9
+:1012E00000F07000008168AC0FF870000011000081
+:1012F00000787100000400000090710000010000FF
+:1013000000A871000002000000B0710000000000A1
+:1013100004B871000000000004D87100000500004E
+:1013200000E071000052000000087200000100009F
+:1013300000907200000000803F9872000000008062
+:101340003FA07200000000803FA8720000000080F3
+:101350003FB07200000000803FB8720000000080C3
+:101360003FC07200000000803FC872000000008093
+:101370003FD07200000000803FD872000000008063
+:101380003FE07200000000803FE872000000008033
+:101390003FF07200000000803FF872000000008003
+:1013A0003F007300000000803F08730000000080D1
+:1013B0003F107300001000000048740000120C1071
+:1013C000085074000005000000687400000100006F
+:1013D0000078740000FFFF000080740000FFFF0031
+:1013E0000088740000FFFF000090740000FFFF0001
+:1013F000009874000003000000B874000000FFFFB4
+:1014000000C07400001A000000D074000003000047
+:1014100000B876000002010000C876000004000059
+:1014200000D076000004000000D876000004000020
+:1014300000E07600000400000028770000040000AF
+:1014400000307700000400000040770000FF070034
+:10145000005077000002010000A0770000040000A7
+:1014600000A877000004000000B07700000400002E
+:1014700000B8770000040000009AE60000040000B5
+:1014800000A2E6000004000000AAE60000120C1012
+:1014900008B2E6000003000000C2E60000120C10D3
+:1014A00008D2E60000140C0800DAE6000001000093
+:1014B00000E2E6000004000000EAE600000400008C
+:1014C00000F2E60000140C08000AE70000120C10FD
+:1014D0000812E70000270000002AE70000010000D2
+:1014E000003A05010001000000F2050100120C1095
+:1014F0000800060100120C10081006010080000010
+:10150000001806010004700080200601000004009D
+:101510000428060100C00000003006010000100091
+:101520000048060100000E000050060100001E00E9
+:1015300000580601000100000070060100010000D3
+:10154000008006010004000000880601000200007F
+:1015500000E8060100120C1008F806010021FE0147
+:101560000028070100FFFF000030070100FFFF0017
+:101570000038070100FFFF000040070100FFFF00E7
+:1015800000480701000100000050070100010001B0
+:101590000058070100010001006007010001000080
+:1015A000007007010021FE0100A0070100120C10CD
+:1015B00008A807010004000000B8070100020000AD
+:1015C00000C007010011000000080801008168AC9C
+:1015D0000F30080100040000008008010002000034
+:1015E00000880801000100000090080100010000CF
+:1015F000009808010002000000A00801000100009E
+:1016000000A808010001000000B00801000100006E
+:1016100000C008010004000000C025010011000006
+:0916200000D025010001000000CA
+:00000001FF
