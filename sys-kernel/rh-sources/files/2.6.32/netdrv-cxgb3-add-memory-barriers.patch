From: Steve Best <sbest@redhat.com>
Date: Thu, 25 Feb 2010 22:23:17 -0500
Subject: [netdrv] cxgb3: add memory barriers
Message-id: <20100225221539.10893.12761.sendpatchset@squad5-lp1.lab.bos.redhat.com>
Patchwork-id: 23440
O-Subject: [PATCH RHEL6.0 BZ568390] cxgb3: add memory barriers
Bugzilla: 568390
RH-Acked-by: David Howells <dhowells@redhat.com>
RH-Acked-by: Stefan Assmann <sassmann@redhat.com>
RH-Acked-by: Doug Ledford <dledford@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>

RHBZ#:
======
https://bugzilla.redhat.com/show_bug.cgi?id=568390

Description:
============
Add memory barriers to fix crashes observed on newest PowerPC platforms.
The HW and driver state of the receive rings were getting out of sync.

RHEL Version Found:
===================
RHEL 6.0

kABI Status:
============
No symbols were harmed.

Brew:
=====
http://brewweb.devel.redhat.com/brew/taskinfo?taskID=2277616

Upstream Status:
================
This patch was a backport of the following commit:

	commit 2e02644abc4b3574533b027782820b5a6dfe1920
	Author: Divy Le Ray <divy chelsio com>
	Date:   Mon Feb 1 10:29:29 2010 +0000

	    cxgb3: add memory barriers

http://lkml.indiana.edu/hypermail/linux/kernel/1002.0/00312.html

Test Status:
============
Tested by IBM test team using HTX
---Steps to Reproduce---
(1)Set up HTX on both of lpars on P7.
(2)Set up HTX stress level to 5, then start HTX runs.
(3)After about 10 hours, one of system hits EEH error.

===============================================================
Steve Best
IBM on-site partner

Signed-off-by: Aristeu Rozanski <arozansk@redhat.com>

diff --git a/drivers/net/cxgb3/sge.c b/drivers/net/cxgb3/sge.c
index 6366061..3eefbc1 100644
--- a/drivers/net/cxgb3/sge.c
+++ b/drivers/net/cxgb3/sge.c
@@ -480,6 +480,7 @@ static inline void ring_fl_db(struct adapter *adap, struct sge_fl *q)
 {
 	if (q->pend_cred >= q->credits / 4) {
 		q->pend_cred = 0;
+		wmb();
 		t3_write_reg(adap, A_SG_KDOORBELL, V_EGRCNTX(q->cntxt_id));
 	}
 }
@@ -2271,11 +2272,14 @@ static int process_responses(struct adapter *adap, struct sge_qset *qs,
 	while (likely(budget_left && is_new_response(r, q))) {
 		int packet_complete, eth, ethpad = 2, lro = qs->lro_enabled;
 		struct sk_buff *skb = NULL;
-		u32 len, flags = ntohl(r->flags);
-		__be32 rss_hi = *(const __be32 *)r,
-		       rss_lo = r->rss_hdr.rss_hash_val;
+		u32 len, flags;
+		__be32 rss_hi, rss_lo;
 
+		rmb();
 		eth = r->rss_hdr.opcode == CPL_RX_PKT;
+		rss_hi = *(const __be32 *)r,
+		rss_lo = r->rss_hdr.rss_hash_val;
+		flags = ntohl(r->flags);
 
 		if (unlikely(flags & F_RSPD_ASYNC_NOTIF)) {
 			skb = alloc_skb(AN_PKT_SIZE, GFP_ATOMIC);
@@ -2486,7 +2490,10 @@ static int process_pure_responses(struct adapter *adap, struct sge_qset *qs,
 			refill_rspq(adap, q, q->credits);
 			q->credits = 0;
 		}
-	} while (is_new_response(r, q) && is_pure_response(r));
+		if (!is_new_response(r, q))
+			break;
+		rmb();
+	} while (is_pure_response(r));
 
 	if (sleeping)
 		check_ring_db(adap, qs, sleeping);
@@ -2520,6 +2527,7 @@ static inline int handle_responses(struct adapter *adap, struct sge_rspq *q)
 
 	if (!is_new_response(r, q))
 		return -1;
+	rmb();
 	if (is_pure_response(r) && process_pure_responses(adap, qs, r) == 0) {
 		t3_write_reg(adap, A_SG_GTS, V_RSPQ(q->cntxt_id) |
 			     V_NEWTIMER(q->holdoff_tmr) | V_NEWINDEX(q->cidx));
