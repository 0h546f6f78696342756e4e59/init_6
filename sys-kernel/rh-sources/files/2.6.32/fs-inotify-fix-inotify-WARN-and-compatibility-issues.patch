From: Eric Paris <eparis@redhat.com>
Date: Wed, 10 Feb 2010 21:06:54 -0500
Subject: [fs] inotify: fix inotify WARN and compatibility issues
Message-id: <1265836014-27784-1-git-send-email-eparis@redhat.com>
Patchwork-id: 23224
O-Subject: [RHEL-6 PATCH] inotify: fix inotify WARN and compatibility issues
Bugzilla: 563363

BZ 563363

This is a mashup of 2 upstream commits:
976ae32be45a736acd49215a7e4771ff91f161c3 - WARN once fix
9e572cc9877ee6c43af60778f6b8d5ba0692d935 - wd reuse

Both of which would have come in through stable if we hadn't given up on it.

Both of these commits relate to numerous kerneloops.org reports (at one point
were in the top 5) but which now appear to be resolved upstream.

The first commit is easy to understand.  The warning was only supposed to
indicate to the developer (me) that something had gone wrong and was only
supposed to warn once.  Since I set the warned bool incorrectly a number of
people had printk spam.

The second bit of this patch fixes the rest of the warning (but only as a
side effect).  The upstream commit message is as follows:

    inotify: do not reuse watch descriptors

    Since commit 7e790dd5fc937bc8d2400c30a05e32a9e9eef276 ("inotify: fix
    error paths in inotify_update_watch") inotify changed the manor in which
    it gave watch descriptors back to userspace.  Previous to this commit
    inotify acted like the following:

      inotify_add_watch(X, Y, Z) = 1
      inotify_rm_watch(X, 1);
      inotify_add_watch(X, Y, Z) = 2

    but after this patch inotify would return watch descriptors like so:

      inotify_add_watch(X, Y, Z) = 1
      inotify_rm_watch(X, 1);
      inotify_add_watch(X, Y, Z) = 1

    which I saw as equivalent to opening an fd where

      open(file) = 1;
      close(1);
      open(file) = 1;

    seemed perfectly reasonable.  The issue is that quite a bit of userspace
    apparently relies on the behavior in which watch descriptors will not be
    quickly reused.  KDE relies on it, I know some selinux packages rely on
    it, and I have heard complaints from other random sources such as debian
    bug 558981.

    Although the man page implies what we do is ok, we broke userspace so
    this patch almost reverts us to the old behavior.  It is still slightly
    racey and I have patches that would fix that, but they are rather large
    and this will fix it for all real world cases.  The race is as follows:

     - task1 creates a watch and blocks in idr_new_watch() before it updates
       the hint.
     - task2 creates a watch and updates the hint.
     - task1 updates the hint with it's older wd
     - task removes the watch created by task2
     - task adds a new watch and will reuse the wd originally given to task2

    it requires moving some locking around the hint (last_wd) but this should
    solve it for the real world and be -stable safe.

    As a side effect this patch papers over a bug in the lib/idr code which
    is causing a large number WARN's to pop on people's system and many
    reports in kerneloops.org.  I'm working on the root cause of that idr
    bug seperately but this should make inotify immune to that issue.

    Signed-off-by: Eric Paris <eparis@redhat.com>
    Cc: stable@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Signed-off-by: Aristeu Rozanski <arozansk@redhat.com>

diff --git a/fs/notify/inotify/inotify_fsnotify.c b/fs/notify/inotify/inotify_fsnotify.c
index c9ee67b..1afb0a1 100644
--- a/fs/notify/inotify/inotify_fsnotify.c
+++ b/fs/notify/inotify/inotify_fsnotify.c
@@ -121,7 +121,7 @@ static int idr_callback(int id, void *p, void *data)
 	if (warned)
 		return 0;
 
-	warned = false;
+	warned = true;
 	entry = p;
 	ientry = container_of(entry, struct inotify_inode_mark_entry, fsn_entry);
 
diff --git a/fs/notify/inotify/inotify_user.c b/fs/notify/inotify/inotify_user.c
index dcd2040..f486b50 100644
--- a/fs/notify/inotify/inotify_user.c
+++ b/fs/notify/inotify/inotify_user.c
@@ -558,7 +558,7 @@ retry:
 
 	spin_lock(&group->inotify_data.idr_lock);
 	ret = idr_get_new_above(&group->inotify_data.idr, &tmp_ientry->fsn_entry,
-				group->inotify_data.last_wd,
+				group->inotify_data.last_wd +  1,
 				&tmp_ientry->wd);
 	spin_unlock(&group->inotify_data.idr_lock);
 	if (ret) {
@@ -638,7 +638,7 @@ static struct fsnotify_group *inotify_new_group(struct user_struct *user, unsign
 
 	spin_lock_init(&group->inotify_data.idr_lock);
 	idr_init(&group->inotify_data.idr);
-	group->inotify_data.last_wd = 1;
+	group->inotify_data.last_wd = 0;
 	group->inotify_data.user = user;
 	group->inotify_data.fa = NULL;
 
