From: Jason Baron <jbaron@redhat.com>
Date: Tue, 19 Jan 2010 22:35:18 -0500
Subject: [perf] improve error reporting
Message-id: <3565b6e34fc0806b230b5f3ada38b9e2c875eadc.1263939115.git.jbaron@redhat.com>
Patchwork-id: 22658
O-Subject: [RHEL6 PATCH 2/9] - add kernel internal interface to perf counters v2
	- improve error reporting
Bugzilla: 525517
RH-Acked-by: Larry Woodman <lwoodman@redhat.com>
RH-Acked-by: Dave Anderson <anderson@redhat.com>

commit c6567f642e20bcc79abed030f44be5b0d6da2ded

    hw-breakpoints: Improve in-kernel event creation error granularity

    In fail case, perf_event_create_kernel_counter() returns NULL
    instead of an error, which doesn't help us to inform the user
    about the origin of the problem from the outer most callers.
    Often we can just return -EINVAL, which doesn't help anyone when
    it's eventually about a memory allocation failure.

    Then, this patch makes perf_event_create_kernel_counter() always
    return a detailed error code.

    Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: Prasad <prasad@linux.vnet.ibm.com>
    LKML-Reference: <1259210142-5714-2-git-send-regression-fweisbec@gmail.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>


diff --git a/kernel/perf_event.c b/kernel/perf_event.c
index 92c9517..00b9b8f 100644
--- a/kernel/perf_event.c
+++ b/kernel/perf_event.c
@@ -4637,14 +4637,17 @@ perf_event_create_kernel_counter(struct perf_event_attr *attr, int cpu,
 	 */
 
 	ctx = find_get_context(pid, cpu);
-	if (IS_ERR(ctx))
-		return NULL ;
+	if (IS_ERR(ctx)) {
+		err = PTR_ERR(ctx);
+		goto err_exit;
+	}
 
 	event = perf_event_alloc(attr, cpu, ctx, NULL,
 				     NULL, GFP_KERNEL);
-	err = PTR_ERR(event);
-	if (IS_ERR(event))
+	if (IS_ERR(event)) {
+		err = PTR_ERR(event);
 		goto err_put_context;
+	}
 
 	event->filp = NULL;
 	WARN_ON_ONCE(ctx->parent_ctx);
@@ -4662,10 +4665,9 @@ perf_event_create_kernel_counter(struct perf_event_attr *attr, int cpu,
 	return event;
 
 err_put_context:
-	if (err < 0)
-		put_ctx(ctx);
-
-	return NULL;
+	put_ctx(ctx);
+err_exit:
+	return ERR_PTR(err);
 }
 EXPORT_SYMBOL_GPL(perf_event_create_kernel_counter);
 
