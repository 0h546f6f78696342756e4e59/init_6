From: Steve Best <sbest@redhat.com>
Date: Wed, 13 Jan 2010 20:55:32 -0500
Subject: [powerpc] CPU DLPAR handling
Message-id: <20100113204851.9285.61134.sendpatchset@squad5-lp1.lab.bos.redhat.com>
Patchwork-id: 22500
O-Subject: [PATCH RHEL6.0 BZ539318 v3 5/8] CPU DLPAR handling
Bugzilla: 539318
RH-Acked-by: David Howells <dhowells@redhat.com>

RHBZ#:
======
https://bugzilla.redhat.com/show_bug.cgi?id=539318

Description:
============
Patch 5/8: CPU DLPAR handling
This patch adds the specific routines to probe and release (add and remove)

From: Nathan Fontenot <nfont@austin.ibm.com>

cpu resource for the powerpc pseries platform and registers these handlers
with the ppc_md callout structure.

Signed-off-by: Nathan Fontenot <nfont@austin.ibm.com>

Upstream Patch:
http://lkml.org/lkml/2009/11/25/25

Brew:
=====
Built on all platforms. All patches brewed together.
https://brewweb.devel.redhat.com/taskinfo?taskID=2191854

Signed-off-by: Aristeu Rozanski <arozansk@redhat.com>

diff --git a/arch/powerpc/platforms/pseries/dlpar.c b/arch/powerpc/platforms/pseries/dlpar.c
index fb96401..5ae0c68 100644
--- a/arch/powerpc/platforms/pseries/dlpar.c
+++ b/arch/powerpc/platforms/pseries/dlpar.c
@@ -308,7 +308,7 @@ int dlpar_acquire_drc(u32 drc_index)
 	rc = rtas_call(rtas_token("get-sensor-state"), 2, 2, &dr_status,
 		       DR_ENTITY_SENSE, drc_index);
 	if (rc || dr_status != DR_ENTITY_UNUSABLE)
-		return -1;
+		return rc ? rc : -EIO;
 
 	rc = rtas_set_indicator(ALLOCATION_STATE, drc_index, ALLOC_USABLE);
 	if (rc)
@@ -330,7 +330,7 @@ int dlpar_release_drc(u32 drc_index)
 	rc = rtas_call(rtas_token("get-sensor-state"), 2, 2, &dr_status,
 		       DR_ENTITY_SENSE, drc_index);
 	if (rc || dr_status != DR_ENTITY_PRESENT)
-		return -1;
+		return rc ? rc : -EIO;
 
 	rc = rtas_set_indicator(ISOLATION_STATE, drc_index, ISOLATE);
 	if (rc)
@@ -345,4 +345,90 @@ int dlpar_release_drc(u32 drc_index)
 	return 0;
 }
 
+#ifdef CONFIG_ARCH_CPU_PROBE_RELEASE
 
+static ssize_t dlpar_cpu_probe(const char *buf, size_t count)
+{
+	struct device_node *dn;
+	unsigned long drc_index;
+	char *cpu_name;
+	int rc;
+
+	rc = strict_strtoul(buf, 0, &drc_index);
+	if (rc)
+		return -EINVAL;
+
+	dn = dlpar_configure_connector(drc_index);
+	if (!dn)
+		return -EINVAL;
+
+	/* configure-connector reports cpus as living in the base
+	 * directory of the device tree.  CPUs actually live in the
+	 * cpus directory so we need to fixup the full_name.
+	 */
+	cpu_name = kasprintf(GFP_KERNEL, "/cpus%s", dn->full_name);
+	if (!cpu_name) {
+		dlpar_free_cc_nodes(dn);
+		return -ENOMEM;
+	}
+
+	kfree(dn->full_name);
+	dn->full_name = cpu_name;
+
+	rc = dlpar_acquire_drc(drc_index);
+	if (rc) {
+		dlpar_free_cc_nodes(dn);
+		return -EINVAL;
+	}
+
+	rc = dlpar_attach_node(dn);
+	if (rc) {
+		dlpar_release_drc(drc_index);
+		dlpar_free_cc_nodes(dn);
+	}
+
+	return rc ? rc : count;
+}
+
+static ssize_t dlpar_cpu_release(const char *buf, size_t count)
+{
+	struct device_node *dn;
+	const u32 *drc_index;
+	int rc;
+
+	dn = of_find_node_by_path(buf);
+	if (!dn)
+		return -EINVAL;
+
+	drc_index = of_get_property(dn, "ibm,my-drc-index", NULL);
+	if (!drc_index) {
+		of_node_put(dn);
+		return -EINVAL;
+	}
+
+	rc = dlpar_release_drc(*drc_index);
+	if (rc) {
+		of_node_put(dn);
+		return -EINVAL;
+	}
+
+	rc = dlpar_detach_node(dn);
+	if (rc) {
+		dlpar_acquire_drc(*drc_index);
+		return rc;
+	}
+
+	of_node_put(dn);
+	return count;
+}
+
+static int __init pseries_dlpar_init(void)
+{
+	ppc_md.cpu_probe = dlpar_cpu_probe;
+	ppc_md.cpu_release = dlpar_cpu_release;
+
+	return 0;
+}
+machine_device_initcall(pseries, pseries_dlpar_init);
+
+#endif /* CONFIG_ARCH_CPU_PROBE_RELEASE */
