From: George Beshers <gbeshers@redhat.com>
Date: Thu, 14 Jan 2010 21:49:31 -0500
Subject: [uv] x86, mm: Correct the implementation of is_untracked_pat_range()
Message-id: <20100114214039.22817.76366.sendpatchset@dhcp-100-2-194.bos.redhat.com>
Patchwork-id: 22558
O-Subject: [RHEL6 PATCH 6/7] x86,
	mm: Correct the implementation of is_untracked_pat_range()
Bugzilla: 548524
RH-Acked-by: Dean Nelson <dnelson@redhat.com>

commit ccef086454d4c97e7b722e9303390207d681cb4c
Author: H. Peter Anvin <hpa@zytor.com>
Date:   Mon Nov 30 21:33:51 2009 -0800

    x86, mm: Correct the implementation of is_untracked_pat_range()

    The semantics the PAT code expect of is_untracked_pat_range() is "is
    this range completely contained inside the untracked region."  This
    means that checkin 8a27138924f64d2f30c1022f909f74480046bc3f was
    technically wrong, because the implementation needlessly confusing.

    The sane interface is for it to take a semiclosed range like just
    about everything else (as evidenced by the sheer number of "- 1"'s
    removed by that patch) so change the actual implementation to match.

    Reported-by: Suresh Siddha <suresh.b.siddha@intel.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Jack Steiner <steiner@sgi.com>
    Signed-off-by: H. Peter Anvin <hpa@zytor.com>
    LKML-Reference: <20091119202341.GA4420@sgi.com>

Signed-off-by: Aristeu Rozanski <arozansk@redhat.com>

diff --git a/arch/x86/include/asm/e820.h b/arch/x86/include/asm/e820.h
index 68b4e0e..761249e 100644
--- a/arch/x86/include/asm/e820.h
+++ b/arch/x86/include/asm/e820.h
@@ -133,9 +133,13 @@ extern void e820_reserve_resources_late(void);
 extern void setup_memory_map(void);
 extern char *default_machine_specific_memory_setup(void);
 
+/*
+ * Returns true iff the specified range [s,e) is completely contained inside
+ * the ISA region.
+ */
 static inline bool is_ISA_range(u64 s, u64 e)
 {
-	return s >= ISA_START_ADDRESS && e < ISA_END_ADDRESS;
+	return s >= ISA_START_ADDRESS && e <= ISA_END_ADDRESS;
 }
 
 #endif /* __KERNEL__ */
diff --git a/arch/x86/kernel/apic/x2apic_uv_x.c b/arch/x86/kernel/apic/x2apic_uv_x.c
index c3f80c3..055ac4e 100644
--- a/arch/x86/kernel/apic/x2apic_uv_x.c
+++ b/arch/x86/kernel/apic/x2apic_uv_x.c
@@ -39,7 +39,7 @@ static u64 gru_start_paddr, gru_end_paddr;
 
 static inline bool is_GRU_range(u64 start, u64 end)
 {
-	return start >= gru_start_paddr && end < gru_end_paddr;
+	return start >= gru_start_paddr && end <= gru_end_paddr;
 }
 
 static bool uv_is_untracked_pat_range(u64 start, u64 end)
