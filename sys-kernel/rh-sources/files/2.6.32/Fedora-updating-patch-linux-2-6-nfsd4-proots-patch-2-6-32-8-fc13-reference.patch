From: Aristeu Rozanski <arozansk@redhat.com>
Date: Thu, 10 Dec 2009 14:46:16 -0500
Subject: [Fedora] updating patch linux-2.6-nfsd4-proots.patch (2.6.32-8.fc13 reference)
Signed-off-by: Aristeu Rozanski <arozansk@redhat.com>

diff --git a/fs/nfsd/export.c b/fs/nfsd/export.c
index d184652..bf95e3d 100644
--- a/fs/nfsd/export.c
+++ b/fs/nfsd/export.c
@@ -109,7 +109,6 @@ static int expkey_parse(struct cache_detail *cd, char *mesg, int mlen)
 	if (mesg[mlen-1] != '\n')
 		return -EINVAL;
 	mesg[mlen-1] = 0;
-	dprintk("expkey_parse: '%s'\n", mesg);
 
 	buf = kmalloc(PAGE_SIZE, GFP_KERNEL);
 	err = -ENOMEM;
@@ -187,8 +186,6 @@ static int expkey_parse(struct cache_detail *cd, char *mesg, int mlen)
 	if (dom)
 		auth_domain_put(dom);
 	kfree(buf);
-	if (err)
-		dprintk("expkey_parse: err %d\n", err);
 	return err;
 }
 
@@ -359,10 +356,7 @@ static void svc_export_request(struct cache_detail *cd,
 		(*bpp)[0] = '\n';
 		return;
 	}
-
 	qword_add(bpp, blen, pth);
-	dprintk("svc_export_request: pth %s\n", pth);
-
 	(*bpp)[-1] = '\n';
 }
 
@@ -378,10 +372,12 @@ static struct svc_export *svc_export_lookup(struct svc_export *);
 static int check_export(struct inode *inode, int flags, unsigned char *uuid)
 {
 
-	/* We currently export only dirs and regular files.
-	 * This is what umountd does.
+	/*
+	 * We currently export only dirs, regular files, and (for v4
+	 * pseudoroot) symlinks.
 	 */
 	if (!S_ISDIR(inode->i_mode) &&
+	    !S_ISLNK(inode->i_mode) &&
 	    !S_ISREG(inode->i_mode))
 		return -ENOTDIR;
 
@@ -516,7 +512,6 @@ static int svc_export_parse(struct cache_detail *cd, char *mesg, int mlen)
 	if (mesg[mlen-1] != '\n')
 		return -EINVAL;
 	mesg[mlen-1] = 0;
-	dprintk("svc_export_parse: '%s'\n", mesg);
 
 	buf = kmalloc(PAGE_SIZE, GFP_KERNEL);
 	if (!buf)
@@ -636,8 +631,6 @@ out1:
 	auth_domain_put(dom);
 out:
 	kfree(buf);
-	if (err)
-		dprintk("svc_export_parse: err %d\n", err);
 	return err;
 }
 
diff --git a/fs/nfsd/nfs4xdr.c b/fs/nfsd/nfs4xdr.c
index 809afd5..d8d7355 100644
--- a/fs/nfsd/nfs4xdr.c
+++ b/fs/nfsd/nfs4xdr.c
@@ -2174,61 +2174,28 @@ static inline int attributes_need_mount(u32 *bmval)
 	return 0;
 }
 
-struct dentry *
-nfsd_check_export(struct nfsd4_readdir *cd, const char *name, int namlen)
+static __be32
+nfsd4_encode_dirent_fattr(struct nfsd4_readdir *cd,
+		const char *name, int namlen, __be32 *p, int *buflen)
 {
 	struct svc_export *exp = cd->rd_fhp->fh_export;
 	struct dentry *dentry;
-	int err;
+	__be32 nfserr;
+	int ignore_crossmnt = 0;
 
 	dentry = lookup_one_len(name, cd->rd_fhp->fh_dentry, namlen);
 	if (IS_ERR(dentry))
-		return dentry;
+		return nfserrno(PTR_ERR(dentry));
 	if (!dentry->d_inode) {
+		/*
+		 * nfsd_buffered_readdir drops the i_mutex between
+		 * readdir and calling this callback, leaving a window
+		 * where this directory entry could have gone away.
+		 */
 		dput(dentry);
-		return ERR_PTR(-ENOENT);
-	}
-	
-	/*
-	 * Check to see if this dentry is part 
-	 * of the psuedo root
-	 */
-	if ((exp->ex_flags & NFSEXP_V4ROOT) == 0)
-		return dentry;
-
-	/*
-	 * Only exported directories are visable
-	 * on psuedo exports
-	 */
-	if (!S_ISDIR(dentry->d_inode->i_mode)) {
-		dput(dentry);
-		return ERR_PTR(-ENOENT);
+		return nfserr_noent;
 	}
 
-	/*
-	 * Make the upcall to see if this directory
-	 * is exported.
-	 */
-	exp_get(exp);
-	err = nfsd_export_lookup(cd->rd_rqstp, dentry, exp);
-	if (err) {
-		exp_put(exp);
-		dput(dentry);
-		return ERR_PTR(err);
-	}
-	exp_put(exp);
-
-	return dentry;
-}
-
-static __be32
-nfsd4_encode_dirent_fattr(struct nfsd4_readdir *cd,
-		struct dentry *dentry, __be32 *p, int *buflen)
-{
-	struct svc_export *exp = cd->rd_fhp->fh_export;
-	__be32 nfserr;
-	int ignore_crossmnt = 0;
-
 	exp_get(exp);
 	/*
 	 * In the case of a mountpoint, the client may be asking for
@@ -2237,11 +2204,14 @@ nfsd4_encode_dirent_fattr(struct nfsd4_readdir *cd,
 	 * we will not follow the cross mount and will fill the attribtutes
 	 * directly from the mountpoint dentry.
 	 */
-	if (d_mountpoint(dentry) && !attributes_need_mount(cd->rd_bmval))
-		ignore_crossmnt = 1;
-	else if (d_mountpoint(dentry)) {
+	if (nfsd_mountpoint(dentry, exp)) {
 		int err;
 
+		if (!(exp->ex_flags & NFSEXP_V4ROOT)
+				&& !attributes_need_mount(cd->rd_bmval)) {
+			ignore_crossmnt = 1;
+			goto out_encode;
+		}
 		/*
 		 * Why the heck aren't we just using nfsd_lookup??
 		 * Different "."/".." handling?  Something else?
@@ -2257,6 +2227,7 @@ nfsd4_encode_dirent_fattr(struct nfsd4_readdir *cd,
 			goto out_put;
 
 	}
+out_encode:
 	nfserr = nfsd4_encode_fattr(NULL, exp, dentry, p, buflen, cd->rd_bmval,
 					cd->rd_rqstp, ignore_crossmnt);
 out_put:
@@ -2289,7 +2260,6 @@ nfsd4_encode_dirent(void *ccdv, const char *name, int namlen,
 	struct readdir_cd *ccd = ccdv;
 	struct nfsd4_readdir *cd = container_of(ccd, struct nfsd4_readdir, common);
 	int buflen;
-	struct dentry *dentry;
 	__be32 *p = cd->buffer;
 	__be32 *cookiep;
 	__be32 nfserr = nfserr_toosmall;
@@ -2300,40 +2270,19 @@ nfsd4_encode_dirent(void *ccdv, const char *name, int namlen,
 		return 0;
 	}
 
-	/*
-	 * Do the lookup and make sure the dentry is 
-	 * visible on the exported directory
-	 */
-	dentry = nfsd_check_export(cd, name, namlen);
-	if (IS_ERR(dentry)) {
-		if (PTR_ERR(dentry) == -ENOENT) {
-			cd->common.err = nfs_ok;
-			return 0;
-		}
-		cd->common.err = nfserrno(PTR_ERR(dentry));
-		return -EINVAL;
-	}
- 
 	if (cd->offset)
 		xdr_encode_hyper(cd->offset, (u64) offset);
 
 	buflen = cd->buflen - 4 - XDR_QUADLEN(namlen);
-	if (buflen < 0) {
-		dput(dentry);
+	if (buflen < 0)
 		goto fail;
-	}
 
 	*p++ = xdr_one;                             /* mark entry present */
 	cookiep = p;
 	p = xdr_encode_hyper(p, NFS_OFFSET_MAX);    /* offset of next entry */
 	p = xdr_encode_array(p, name, namlen);      /* name length & name */
 
-	/*
-	 * Note: the dput() on the dentry is done in 
-	 * nfsd4_encode_dirent_fattr() since the dentry can
-	 * change when crossing a mount point.
-	 */
-	nfserr = nfsd4_encode_dirent_fattr(cd, dentry, p, &buflen);
+	nfserr = nfsd4_encode_dirent_fattr(cd, name, namlen, p, &buflen);
 	switch (nfserr) {
 	case nfs_ok:
 		p += buflen;
diff --git a/fs/nfsd/nfsfh.c b/fs/nfsd/nfsfh.c
index 9f94b60..f801931 100644
--- a/fs/nfsd/nfsfh.c
+++ b/fs/nfsd/nfsfh.c
@@ -112,24 +112,30 @@ static __be32 nfsd_setuser_and_check_port(struct svc_rqst *rqstp,
 static inline __be32 check_pseudo_root(struct svc_rqst *rqstp,
 	struct dentry *dentry, struct svc_export *exp)
 {
-	/*
-	 * Only interested in pseudo roots
-	 */
 	if (!(exp->ex_flags & NFSEXP_V4ROOT))
 		return nfs_ok;
-
 	/*
-	 * Only directories should be on the pseudo root
+	 * v2/v3 clients have no need for the V4ROOT export--they use
+	 * the mount protocl instead; also, further V4ROOT checks may be
+	 * in v4-specific code, in which case v2/v3 clients could bypass
+	 * them.
 	 */
-	if (unlikely(!S_ISDIR(dentry->d_inode->i_mode)))
+	if (!nfsd_v4client(rqstp))
 		return nfserr_stale;
-
 	/*
-	 * Make sure the export is the parent of the dentry
+	 * We're exposing only the directories and symlinks that have to be
+	 * traversed on the way to real exports:
 	 */
-	if (unlikely(dentry->d_parent != exp->ex_path.dentry))
+	if (unlikely(!S_ISDIR(dentry->d_inode->i_mode) &&
+		     !S_ISLNK(dentry->d_inode->i_mode)))
+		return nfserr_stale;
+	/*
+	 * A pseudoroot export gives permission to access only one
+	 * single directory; the kernel has to make another upcall
+	 * before granting access to anything else under it:
+	 */
+	if (unlikely(dentry != exp->ex_path.dentry))
 		return nfserr_stale;
-
 	return nfs_ok;
 }
 
@@ -339,16 +345,15 @@ fh_verify(struct svc_rqst *rqstp, struct svc_fh *fhp, int type, int access)
 		error = nfsd_setuser_and_check_port(rqstp, exp);
 		if (error)
 			goto out;
-
-		/*
-		 * Do some spoof checking if we are on the pseudo root
-		 */
-		error = check_pseudo_root(rqstp, dentry, exp);
-		if (error)
-			goto out;
-
 	}
 
+	/*
+	 * Do some spoof checking if we are on the pseudo root
+	 */
+	error = check_pseudo_root(rqstp, dentry, exp);
+	if (error)
+		goto out;
+
 	error = nfsd_mode_check(rqstp, dentry->d_inode->i_mode, type);
 	if (error)
 		goto out;
diff --git a/fs/nfsd/vfs.c b/fs/nfsd/vfs.c
index d1ef500..dd611b9 100644
--- a/fs/nfsd/vfs.c
+++ b/fs/nfsd/vfs.c
@@ -89,12 +89,6 @@ struct raparm_hbucket {
 #define RAPARM_HASH_MASK	(RAPARM_HASH_SIZE-1)
 static struct raparm_hbucket	raparm_hash[RAPARM_HASH_SIZE];
 
-static inline int
-nfsd_v4client(struct svc_rqst *rq)
-{
-    return rq->rq_prog == NFS_PROGRAM && rq->rq_vers == 4;
-}
-
 /* 
  * Called from nfsd_lookup and encode_dirent. Check if we have crossed 
  * a mount point.
@@ -116,8 +110,16 @@ nfsd_cross_mnt(struct svc_rqst *rqstp, struct dentry **dpp,
 
 	exp2 = rqst_exp_get_by_name(rqstp, &path);
 	if (IS_ERR(exp2)) {
-		if (PTR_ERR(exp2) != -ENOENT)
-			err = PTR_ERR(exp2);
+		err = PTR_ERR(exp2);
+		/*
+		 * We normally allow NFS clients to continue
+		 * "underneath" a mountpoint that is not exported.
+		 * The exception is V4ROOT, where no traversal is ever
+		 * allowed without an explicit export of the new
+		 * directory.
+		 */
+		if (err == -ENOENT && !(exp->ex_flags & NFSEXP_V4ROOT))
+			err = 0;
 		path_put(&path);
 		goto out;
 	}
@@ -142,54 +144,18 @@ out:
 }
 
 /*
- * Lookup the export the dentry is on. To be
- * viewable on a pseudo export, the dentry
- * has to be an exported directory. 
+ * For nfsd purposes, we treat V4ROOT exports as though there was an
+ * export at *every* directory.
  */
-int
-nfsd_export_lookup(struct svc_rqst *rqstp, struct dentry *dentry,
-	struct svc_export *exp)
+int nfsd_mountpoint(struct dentry *dentry, struct svc_export *exp)
 {
-	struct svc_export *exp2 = NULL;
-	struct path path;
-	int err = 0;
-
-	if ((exp->ex_flags & NFSEXP_V4ROOT) == 0)
+	if (d_mountpoint(dentry))
+		return 1;
+	if (!(exp->ex_flags & NFSEXP_V4ROOT))
 		return 0;
-
-	/*
-	 * Make sure the export is the parent of the dentry
-	 */
-	if (unlikely(dentry->d_parent != exp->ex_path.dentry))
-		return -ENOENT;
-
-	/*
-	 * Only directories are seen on psuedo exports
-	 */
-	if (!S_ISDIR(dentry->d_inode->i_mode))
-		return -ENOENT;
-
-	/*
-	 * Make the upcall 
-	 */
-	path.mnt = mntget(exp->ex_path.mnt);
-	path.dentry = dget(dentry);
-	while (d_mountpoint(path.dentry) && follow_down(&path));
-
-	exp2 = rqst_exp_get_by_name(rqstp, &path);
-	if (IS_ERR(exp2))
-		err = PTR_ERR(exp2);
-	else  {
-		/*
-		 * The export exist so allow the access
-		 */
-		exp_put(exp2);
-	}
-
-	dput(path.dentry);
-	mntput(path.mnt);
-	return err;
+	return dentry->d_inode != NULL;
 }
+
 __be32
 nfsd_lookup_dentry(struct svc_rqst *rqstp, struct svc_fh *fhp,
 		   const char *name, unsigned int len,
@@ -199,7 +165,7 @@ nfsd_lookup_dentry(struct svc_rqst *rqstp, struct svc_fh *fhp,
 	struct dentry		*dparent;
 	struct dentry		*dentry;
 	__be32			err;
-	int			host_err, v4root;
+	int			host_err;
 
 	dprintk("nfsd: nfsd_lookup(fh %s, %.*s)\n", SVCFH_fmt(fhp), len,name);
 
@@ -211,7 +177,6 @@ nfsd_lookup_dentry(struct svc_rqst *rqstp, struct svc_fh *fhp,
 	dparent = fhp->fh_dentry;
 	exp  = fhp->fh_export;
 	exp_get(exp);
-	v4root = (exp->ex_flags & NFSEXP_V4ROOT);
 
 	/* Lookup the name, but don't follow links */
 	if (isdotent(name, len)) {
@@ -219,7 +184,7 @@ nfsd_lookup_dentry(struct svc_rqst *rqstp, struct svc_fh *fhp,
 			dentry = dget(dparent);
 		else if (dparent != exp->ex_path.dentry)
 			dentry = dget_parent(dparent);
-		else if (!EX_NOHIDE(exp) && !nfsd_v4client(rqstp))
+		else if (!EX_NOHIDE(exp))
 			dentry = dget(dparent); /* .. == . just like at / */
 		else {
 			/* checking mountpoint crossing is very different when stepping up */
@@ -256,21 +221,9 @@ nfsd_lookup_dentry(struct svc_rqst *rqstp, struct svc_fh *fhp,
 		if (IS_ERR(dentry))
 			goto out_nfserr;
 		/*
-		 * The export is a pseudo one, make sure the
-		 * dentry is accessible 
-		 */
-		v4root = (dentry->d_inode && v4root);
-		if (v4root) {
-			host_err = nfsd_export_lookup(rqstp, dentry, exp);
-			if (host_err) {
-				dput(dentry);
-				goto out_nfserr;
-			}
-		}
-		/*
 		 * check if we have crossed a mount point ...
 		 */
-		if (d_mountpoint(dentry) || v4root) {
+		if (nfsd_mountpoint(dentry, exp)) {
 			if ((host_err = nfsd_cross_mnt(rqstp, &dentry, &exp))) {
 				dput(dentry);
 				goto out_nfserr;
diff --git a/include/linux/nfsd/export.h b/include/linux/nfsd/export.h
index 4c63217..e963ba9 100644
--- a/include/linux/nfsd/export.h
+++ b/include/linux/nfsd/export.h
@@ -39,6 +39,15 @@
 #define NFSEXP_FSID		0x2000
 #define	NFSEXP_CROSSMOUNT	0x4000
 #define	NFSEXP_NOACL		0x8000	/* reserved for possible ACL related use */
+/*
+ * The NFSEXP_V4ROOT flag causes the kernel to give access only to NFSv4
+ * clients, and only to the single directory that is the root of the
+ * export; further lookup and readdir operations are treated as if every
+ * subdirectory was a mountpoint, and ignored if they are not themselves
+ * exported.  This is used by nfsd and mountd to construct the NFSv4
+ * pseudofilesystem, which provides access only to paths leading to each
+ * exported filesystem.
+ */
 #define	NFSEXP_V4ROOT		0x10000
 #define NFSEXP_ALLFLAGS		0x1FE3F
 
diff --git a/include/linux/nfsd/nfsd.h b/include/linux/nfsd/nfsd.h
index cc182ad..0ddb6ba 100644
--- a/include/linux/nfsd/nfsd.h
+++ b/include/linux/nfsd/nfsd.h
@@ -79,8 +79,6 @@ int		nfsd_racache_init(int);
 void		nfsd_racache_shutdown(void);
 int		nfsd_cross_mnt(struct svc_rqst *rqstp, struct dentry **dpp,
 		                struct svc_export **expp);
-int		nfsd_export_lookup(struct svc_rqst *rqstp, struct dentry *dpp,
-		                struct svc_export *exp);
 __be32		nfsd_lookup(struct svc_rqst *, struct svc_fh *,
 				const char *, unsigned int, struct svc_fh *);
 __be32		 nfsd_lookup_dentry(struct svc_rqst *, struct svc_fh *,
@@ -88,6 +86,7 @@ __be32		 nfsd_lookup_dentry(struct svc_rqst *, struct svc_fh *,
 				struct svc_export **, struct dentry **);
 __be32		nfsd_setattr(struct svc_rqst *, struct svc_fh *,
 				struct iattr *, int, time_t);
+int nfsd_mountpoint(struct dentry *, struct svc_export *);
 #ifdef CONFIG_NFSD_V4
 __be32          nfsd4_set_nfs4_acl(struct svc_rqst *, struct svc_fh *,
                     struct nfs4_acl *);
@@ -396,6 +395,10 @@ static inline u32 nfsd_suppattrs2(u32 minorversion)
 	return minorversion ? NFSD4_1_SUPPORTED_ATTRS_WORD2
 			    : NFSD4_SUPPORTED_ATTRS_WORD2;
 }
+static inline int nfsd_v4client(struct svc_rqst *rq)
+{
+	return rq->rq_prog == NFS_PROGRAM && rq->rq_vers == 4;
+}
 
 /* These will return ERR_INVAL if specified in GETATTR or READDIR. */
 #define NFSD_WRITEONLY_ATTRS_WORD1							    \
