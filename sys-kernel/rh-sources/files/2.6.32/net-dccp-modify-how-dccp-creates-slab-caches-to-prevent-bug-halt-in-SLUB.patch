From: Neil Horman <nhorman@redhat.com>
Date: Mon, 18 Jan 2010 19:36:28 -0500
Subject: [net] dccp: modify how dccp creates slab caches to prevent bug halt in SLUB
Message-id: <20100118193628.GI27504@hmsreliant.think-freely.org>
Patchwork-id: 22634
O-Subject: [RHEL 6 PATCH] dccp: modify how dccp creates slab caches to prevent
	bug halt in SLUB (bz 553698)
Bugzilla: 553698
RH-Acked-by: Arnaldo Carvalho de Melo <acme@redhat.com>
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: Thomas Graf <tgraf@redhat.com>

Hey all-
	We currently in RHEL6 get a bug halt when we unload the dccp module.
This stems from the fact that dccp kmallocs data to hold the name of the caches
it creates.  The slub implementation of kmem_cache_create has a 'merging'
feature, in which caches of simmilar configurations wind up using the same data
structure.  When/if such a merge occurs, one of the two cache names (the last
one to be created) is dropped by slub. As such, when kmem_cache_name is called
to retrieve the name of a cache, it may be different than the name that was
passed in during kmem_cache_create.  Since dccp uses this call to retrieve the
name of the cache on destroy, it gets an unexpected pointer (usually something
pointing into the static string table), which it then passes to kfree, which in
turn trips on the BUG halt, after failing the !PageSlab test in the slub kfree
function.

	Normally this isn't a problem, since creators of kmem caches never alloc
or free their names, using (static strings instead).  This seems like a bug in
slub, but fixing it there invites some complexity.  This patch instead just
converts the storage of cache names in dccp to be a static part of the
ccid_operations structure.  It doesn't cost any extra memory, and saves us
having to do a kstrudup per cache during init.  I've posted it upstream and its
gotten an ack from acme so far (who maintains dccp).

Fixes bz 553698.

Signed-off-by: Aristeu Rozanski <arozansk@redhat.com>

diff --git a/net/dccp/ccid.c b/net/dccp/ccid.c
index f3e9ba1..57dfb9c 100644
--- a/net/dccp/ccid.c
+++ b/net/dccp/ccid.c
@@ -77,34 +77,24 @@ int ccid_getsockopt_builtin_ccids(struct sock *sk, int len,
 	return err;
 }
 
-static struct kmem_cache *ccid_kmem_cache_create(int obj_size, const char *fmt,...)
+static struct kmem_cache *ccid_kmem_cache_create(int obj_size, char *slab_name_fmt, const char *fmt,...)
 {
 	struct kmem_cache *slab;
-	char slab_name_fmt[32], *slab_name;
 	va_list args;
 
 	va_start(args, fmt);
 	vsnprintf(slab_name_fmt, sizeof(slab_name_fmt), fmt, args);
 	va_end(args);
 
-	slab_name = kstrdup(slab_name_fmt, GFP_KERNEL);
-	if (slab_name == NULL)
-		return NULL;
-	slab = kmem_cache_create(slab_name, sizeof(struct ccid) + obj_size, 0,
+	slab = kmem_cache_create(slab_name_fmt, sizeof(struct ccid) + obj_size, 0,
 				 SLAB_HWCACHE_ALIGN, NULL);
-	if (slab == NULL)
-		kfree(slab_name);
 	return slab;
 }
 
 static void ccid_kmem_cache_destroy(struct kmem_cache *slab)
 {
-	if (slab != NULL) {
-		const char *name = kmem_cache_name(slab);
-
+	if (slab != NULL)
 		kmem_cache_destroy(slab);
-		kfree(name);
-	}
 }
 
 static int ccid_activate(struct ccid_operations *ccid_ops)
@@ -113,6 +103,7 @@ static int ccid_activate(struct ccid_operations *ccid_ops)
 
 	ccid_ops->ccid_hc_rx_slab =
 			ccid_kmem_cache_create(ccid_ops->ccid_hc_rx_obj_size,
+					       ccid_ops->ccid_hc_rx_slab_name,
 					       "ccid%u_hc_rx_sock",
 					       ccid_ops->ccid_id);
 	if (ccid_ops->ccid_hc_rx_slab == NULL)
@@ -120,6 +111,7 @@ static int ccid_activate(struct ccid_operations *ccid_ops)
 
 	ccid_ops->ccid_hc_tx_slab =
 			ccid_kmem_cache_create(ccid_ops->ccid_hc_tx_obj_size,
+					       ccid_ops->ccid_hc_tx_slab_name,
 					       "ccid%u_hc_tx_sock",
 					       ccid_ops->ccid_id);
 	if (ccid_ops->ccid_hc_tx_slab == NULL)
diff --git a/net/dccp/ccid.h b/net/dccp/ccid.h
index facedd2..269958b 100644
--- a/net/dccp/ccid.h
+++ b/net/dccp/ccid.h
@@ -49,6 +49,8 @@ struct ccid_operations {
 	const char		*ccid_name;
 	struct kmem_cache	*ccid_hc_rx_slab,
 				*ccid_hc_tx_slab;
+	char			ccid_hc_rx_slab_name[32];
+	char			ccid_hc_tx_slab_name[32];
 	__u32			ccid_hc_rx_obj_size,
 				ccid_hc_tx_obj_size;
 	/* Interface Routines */
