From: Jason Baron <jbaron@redhat.com>
Date: Tue, 19 Jan 2010 22:35:23 -0500
Subject: [perf] Add a callback to perf events
Message-id: <11109519fd7e2acbb5f8f1353416f503a120667c.1263939115.git.jbaron@redhat.com>
Patchwork-id: 22659
O-Subject: [RHEL6 PATCH 3/9] - add kernel internal interface to perf counters v2
	- add callback
Bugzilla: 525517
RH-Acked-by: Larry Woodman <lwoodman@redhat.com>
RH-Acked-by: Dave Anderson <anderson@redhat.com>

commit 97eaf5300b9d0cd99c310bf8c4a0f2f3296d88a3

    perf/core: Add a callback to perf events

    A simple callback in a perf event can be used for multiple purposes.
    For example it is useful for triggered based events like hardware
    breakpoints that need a callback to dispatch a triggered breakpoint
    event.

    v2: Simplify a bit the callback attribution as suggested by Paul
        Mackerras

    Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: "K.Prasad" <prasad@linux.vnet.ibm.com>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Paul Mundt <lethal@linux-sh.org>

diff --git a/include/linux/perf_event.h b/include/linux/perf_event.h
index 1d215ee..d6182bc 100644
--- a/include/linux/perf_event.h
+++ b/include/linux/perf_event.h
@@ -543,6 +543,8 @@ struct perf_pending_entry {
 	void (*func)(struct perf_pending_entry *);
 };
 
+typedef void (*perf_callback_t)(struct perf_event *, void *);
+
 /**
  * struct perf_event - performance event kernel representation:
  */
@@ -633,6 +635,8 @@ struct perf_event {
 
 	struct pid_namespace		*ns;
 	u64				id;
+
+	perf_callback_t			callback;
 #endif
 };
 
diff --git a/kernel/perf_event.c b/kernel/perf_event.c
index 00b9b8f..7bd2ca3 100644
--- a/kernel/perf_event.c
+++ b/kernel/perf_event.c
@@ -4251,6 +4251,7 @@ perf_event_alloc(struct perf_event_attr *attr,
 		   struct perf_event_context *ctx,
 		   struct perf_event *group_leader,
 		   struct perf_event *parent_event,
+		   perf_callback_t callback,
 		   gfp_t gfpflags)
 {
 	const struct pmu *pmu;
@@ -4293,6 +4294,11 @@ perf_event_alloc(struct perf_event_attr *attr,
 
 	event->state		= PERF_EVENT_STATE_INACTIVE;
 
+	if (!callback && parent_event)
+		callback = parent_event->callback;
+
+	event->callback = callback;
+
 	if (attr->disabled)
 		event->state = PERF_EVENT_STATE_OFF;
 
@@ -4569,7 +4575,7 @@ SYSCALL_DEFINE5(perf_event_open,
 	}
 
 	event = perf_event_alloc(&attr, cpu, ctx, group_leader,
-				     NULL, GFP_KERNEL);
+				     NULL, NULL, GFP_KERNEL);
 	err = PTR_ERR(event);
 	if (IS_ERR(event))
 		goto err_put_context;
@@ -4626,7 +4632,7 @@ err_put_context:
  */
 struct perf_event *
 perf_event_create_kernel_counter(struct perf_event_attr *attr, int cpu,
-				 pid_t pid)
+				 pid_t pid, perf_callback_t callback)
 {
 	struct perf_event *event;
 	struct perf_event_context *ctx;
@@ -4643,7 +4649,7 @@ perf_event_create_kernel_counter(struct perf_event_attr *attr, int cpu,
 	}
 
 	event = perf_event_alloc(attr, cpu, ctx, NULL,
-				     NULL, GFP_KERNEL);
+				     NULL, callback, GFP_KERNEL);
 	if (IS_ERR(event)) {
 		err = PTR_ERR(event);
 		goto err_put_context;
@@ -4696,7 +4702,7 @@ inherit_event(struct perf_event *parent_event,
 	child_event = perf_event_alloc(&parent_event->attr,
 					   parent_event->cpu, child_ctx,
 					   group_leader, parent_event,
-					   GFP_KERNEL);
+					   NULL, GFP_KERNEL);
 	if (IS_ERR(child_event))
 		return child_event;
 	get_ctx(child_ctx);
