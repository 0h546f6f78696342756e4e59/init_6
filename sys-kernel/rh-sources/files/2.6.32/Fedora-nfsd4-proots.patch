From: Aristeu Rozanski <aris@redhat.com>
Date: Wed, 18 Nov 2009 22:02:30 -0500
Subject: [Fedora] [nfsd4] proots
Message-id:
Patchwork-id:
O-Subject:
Bugzilla:

Original Fedora patch: linux-2.6-nfsd4-proots.patch
Imported from Fedora. No patch description found.

Signed-off-by: Aristeu Rozanski <arozansk@redhat.com>

diff --git a/fs/nfsd/export.c b/fs/nfsd/export.c
index c1c9e03..d184652 100644
--- a/fs/nfsd/export.c
+++ b/fs/nfsd/export.c
@@ -109,6 +109,7 @@ static int expkey_parse(struct cache_detail *cd, char *mesg, int mlen)
 	if (mesg[mlen-1] != '\n')
 		return -EINVAL;
 	mesg[mlen-1] = 0;
+	dprintk("expkey_parse: '%s'\n", mesg);
 
 	buf = kmalloc(PAGE_SIZE, GFP_KERNEL);
 	err = -ENOMEM;
@@ -186,6 +187,8 @@ static int expkey_parse(struct cache_detail *cd, char *mesg, int mlen)
 	if (dom)
 		auth_domain_put(dom);
 	kfree(buf);
+	if (err)
+		dprintk("expkey_parse: err %d\n", err);
 	return err;
 }
 
@@ -356,7 +359,10 @@ static void svc_export_request(struct cache_detail *cd,
 		(*bpp)[0] = '\n';
 		return;
 	}
+
 	qword_add(bpp, blen, pth);
+	dprintk("svc_export_request: pth %s\n", pth);
+
 	(*bpp)[-1] = '\n';
 }
 
@@ -510,6 +516,7 @@ static int svc_export_parse(struct cache_detail *cd, char *mesg, int mlen)
 	if (mesg[mlen-1] != '\n')
 		return -EINVAL;
 	mesg[mlen-1] = 0;
+	dprintk("svc_export_parse: '%s'\n", mesg);
 
 	buf = kmalloc(PAGE_SIZE, GFP_KERNEL);
 	if (!buf)
@@ -629,6 +636,8 @@ out1:
 	auth_domain_put(dom);
 out:
 	kfree(buf);
+	if (err)
+		dprintk("svc_export_parse: err %d\n", err);
 	return err;
 }
 
@@ -1425,6 +1434,7 @@ static struct flags {
 	{ NFSEXP_CROSSMOUNT, {"crossmnt", ""}},
 	{ NFSEXP_NOSUBTREECHECK, {"no_subtree_check", ""}},
 	{ NFSEXP_NOAUTHNLM, {"insecure_locks", ""}},
+	{ NFSEXP_V4ROOT, {"v4root", ""}},
 #ifdef MSNFS
 	{ NFSEXP_MSNFS, {"msnfs", ""}},
 #endif
@@ -1505,7 +1515,7 @@ static int e_show(struct seq_file *m, void *p)
 	struct svc_export *exp = container_of(cp, struct svc_export, h);
 
 	if (p == SEQ_START_TOKEN) {
-		seq_puts(m, "# Version 1.1\n");
+		seq_puts(m, "# Version 1.2\n");
 		seq_puts(m, "# Path Client(Flags) # IPs\n");
 		return 0;
 	}
diff --git a/fs/nfsd/nfs4xdr.c b/fs/nfsd/nfs4xdr.c
index 0fbd50c..809afd5 100644
--- a/fs/nfsd/nfs4xdr.c
+++ b/fs/nfsd/nfs4xdr.c
@@ -2174,27 +2174,60 @@ static inline int attributes_need_mount(u32 *bmval)
 	return 0;
 }
 
-static __be32
-nfsd4_encode_dirent_fattr(struct nfsd4_readdir *cd,
-		const char *name, int namlen, __be32 *p, int *buflen)
+struct dentry *
+nfsd_check_export(struct nfsd4_readdir *cd, const char *name, int namlen)
 {
 	struct svc_export *exp = cd->rd_fhp->fh_export;
 	struct dentry *dentry;
-	__be32 nfserr;
-	int ignore_crossmnt = 0;
+	int err;
 
 	dentry = lookup_one_len(name, cd->rd_fhp->fh_dentry, namlen);
 	if (IS_ERR(dentry))
-		return nfserrno(PTR_ERR(dentry));
+		return dentry;
 	if (!dentry->d_inode) {
-		/*
-		 * nfsd_buffered_readdir drops the i_mutex between
-		 * readdir and calling this callback, leaving a window
-		 * where this directory entry could have gone away.
-		 */
 		dput(dentry);
-		return nfserr_noent;
+		return ERR_PTR(-ENOENT);
+	}
+	
+	/*
+	 * Check to see if this dentry is part 
+	 * of the psuedo root
+	 */
+	if ((exp->ex_flags & NFSEXP_V4ROOT) == 0)
+		return dentry;
+
+	/*
+	 * Only exported directories are visable
+	 * on psuedo exports
+	 */
+	if (!S_ISDIR(dentry->d_inode->i_mode)) {
+		dput(dentry);
+		return ERR_PTR(-ENOENT);
+	}
+
+	/*
+	 * Make the upcall to see if this directory
+	 * is exported.
+	 */
+	exp_get(exp);
+	err = nfsd_export_lookup(cd->rd_rqstp, dentry, exp);
+	if (err) {
+		exp_put(exp);
+		dput(dentry);
+		return ERR_PTR(err);
 	}
+	exp_put(exp);
+
+	return dentry;
+}
+
+static __be32
+nfsd4_encode_dirent_fattr(struct nfsd4_readdir *cd,
+		struct dentry *dentry, __be32 *p, int *buflen)
+{
+	struct svc_export *exp = cd->rd_fhp->fh_export;
+	__be32 nfserr;
+	int ignore_crossmnt = 0;
 
 	exp_get(exp);
 	/*
@@ -2256,6 +2289,7 @@ nfsd4_encode_dirent(void *ccdv, const char *name, int namlen,
 	struct readdir_cd *ccd = ccdv;
 	struct nfsd4_readdir *cd = container_of(ccd, struct nfsd4_readdir, common);
 	int buflen;
+	struct dentry *dentry;
 	__be32 *p = cd->buffer;
 	__be32 *cookiep;
 	__be32 nfserr = nfserr_toosmall;
@@ -2266,19 +2300,40 @@ nfsd4_encode_dirent(void *ccdv, const char *name, int namlen,
 		return 0;
 	}
 
+	/*
+	 * Do the lookup and make sure the dentry is 
+	 * visible on the exported directory
+	 */
+	dentry = nfsd_check_export(cd, name, namlen);
+	if (IS_ERR(dentry)) {
+		if (PTR_ERR(dentry) == -ENOENT) {
+			cd->common.err = nfs_ok;
+			return 0;
+		}
+		cd->common.err = nfserrno(PTR_ERR(dentry));
+		return -EINVAL;
+	}
+ 
 	if (cd->offset)
 		xdr_encode_hyper(cd->offset, (u64) offset);
 
 	buflen = cd->buflen - 4 - XDR_QUADLEN(namlen);
-	if (buflen < 0)
+	if (buflen < 0) {
+		dput(dentry);
 		goto fail;
+	}
 
 	*p++ = xdr_one;                             /* mark entry present */
 	cookiep = p;
 	p = xdr_encode_hyper(p, NFS_OFFSET_MAX);    /* offset of next entry */
 	p = xdr_encode_array(p, name, namlen);      /* name length & name */
 
-	nfserr = nfsd4_encode_dirent_fattr(cd, name, namlen, p, &buflen);
+	/*
+	 * Note: the dput() on the dentry is done in 
+	 * nfsd4_encode_dirent_fattr() since the dentry can
+	 * change when crossing a mount point.
+	 */
+	nfserr = nfsd4_encode_dirent_fattr(cd, dentry, p, &buflen);
 	switch (nfserr) {
 	case nfs_ok:
 		p += buflen;
diff --git a/fs/nfsd/nfsfh.c b/fs/nfsd/nfsfh.c
index 01965b2..9f94b60 100644
--- a/fs/nfsd/nfsfh.c
+++ b/fs/nfsd/nfsfh.c
@@ -109,6 +109,30 @@ static __be32 nfsd_setuser_and_check_port(struct svc_rqst *rqstp,
 	return nfserrno(nfsd_setuser(rqstp, exp));
 }
 
+static inline __be32 check_pseudo_root(struct svc_rqst *rqstp,
+	struct dentry *dentry, struct svc_export *exp)
+{
+	/*
+	 * Only interested in pseudo roots
+	 */
+	if (!(exp->ex_flags & NFSEXP_V4ROOT))
+		return nfs_ok;
+
+	/*
+	 * Only directories should be on the pseudo root
+	 */
+	if (unlikely(!S_ISDIR(dentry->d_inode->i_mode)))
+		return nfserr_stale;
+
+	/*
+	 * Make sure the export is the parent of the dentry
+	 */
+	if (unlikely(dentry->d_parent != exp->ex_path.dentry))
+		return nfserr_stale;
+
+	return nfs_ok;
+}
+
 /*
  * Use the given filehandle to look up the corresponding export and
  * dentry.  On success, the results are used to set fh_export and
@@ -315,6 +339,14 @@ fh_verify(struct svc_rqst *rqstp, struct svc_fh *fhp, int type, int access)
 		error = nfsd_setuser_and_check_port(rqstp, exp);
 		if (error)
 			goto out;
+
+		/*
+		 * Do some spoof checking if we are on the pseudo root
+		 */
+		error = check_pseudo_root(rqstp, dentry, exp);
+		if (error)
+			goto out;
+
 	}
 
 	error = nfsd_mode_check(rqstp, dentry->d_inode->i_mode, type);
diff --git a/fs/nfsd/vfs.c b/fs/nfsd/vfs.c
index a293f02..d1ef500 100644
--- a/fs/nfsd/vfs.c
+++ b/fs/nfsd/vfs.c
@@ -141,6 +141,55 @@ out:
 	return err;
 }
 
+/*
+ * Lookup the export the dentry is on. To be
+ * viewable on a pseudo export, the dentry
+ * has to be an exported directory. 
+ */
+int
+nfsd_export_lookup(struct svc_rqst *rqstp, struct dentry *dentry,
+	struct svc_export *exp)
+{
+	struct svc_export *exp2 = NULL;
+	struct path path;
+	int err = 0;
+
+	if ((exp->ex_flags & NFSEXP_V4ROOT) == 0)
+		return 0;
+
+	/*
+	 * Make sure the export is the parent of the dentry
+	 */
+	if (unlikely(dentry->d_parent != exp->ex_path.dentry))
+		return -ENOENT;
+
+	/*
+	 * Only directories are seen on psuedo exports
+	 */
+	if (!S_ISDIR(dentry->d_inode->i_mode))
+		return -ENOENT;
+
+	/*
+	 * Make the upcall 
+	 */
+	path.mnt = mntget(exp->ex_path.mnt);
+	path.dentry = dget(dentry);
+	while (d_mountpoint(path.dentry) && follow_down(&path));
+
+	exp2 = rqst_exp_get_by_name(rqstp, &path);
+	if (IS_ERR(exp2))
+		err = PTR_ERR(exp2);
+	else  {
+		/*
+		 * The export exist so allow the access
+		 */
+		exp_put(exp2);
+	}
+
+	dput(path.dentry);
+	mntput(path.mnt);
+	return err;
+}
 __be32
 nfsd_lookup_dentry(struct svc_rqst *rqstp, struct svc_fh *fhp,
 		   const char *name, unsigned int len,
@@ -150,7 +199,7 @@ nfsd_lookup_dentry(struct svc_rqst *rqstp, struct svc_fh *fhp,
 	struct dentry		*dparent;
 	struct dentry		*dentry;
 	__be32			err;
-	int			host_err;
+	int			host_err, v4root;
 
 	dprintk("nfsd: nfsd_lookup(fh %s, %.*s)\n", SVCFH_fmt(fhp), len,name);
 
@@ -162,6 +211,7 @@ nfsd_lookup_dentry(struct svc_rqst *rqstp, struct svc_fh *fhp,
 	dparent = fhp->fh_dentry;
 	exp  = fhp->fh_export;
 	exp_get(exp);
+	v4root = (exp->ex_flags & NFSEXP_V4ROOT);
 
 	/* Lookup the name, but don't follow links */
 	if (isdotent(name, len)) {
@@ -169,7 +219,7 @@ nfsd_lookup_dentry(struct svc_rqst *rqstp, struct svc_fh *fhp,
 			dentry = dget(dparent);
 		else if (dparent != exp->ex_path.dentry)
 			dentry = dget_parent(dparent);
-		else if (!EX_NOHIDE(exp))
+		else if (!EX_NOHIDE(exp) && !nfsd_v4client(rqstp))
 			dentry = dget(dparent); /* .. == . just like at / */
 		else {
 			/* checking mountpoint crossing is very different when stepping up */
@@ -206,9 +256,21 @@ nfsd_lookup_dentry(struct svc_rqst *rqstp, struct svc_fh *fhp,
 		if (IS_ERR(dentry))
 			goto out_nfserr;
 		/*
+		 * The export is a pseudo one, make sure the
+		 * dentry is accessible 
+		 */
+		v4root = (dentry->d_inode && v4root);
+		if (v4root) {
+			host_err = nfsd_export_lookup(rqstp, dentry, exp);
+			if (host_err) {
+				dput(dentry);
+				goto out_nfserr;
+			}
+		}
+		/*
 		 * check if we have crossed a mount point ...
 		 */
-		if (d_mountpoint(dentry)) {
+		if (d_mountpoint(dentry) || v4root) {
 			if ((host_err = nfsd_cross_mnt(rqstp, &dentry, &exp))) {
 				dput(dentry);
 				goto out_nfserr;
diff --git a/include/linux/nfsd/export.h b/include/linux/nfsd/export.h
index a6d9ef2..4c63217 100644
--- a/include/linux/nfsd/export.h
+++ b/include/linux/nfsd/export.h
@@ -39,7 +39,8 @@
 #define NFSEXP_FSID		0x2000
 #define	NFSEXP_CROSSMOUNT	0x4000
 #define	NFSEXP_NOACL		0x8000	/* reserved for possible ACL related use */
-#define NFSEXP_ALLFLAGS		0xFE3F
+#define	NFSEXP_V4ROOT		0x10000
+#define NFSEXP_ALLFLAGS		0x1FE3F
 
 /* The flags that may vary depending on security flavor: */
 #define NFSEXP_SECINFO_FLAGS	(NFSEXP_READONLY | NFSEXP_ROOTSQUASH \
diff --git a/include/linux/nfsd/nfsd.h b/include/linux/nfsd/nfsd.h
index 510ffdd..cc182ad 100644
--- a/include/linux/nfsd/nfsd.h
+++ b/include/linux/nfsd/nfsd.h
@@ -79,6 +79,8 @@ int		nfsd_racache_init(int);
 void		nfsd_racache_shutdown(void);
 int		nfsd_cross_mnt(struct svc_rqst *rqstp, struct dentry **dpp,
 		                struct svc_export **expp);
+int		nfsd_export_lookup(struct svc_rqst *rqstp, struct dentry *dpp,
+		                struct svc_export *exp);
 __be32		nfsd_lookup(struct svc_rqst *, struct svc_fh *,
 				const char *, unsigned int, struct svc_fh *);
 __be32		 nfsd_lookup_dentry(struct svc_rqst *, struct svc_fh *,
