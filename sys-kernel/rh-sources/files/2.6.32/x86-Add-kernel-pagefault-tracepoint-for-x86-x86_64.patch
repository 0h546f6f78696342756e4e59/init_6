From: Larry Woodman <lwoodman@redhat.com>
Date: Fri, 8 Jan 2010 21:34:01 -0500
Subject: [x86] Add kernel pagefault tracepoint for x86 & x86_64.
Message-id: <1262986441.20582.95.camel@dhcp-100-19-198.bos.redhat.com>
Patchwork-id: 22361
O-Subject: [RHEL6.0 PATCH] Add kernel pagefault tracepoint for x86 & x86_64.
Bugzilla: 526032
RH-Acked-by: Rik van Riel <riel@redhat.com>

Hitachi requested that we add a tracepoint for x86 & x86_64
architectures to catch kernel pagefaults before it results in a panic.

1.  Feature Overview:
     a. Name of feature:
         Tracepoint for kernel pagefault event

     b. Feature Description
         This feature provides a tracepoint to trace kernel pagefault
         event.  The argument should include the IP (instruction
         pointer) and the faulted virtual address.

2.  Feature Details:
     a. Architectures:
         32-bit x86
         64-bit Intel EM64T/AMD64

     b. Bugzilla Dependencies:
         No

     c. Drivers or hardware dependencies:
         No

     d. Upstream acceptance information:
         No

     e. External links:
         No

     f. Severity (U,H,M,L):
         Middle

     g. Target Release Date:
         2010 1Q

3. Business Justification:
     a. Why is this feature needed?
         To lower the support cost of both Red Hat and Hitachi at kernel
         failure, Hitachi is developing a kernel flight recorder that
         runs background, collecting kernel events/data at all times.
         It will help us diagnose the future problems quickly and
         reliably.

         When analyzing a vmcore resulting from a kernel failure, we
         _often_ hypothesize that "there should have a pagefault event
         just before this instruction" or similar.  Sometimes it means
         that there should have a small delay between instructions that
         extends a critical session and exposed a missing lock.  Since
         there have been no evidence of kernel pagefault, it is quite
         difficult to adopt the hypothesis.

         If we can trace the kernel pagefault event, it will help narrow
         the possible cause of failure and will accelerate the
         investigation _a lot_.

     b. What hardware does this enable?
         No

     c. Forecast, impact on revenue?
         Having a good FFDC (First Failure Data Capture) feature appeals
         to MC customers and will impact the number of AMC subscription.

---------------------------------------------------------------------------------
It seems that the original bz (Bug 517133 - [Hitachi 5.5 FEAT] Tracepoint for
kernel pagefault event) has been successfully implemented (thank you very
much!). So, can we expect that the patch will be forward ported to RHEL6.0 too?
---------------------------------------------------------------------------------
In order to get what they requested we have to trace all kernel
pagefaults even if they are handled by exception table entries or known
CPU and/or BIOS bugs.  This is accomplished by changing do_page_fault()
to be a stub that extracts the address, calls __do_page_fault() and then
calls the trace_mm_kernel_pagefault() tracepoint.

Tested on x86 and x86_64.

Fixes BZ/Feature Request 526032

Signed-off-by: Aristeu Rozanski <arozansk@redhat.com>

diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
index f4cee90..4302583 100644
--- a/arch/x86/mm/fault.c
+++ b/arch/x86/mm/fault.c
@@ -11,6 +11,7 @@
 #include <linux/kprobes.h>		/* __kprobes, ...		*/
 #include <linux/mmiotrace.h>		/* kmmio_handler, ...		*/
 #include <linux/perf_event.h>		/* perf_sw_event		*/
+#include <trace/events/kmem.h>
 
 #include <asm/traps.h>			/* dotraplinkage, ...		*/
 #include <asm/pgalloc.h>		/* pgd_*(), ...			*/
@@ -937,17 +938,10 @@ static int fault_in_kernel_space(unsigned long address)
 	return address >= TASK_SIZE_MAX;
 }
 
-/*
- * This routine handles page faults.  It determines the address,
- * and the problem, and then passes it off to one of the appropriate
- * routines.
- */
-dotraplinkage void __kprobes
-do_page_fault(struct pt_regs *regs, unsigned long error_code)
+static inline void __do_page_fault(struct pt_regs *regs, unsigned long address, unsigned long error_code)
 {
 	struct vm_area_struct *vma;
 	struct task_struct *tsk;
-	unsigned long address;
 	struct mm_struct *mm;
 	int write;
 	int fault;
@@ -955,9 +949,6 @@ do_page_fault(struct pt_regs *regs, unsigned long error_code)
 	tsk = current;
 	mm = tsk->mm;
 
-	/* Get the faulting address: */
-	address = read_cr2();
-
 	/*
 	 * Detect and handle instructions that would cause a page fault for
 	 * both a tracked kernel page and a userspace page.
@@ -1137,3 +1128,22 @@ good_area:
 
 	up_read(&mm->mmap_sem);
 }
+
+/*
+ * This routine handles page faults.  It determines the address,
+ * and the problem, and then passes it off to one of the appropriate
+ * routines.
+ */
+dotraplinkage void __kprobes
+do_page_fault(struct pt_regs *regs, unsigned long error_code)
+{
+	unsigned long address;
+
+	/* Get the faulting address: */
+	address = read_cr2();
+
+	__do_page_fault(regs, address, error_code);
+
+	if (!user_mode(regs))
+		trace_mm_kernel_pagefault(current, address, regs);
+}
diff --git a/include/trace/events/kmem.h b/include/trace/events/kmem.h
index bc9d19e..3ce7607 100644
--- a/include/trace/events/kmem.h
+++ b/include/trace/events/kmem.h
@@ -801,6 +801,29 @@ TRACE_EVENT(mm_pagereclaim_shrinkinactive,
 		__entry->file ? "pagecache" : "anonymous",
 		__entry->reclaimed, __entry->priority)
 	);
+
+TRACE_EVENT(mm_kernel_pagefault,
+
+	TP_PROTO(struct task_struct *task, unsigned long address, struct pt_regs *regs),
+
+	TP_ARGS(task, address, regs),
+
+	TP_STRUCT__entry(
+		__field(struct task_struct *, task)
+		__field(unsigned long, address)
+		__field(struct pt_regs *, regs)
+	),
+
+	TP_fast_assign(
+		__entry->task = task;
+		__entry->address = address;
+		__entry->regs = regs;
+	),
+
+	TP_printk("task=%lx, address=%lx, regs=%lx",
+		(unsigned long)__entry->task, (unsigned long)__entry->address,
+			__entry->regs)
+	);
 #endif /* _TRACE_KMEM_H */
 
 /* This part must be outside protection */
