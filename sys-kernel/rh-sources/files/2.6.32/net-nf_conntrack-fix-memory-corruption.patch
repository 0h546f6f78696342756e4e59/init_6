From: Jon Masters <jcm@redhat.com>
Date: Thu, 4 Feb 2010 09:56:11 -0500
Subject: [net] nf_conntrack: fix memory corruption
Message-id: <1265277371.2861.376.camel@tonnant>
Patchwork-id: 23123
O-Subject: [RHEL6.0 PATCH] [URGENT] netfilter: nf_conntrack: fix memory
	corruption
Bugzilla: 559471
RH-Acked-by: David S. Miller <davem@redhat.com>

https://bugzilla.redhat.com/show_bug.cgi?id=559471
[RHEL6.0] netfilter (iptables) conntrack: panic on systems using KVM
+netfilter connection tracking

Description of problem:
The RHEL6.0 (and all recent 2.6 series kernels) will panic when running
libvirtd (KVM) with iptables connection tracking enabled. This patch is
therefore urgent for beta1 kernels when using autostart KVM guests.

The netfilter conntrack code has a number of serious bugs, one of which
is that it will corrupt the nf_conntrack_untracked statically allocated
struct due to attempting to "free" it back into a SLAB cache from which
it was not allocated. This occurs when using multiple network namespaces
(the default used by libvirtd on startup, when it will attempt to create
a new namespace just to see if it's possible). Typically, the guest need
only send an ICMPv6 packet that the host isn't tracking for the game to
be over quickly. This affects any systems with autostart KVM VMs.

Solution:
The solution is to do per-namespace "untracked" (this is a catchall for
non-connection tracking connections) tracking. But that change is more
invasive than this fix, and so this fix is proposed for 2.6.33. There
is likely to be more work on per-namespace bits for 2.6.34.

This bug has existed upstream for quite a long time, but depending upon
your toolchain and build environment - and configuration options - one
of several possible items in the kernel read_mostly data section will
get corrupted silently when attempting to free nf_conntrack_untracked.
It so happens that recent Fedora and RHEL kernels (if you look at the
objdump of the data sections) have nf_conntrack_htable_size as the
immediate follower of nf_conntrack_untracked and so they are the
unlucky victims in this case, which causes immediate instability.

Upstream status:
The issue was identified by me on Friday night and a fix was developed
between myself and upstream. The following has been posted upstream.

I have confirmed that this resolves BZ 559471. Please review and ACK.

Thanks,

Jon.
commit 056ff3e3bd1563969a311697323ff929df94415c
Author: Patrick McHardy <kaber@trash.net>
Date:   Wed Feb 3 12:58:06 2010 +0100

    netfilter: nf_conntrack: fix memory corruption with multiple namespaces

    As discovered by Jon Masters <jonathan@jonmasters.org>, the "untracked"
    conntrack, which is located in the data section, might be accidentally
    freed when a new namespace is instantiated while the untracked conntrack
    is attached to a skb because the reference count it re-initialized.

    The best fix would be to use a seperate untracked conntrack per
    namespace since it includes a namespace pointer. Unfortunately this is
    not possible without larger changes since the namespace is not easily
    available everywhere we need it. For now move the untracked conntrack
    initialization to the init_net setup function to make sure the reference
    count is not re-initialized and handle cleanup in the init_net cleanup
    function to make sure namespaces can exit properly while the untracked
    conntrack is in use in other namespaces.

    Signed-off-by: Patrick McHardy <kaber@trash.net>

Signed-off-by: Aristeu Rozanski <arozansk@redhat.com>

diff --git a/net/netfilter/nf_conntrack_core.c b/net/netfilter/nf_conntrack_core.c
index b9168c1..4489676 100644
--- a/net/netfilter/nf_conntrack_core.c
+++ b/net/netfilter/nf_conntrack_core.c
@@ -1107,6 +1107,10 @@ static void nf_ct_release_dying_list(struct net *net)
 
 static void nf_conntrack_cleanup_init_net(void)
 {
+	/* wait until all references to nf_conntrack_untracked are dropped */
+	while (atomic_read(&nf_conntrack_untracked.ct_general.use) > 1)
+		schedule();
+
 	nf_conntrack_helper_fini();
 	nf_conntrack_proto_fini();
 	kmem_cache_destroy(nf_conntrack_cachep);
@@ -1121,9 +1125,6 @@ static void nf_conntrack_cleanup_net(struct net *net)
 		schedule();
 		goto i_see_dead_people;
 	}
-	/* wait until all references to nf_conntrack_untracked are dropped */
-	while (atomic_read(&nf_conntrack_untracked.ct_general.use) > 1)
-		schedule();
 
 	nf_ct_free_hashtable(net->ct.hash, net->ct.hash_vmalloc,
 			     nf_conntrack_htable_size);
@@ -1282,6 +1283,14 @@ static int nf_conntrack_init_init_net(void)
 	if (ret < 0)
 		goto err_helper;
 
+	/* Set up fake conntrack: to never be deleted, not in any hashes */
+#ifdef CONFIG_NET_NS
+	nf_conntrack_untracked.ct_net = &init_net;
+#endif
+	atomic_set(&nf_conntrack_untracked.ct_general.use, 1);
+	/*  - and look it like as a confirmed connection */
+	set_bit(IPS_CONFIRMED_BIT, &nf_conntrack_untracked.status);
+
 	return 0;
 
 err_helper:
@@ -1327,15 +1336,6 @@ static int nf_conntrack_init_net(struct net *net)
 	if (ret < 0)
 		goto err_ecache;
 
-	/* Set up fake conntrack:
-	    - to never be deleted, not in any hashes */
-#ifdef CONFIG_NET_NS
-	nf_conntrack_untracked.ct_net = &init_net;
-#endif
-	atomic_set(&nf_conntrack_untracked.ct_general.use, 1);
-	/*  - and look it like as a confirmed connection */
-	set_bit(IPS_CONFIRMED_BIT, &nf_conntrack_untracked.status);
-
 	return 0;
 
 err_ecache:
