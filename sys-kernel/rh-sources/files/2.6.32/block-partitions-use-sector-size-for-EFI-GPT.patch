From: Jeff Moyer <jmoyer@redhat.com>
Date: Tue, 8 Dec 2009 18:57:51 -0500
Subject: [block] partitions: use sector size for EFI GPT
Message-id: <1260298712-12756-19-git-send-email-jmoyer@redhat.com>
Patchwork-id: 21762
O-Subject: [RHEL6 PATCH 18/59] partitions: use sector size for EFI GPT
Bugzilla: 463632
RH-Acked-by: Vivek Goyal <vgoyal@redhat.com>

fixes bug 463632

commit 7d13af3279985f554784a45cc961f706dbcdbdd1
Author: Karel Zak <kzak@redhat.com>
Date:   Mon Nov 23 09:29:13 2009 +0100

    partitions: use sector size for EFI GPT

    Currently, kernel uses strictly 512-byte sectors for EFI GPT parsing.
    That's wrong.

    UEFI standard (version 2.3, May 2009, 5.3.1 GUID Format overview, page
    95) defines that LBA is always based on the logical block size. It
    means bdev_logical_block_size() (aka BLKSSZGET) for Linux.

    This patch removes static sector size from EFI GPT parser.

    The problem is reproducible with the latest GNU Parted:

     # modprobe scsi_debug dev_size_mb=50 sector_size=4096

      # ./parted /dev/sdb print
      Model: Linux scsi_debug (scsi)
      Disk /dev/sdb: 52.4MB
      Sector size (logical/physical): 4096B/4096B
      Partition Table: gpt

      Number  Start   End     Size    File system  Name     Flags
       1      24.6kB  3002kB  2978kB               primary
       2      3002kB  6001kB  2998kB               primary
       3      6001kB  9003kB  3002kB               primary

      # blockdev --rereadpt /dev/sdb
      # dmesg | tail -1
       sdb: unknown partition table      <---- !!!

    with this patch:

      # blockdev --rereadpt /dev/sdb
      # dmesg | tail -1
       sdb: sdb1 sdb2 sdb3

Signed-off-by: Jeff Moyer <jmoyer@redhat.com>
Signed-off-by: Aristeu Rozanski <arozansk@redhat.com>

diff --git a/fs/partitions/efi.c b/fs/partitions/efi.c
index 038a602..80eeff5 100644
--- a/fs/partitions/efi.c
+++ b/fs/partitions/efi.c
@@ -1,7 +1,9 @@
 /************************************************************
  * EFI GUID Partition Table handling
- * Per Intel EFI Specification v1.02
- * http://developer.intel.com/technology/efi/efi.htm
+ *
+ * http://www.uefi.org/specs/
+ * http://www.intel.com/technology/efi/
+ *
  * efi.[ch] by Matt Domsch <Matt_Domsch@dell.com>
  *   Copyright 2000,2001,2002,2004 Dell Inc.
  *
@@ -92,6 +94,7 @@
  *
  ************************************************************/
 #include <linux/crc32.h>
+#include <linux/math64.h>
 #include "check.h"
 #include "efi.h"
 
@@ -141,7 +144,8 @@ last_lba(struct block_device *bdev)
 {
 	if (!bdev || !bdev->bd_inode)
 		return 0;
-	return (bdev->bd_inode->i_size >> 9) - 1ULL;
+	return div_u64(bdev->bd_inode->i_size,
+		       bdev_logical_block_size(bdev)) - 1ULL;
 }
 
 static inline int
@@ -188,6 +192,7 @@ static size_t
 read_lba(struct block_device *bdev, u64 lba, u8 * buffer, size_t count)
 {
 	size_t totalreadcount = 0;
+	sector_t n = lba * (bdev_logical_block_size(bdev) / 512);
 
 	if (!bdev || !buffer || lba > last_lba(bdev))
                 return 0;
@@ -195,7 +200,7 @@ read_lba(struct block_device *bdev, u64 lba, u8 * buffer, size_t count)
 	while (count) {
 		int copied = 512;
 		Sector sect;
-		unsigned char *data = read_dev_sector(bdev, lba++, &sect);
+		unsigned char *data = read_dev_sector(bdev, n++, &sect);
 		if (!data)
 			break;
 		if (copied > count)
@@ -601,6 +606,7 @@ efi_partition(struct parsed_partitions *state, struct block_device *bdev)
 	gpt_header *gpt = NULL;
 	gpt_entry *ptes = NULL;
 	u32 i;
+	unsigned ssz = bdev_logical_block_size(bdev) / 512;
 
 	if (!find_valid_gpt(bdev, &gpt, &ptes) || !gpt || !ptes) {
 		kfree(gpt);
@@ -611,13 +617,14 @@ efi_partition(struct parsed_partitions *state, struct block_device *bdev)
 	pr_debug("GUID Partition Table is valid!  Yea!\n");
 
 	for (i = 0; i < le32_to_cpu(gpt->num_partition_entries) && i < state->limit-1; i++) {
+		u64 start = le64_to_cpu(ptes[i].starting_lba);
+		u64 size = le64_to_cpu(ptes[i].ending_lba) -
+			   le64_to_cpu(ptes[i].starting_lba) + 1ULL;
+
 		if (!is_pte_valid(&ptes[i], last_lba(bdev)))
 			continue;
 
-		put_partition(state, i+1, le64_to_cpu(ptes[i].starting_lba),
-				 (le64_to_cpu(ptes[i].ending_lba) -
-                                  le64_to_cpu(ptes[i].starting_lba) +
-				  1ULL));
+		put_partition(state, i+1, start * ssz, size * ssz);
 
 		/* If this is a RAID volume, tell md */
 		if (!efi_guidcmp(ptes[i].partition_type_guid,
